// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_weight_1x1_from (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dest_V_offset_offset,
        m_axi_src_V_AWVALID,
        m_axi_src_V_AWREADY,
        m_axi_src_V_AWADDR,
        m_axi_src_V_AWID,
        m_axi_src_V_AWLEN,
        m_axi_src_V_AWSIZE,
        m_axi_src_V_AWBURST,
        m_axi_src_V_AWLOCK,
        m_axi_src_V_AWCACHE,
        m_axi_src_V_AWPROT,
        m_axi_src_V_AWQOS,
        m_axi_src_V_AWREGION,
        m_axi_src_V_AWUSER,
        m_axi_src_V_WVALID,
        m_axi_src_V_WREADY,
        m_axi_src_V_WDATA,
        m_axi_src_V_WSTRB,
        m_axi_src_V_WLAST,
        m_axi_src_V_WID,
        m_axi_src_V_WUSER,
        m_axi_src_V_ARVALID,
        m_axi_src_V_ARREADY,
        m_axi_src_V_ARADDR,
        m_axi_src_V_ARID,
        m_axi_src_V_ARLEN,
        m_axi_src_V_ARSIZE,
        m_axi_src_V_ARBURST,
        m_axi_src_V_ARLOCK,
        m_axi_src_V_ARCACHE,
        m_axi_src_V_ARPROT,
        m_axi_src_V_ARQOS,
        m_axi_src_V_ARREGION,
        m_axi_src_V_ARUSER,
        m_axi_src_V_RVALID,
        m_axi_src_V_RREADY,
        m_axi_src_V_RDATA,
        m_axi_src_V_RLAST,
        m_axi_src_V_RID,
        m_axi_src_V_RUSER,
        m_axi_src_V_RRESP,
        m_axi_src_V_BVALID,
        m_axi_src_V_BREADY,
        m_axi_src_V_BRESP,
        m_axi_src_V_BID,
        m_axi_src_V_BUSER,
        src_V_offset,
        src_V_offset1,
        weight_buf_1x1_V_0_address0,
        weight_buf_1x1_V_0_ce0,
        weight_buf_1x1_V_0_we0,
        weight_buf_1x1_V_0_d0,
        weight_buf_1x1_V_1_address0,
        weight_buf_1x1_V_1_ce0,
        weight_buf_1x1_V_1_we0,
        weight_buf_1x1_V_1_d0,
        weight_buf_1x1_V_2_address0,
        weight_buf_1x1_V_2_ce0,
        weight_buf_1x1_V_2_we0,
        weight_buf_1x1_V_2_d0,
        weight_buf_1x1_V_3_address0,
        weight_buf_1x1_V_3_ce0,
        weight_buf_1x1_V_3_we0,
        weight_buf_1x1_V_3_d0,
        weight_buf_1x1_V_4_address0,
        weight_buf_1x1_V_4_ce0,
        weight_buf_1x1_V_4_we0,
        weight_buf_1x1_V_4_d0,
        weight_buf_1x1_V_5_address0,
        weight_buf_1x1_V_5_ce0,
        weight_buf_1x1_V_5_we0,
        weight_buf_1x1_V_5_d0,
        weight_buf_1x1_V_6_address0,
        weight_buf_1x1_V_6_ce0,
        weight_buf_1x1_V_6_we0,
        weight_buf_1x1_V_6_d0,
        weight_buf_1x1_V_7_address0,
        weight_buf_1x1_V_7_ce0,
        weight_buf_1x1_V_7_we0,
        weight_buf_1x1_V_7_d0,
        weight_buf_1x1_V_8_address0,
        weight_buf_1x1_V_8_ce0,
        weight_buf_1x1_V_8_we0,
        weight_buf_1x1_V_8_d0,
        weight_buf_1x1_V_9_address0,
        weight_buf_1x1_V_9_ce0,
        weight_buf_1x1_V_9_we0,
        weight_buf_1x1_V_9_d0,
        weight_buf_1x1_V_10_address0,
        weight_buf_1x1_V_10_ce0,
        weight_buf_1x1_V_10_we0,
        weight_buf_1x1_V_10_d0,
        weight_buf_1x1_V_11_address0,
        weight_buf_1x1_V_11_ce0,
        weight_buf_1x1_V_11_we0,
        weight_buf_1x1_V_11_d0,
        weight_buf_1x1_V_12_address0,
        weight_buf_1x1_V_12_ce0,
        weight_buf_1x1_V_12_we0,
        weight_buf_1x1_V_12_d0,
        weight_buf_1x1_V_13_address0,
        weight_buf_1x1_V_13_ce0,
        weight_buf_1x1_V_13_we0,
        weight_buf_1x1_V_13_d0,
        weight_buf_1x1_V_14_address0,
        weight_buf_1x1_V_14_ce0,
        weight_buf_1x1_V_14_we0,
        weight_buf_1x1_V_14_d0,
        weight_buf_1x1_V_15_address0,
        weight_buf_1x1_V_15_ce0,
        weight_buf_1x1_V_15_we0,
        weight_buf_1x1_V_15_d0,
        weight_buf_1x1_V_16_address0,
        weight_buf_1x1_V_16_ce0,
        weight_buf_1x1_V_16_we0,
        weight_buf_1x1_V_16_d0,
        weight_buf_1x1_V_17_address0,
        weight_buf_1x1_V_17_ce0,
        weight_buf_1x1_V_17_we0,
        weight_buf_1x1_V_17_d0,
        weight_buf_1x1_V_18_address0,
        weight_buf_1x1_V_18_ce0,
        weight_buf_1x1_V_18_we0,
        weight_buf_1x1_V_18_d0,
        weight_buf_1x1_V_19_address0,
        weight_buf_1x1_V_19_ce0,
        weight_buf_1x1_V_19_we0,
        weight_buf_1x1_V_19_d0,
        weight_buf_1x1_V_20_address0,
        weight_buf_1x1_V_20_ce0,
        weight_buf_1x1_V_20_we0,
        weight_buf_1x1_V_20_d0,
        weight_buf_1x1_V_21_address0,
        weight_buf_1x1_V_21_ce0,
        weight_buf_1x1_V_21_we0,
        weight_buf_1x1_V_21_d0,
        weight_buf_1x1_V_22_address0,
        weight_buf_1x1_V_22_ce0,
        weight_buf_1x1_V_22_we0,
        weight_buf_1x1_V_22_d0,
        weight_buf_1x1_V_23_address0,
        weight_buf_1x1_V_23_ce0,
        weight_buf_1x1_V_23_we0,
        weight_buf_1x1_V_23_d0,
        weight_buf_1x1_V_24_address0,
        weight_buf_1x1_V_24_ce0,
        weight_buf_1x1_V_24_we0,
        weight_buf_1x1_V_24_d0,
        weight_buf_1x1_V_25_address0,
        weight_buf_1x1_V_25_ce0,
        weight_buf_1x1_V_25_we0,
        weight_buf_1x1_V_25_d0,
        weight_buf_1x1_V_26_address0,
        weight_buf_1x1_V_26_ce0,
        weight_buf_1x1_V_26_we0,
        weight_buf_1x1_V_26_d0,
        weight_buf_1x1_V_27_address0,
        weight_buf_1x1_V_27_ce0,
        weight_buf_1x1_V_27_we0,
        weight_buf_1x1_V_27_d0,
        weight_buf_1x1_V_28_address0,
        weight_buf_1x1_V_28_ce0,
        weight_buf_1x1_V_28_we0,
        weight_buf_1x1_V_28_d0,
        weight_buf_1x1_V_29_address0,
        weight_buf_1x1_V_29_ce0,
        weight_buf_1x1_V_29_we0,
        weight_buf_1x1_V_29_d0,
        weight_buf_1x1_V_30_address0,
        weight_buf_1x1_V_30_ce0,
        weight_buf_1x1_V_30_we0,
        weight_buf_1x1_V_30_d0,
        weight_buf_1x1_V_31_address0,
        weight_buf_1x1_V_31_ce0,
        weight_buf_1x1_V_31_we0,
        weight_buf_1x1_V_31_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_pp0_stage0 = 10'd256;
parameter    ap_ST_fsm_state12 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] dest_V_offset_offset;
output   m_axi_src_V_AWVALID;
input   m_axi_src_V_AWREADY;
output  [31:0] m_axi_src_V_AWADDR;
output  [0:0] m_axi_src_V_AWID;
output  [31:0] m_axi_src_V_AWLEN;
output  [2:0] m_axi_src_V_AWSIZE;
output  [1:0] m_axi_src_V_AWBURST;
output  [1:0] m_axi_src_V_AWLOCK;
output  [3:0] m_axi_src_V_AWCACHE;
output  [2:0] m_axi_src_V_AWPROT;
output  [3:0] m_axi_src_V_AWQOS;
output  [3:0] m_axi_src_V_AWREGION;
output  [0:0] m_axi_src_V_AWUSER;
output   m_axi_src_V_WVALID;
input   m_axi_src_V_WREADY;
output  [511:0] m_axi_src_V_WDATA;
output  [63:0] m_axi_src_V_WSTRB;
output   m_axi_src_V_WLAST;
output  [0:0] m_axi_src_V_WID;
output  [0:0] m_axi_src_V_WUSER;
output   m_axi_src_V_ARVALID;
input   m_axi_src_V_ARREADY;
output  [31:0] m_axi_src_V_ARADDR;
output  [0:0] m_axi_src_V_ARID;
output  [31:0] m_axi_src_V_ARLEN;
output  [2:0] m_axi_src_V_ARSIZE;
output  [1:0] m_axi_src_V_ARBURST;
output  [1:0] m_axi_src_V_ARLOCK;
output  [3:0] m_axi_src_V_ARCACHE;
output  [2:0] m_axi_src_V_ARPROT;
output  [3:0] m_axi_src_V_ARQOS;
output  [3:0] m_axi_src_V_ARREGION;
output  [0:0] m_axi_src_V_ARUSER;
input   m_axi_src_V_RVALID;
output   m_axi_src_V_RREADY;
input  [511:0] m_axi_src_V_RDATA;
input   m_axi_src_V_RLAST;
input  [0:0] m_axi_src_V_RID;
input  [0:0] m_axi_src_V_RUSER;
input  [1:0] m_axi_src_V_RRESP;
input   m_axi_src_V_BVALID;
output   m_axi_src_V_BREADY;
input  [1:0] m_axi_src_V_BRESP;
input  [0:0] m_axi_src_V_BID;
input  [0:0] m_axi_src_V_BUSER;
input  [25:0] src_V_offset;
input  [8:0] src_V_offset1;
output  [6:0] weight_buf_1x1_V_0_address0;
output   weight_buf_1x1_V_0_ce0;
output   weight_buf_1x1_V_0_we0;
output  [10:0] weight_buf_1x1_V_0_d0;
output  [6:0] weight_buf_1x1_V_1_address0;
output   weight_buf_1x1_V_1_ce0;
output   weight_buf_1x1_V_1_we0;
output  [10:0] weight_buf_1x1_V_1_d0;
output  [6:0] weight_buf_1x1_V_2_address0;
output   weight_buf_1x1_V_2_ce0;
output   weight_buf_1x1_V_2_we0;
output  [10:0] weight_buf_1x1_V_2_d0;
output  [6:0] weight_buf_1x1_V_3_address0;
output   weight_buf_1x1_V_3_ce0;
output   weight_buf_1x1_V_3_we0;
output  [10:0] weight_buf_1x1_V_3_d0;
output  [6:0] weight_buf_1x1_V_4_address0;
output   weight_buf_1x1_V_4_ce0;
output   weight_buf_1x1_V_4_we0;
output  [10:0] weight_buf_1x1_V_4_d0;
output  [6:0] weight_buf_1x1_V_5_address0;
output   weight_buf_1x1_V_5_ce0;
output   weight_buf_1x1_V_5_we0;
output  [10:0] weight_buf_1x1_V_5_d0;
output  [6:0] weight_buf_1x1_V_6_address0;
output   weight_buf_1x1_V_6_ce0;
output   weight_buf_1x1_V_6_we0;
output  [10:0] weight_buf_1x1_V_6_d0;
output  [6:0] weight_buf_1x1_V_7_address0;
output   weight_buf_1x1_V_7_ce0;
output   weight_buf_1x1_V_7_we0;
output  [10:0] weight_buf_1x1_V_7_d0;
output  [6:0] weight_buf_1x1_V_8_address0;
output   weight_buf_1x1_V_8_ce0;
output   weight_buf_1x1_V_8_we0;
output  [10:0] weight_buf_1x1_V_8_d0;
output  [6:0] weight_buf_1x1_V_9_address0;
output   weight_buf_1x1_V_9_ce0;
output   weight_buf_1x1_V_9_we0;
output  [10:0] weight_buf_1x1_V_9_d0;
output  [6:0] weight_buf_1x1_V_10_address0;
output   weight_buf_1x1_V_10_ce0;
output   weight_buf_1x1_V_10_we0;
output  [10:0] weight_buf_1x1_V_10_d0;
output  [6:0] weight_buf_1x1_V_11_address0;
output   weight_buf_1x1_V_11_ce0;
output   weight_buf_1x1_V_11_we0;
output  [10:0] weight_buf_1x1_V_11_d0;
output  [6:0] weight_buf_1x1_V_12_address0;
output   weight_buf_1x1_V_12_ce0;
output   weight_buf_1x1_V_12_we0;
output  [10:0] weight_buf_1x1_V_12_d0;
output  [6:0] weight_buf_1x1_V_13_address0;
output   weight_buf_1x1_V_13_ce0;
output   weight_buf_1x1_V_13_we0;
output  [10:0] weight_buf_1x1_V_13_d0;
output  [6:0] weight_buf_1x1_V_14_address0;
output   weight_buf_1x1_V_14_ce0;
output   weight_buf_1x1_V_14_we0;
output  [10:0] weight_buf_1x1_V_14_d0;
output  [6:0] weight_buf_1x1_V_15_address0;
output   weight_buf_1x1_V_15_ce0;
output   weight_buf_1x1_V_15_we0;
output  [10:0] weight_buf_1x1_V_15_d0;
output  [6:0] weight_buf_1x1_V_16_address0;
output   weight_buf_1x1_V_16_ce0;
output   weight_buf_1x1_V_16_we0;
output  [10:0] weight_buf_1x1_V_16_d0;
output  [6:0] weight_buf_1x1_V_17_address0;
output   weight_buf_1x1_V_17_ce0;
output   weight_buf_1x1_V_17_we0;
output  [10:0] weight_buf_1x1_V_17_d0;
output  [6:0] weight_buf_1x1_V_18_address0;
output   weight_buf_1x1_V_18_ce0;
output   weight_buf_1x1_V_18_we0;
output  [10:0] weight_buf_1x1_V_18_d0;
output  [6:0] weight_buf_1x1_V_19_address0;
output   weight_buf_1x1_V_19_ce0;
output   weight_buf_1x1_V_19_we0;
output  [10:0] weight_buf_1x1_V_19_d0;
output  [6:0] weight_buf_1x1_V_20_address0;
output   weight_buf_1x1_V_20_ce0;
output   weight_buf_1x1_V_20_we0;
output  [10:0] weight_buf_1x1_V_20_d0;
output  [6:0] weight_buf_1x1_V_21_address0;
output   weight_buf_1x1_V_21_ce0;
output   weight_buf_1x1_V_21_we0;
output  [10:0] weight_buf_1x1_V_21_d0;
output  [6:0] weight_buf_1x1_V_22_address0;
output   weight_buf_1x1_V_22_ce0;
output   weight_buf_1x1_V_22_we0;
output  [10:0] weight_buf_1x1_V_22_d0;
output  [6:0] weight_buf_1x1_V_23_address0;
output   weight_buf_1x1_V_23_ce0;
output   weight_buf_1x1_V_23_we0;
output  [10:0] weight_buf_1x1_V_23_d0;
output  [6:0] weight_buf_1x1_V_24_address0;
output   weight_buf_1x1_V_24_ce0;
output   weight_buf_1x1_V_24_we0;
output  [10:0] weight_buf_1x1_V_24_d0;
output  [6:0] weight_buf_1x1_V_25_address0;
output   weight_buf_1x1_V_25_ce0;
output   weight_buf_1x1_V_25_we0;
output  [10:0] weight_buf_1x1_V_25_d0;
output  [6:0] weight_buf_1x1_V_26_address0;
output   weight_buf_1x1_V_26_ce0;
output   weight_buf_1x1_V_26_we0;
output  [10:0] weight_buf_1x1_V_26_d0;
output  [6:0] weight_buf_1x1_V_27_address0;
output   weight_buf_1x1_V_27_ce0;
output   weight_buf_1x1_V_27_we0;
output  [10:0] weight_buf_1x1_V_27_d0;
output  [6:0] weight_buf_1x1_V_28_address0;
output   weight_buf_1x1_V_28_ce0;
output   weight_buf_1x1_V_28_we0;
output  [10:0] weight_buf_1x1_V_28_d0;
output  [6:0] weight_buf_1x1_V_29_address0;
output   weight_buf_1x1_V_29_ce0;
output   weight_buf_1x1_V_29_we0;
output  [10:0] weight_buf_1x1_V_29_d0;
output  [6:0] weight_buf_1x1_V_30_address0;
output   weight_buf_1x1_V_30_ce0;
output   weight_buf_1x1_V_30_we0;
output  [10:0] weight_buf_1x1_V_30_d0;
output  [6:0] weight_buf_1x1_V_31_address0;
output   weight_buf_1x1_V_31_ce0;
output   weight_buf_1x1_V_31_we0;
output  [10:0] weight_buf_1x1_V_31_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_src_V_ARVALID;
reg m_axi_src_V_RREADY;
reg weight_buf_1x1_V_0_ce0;
reg weight_buf_1x1_V_0_we0;
reg weight_buf_1x1_V_1_ce0;
reg weight_buf_1x1_V_1_we0;
reg weight_buf_1x1_V_2_ce0;
reg weight_buf_1x1_V_2_we0;
reg weight_buf_1x1_V_3_ce0;
reg weight_buf_1x1_V_3_we0;
reg weight_buf_1x1_V_4_ce0;
reg weight_buf_1x1_V_4_we0;
reg weight_buf_1x1_V_5_ce0;
reg weight_buf_1x1_V_5_we0;
reg weight_buf_1x1_V_6_ce0;
reg weight_buf_1x1_V_6_we0;
reg weight_buf_1x1_V_7_ce0;
reg weight_buf_1x1_V_7_we0;
reg weight_buf_1x1_V_8_ce0;
reg weight_buf_1x1_V_8_we0;
reg weight_buf_1x1_V_9_ce0;
reg weight_buf_1x1_V_9_we0;
reg weight_buf_1x1_V_10_ce0;
reg weight_buf_1x1_V_10_we0;
reg weight_buf_1x1_V_11_ce0;
reg weight_buf_1x1_V_11_we0;
reg weight_buf_1x1_V_12_ce0;
reg weight_buf_1x1_V_12_we0;
reg weight_buf_1x1_V_13_ce0;
reg weight_buf_1x1_V_13_we0;
reg weight_buf_1x1_V_14_ce0;
reg weight_buf_1x1_V_14_we0;
reg weight_buf_1x1_V_15_ce0;
reg weight_buf_1x1_V_15_we0;
reg weight_buf_1x1_V_16_ce0;
reg weight_buf_1x1_V_16_we0;
reg weight_buf_1x1_V_17_ce0;
reg weight_buf_1x1_V_17_we0;
reg weight_buf_1x1_V_18_ce0;
reg weight_buf_1x1_V_18_we0;
reg weight_buf_1x1_V_19_ce0;
reg weight_buf_1x1_V_19_we0;
reg weight_buf_1x1_V_20_ce0;
reg weight_buf_1x1_V_20_we0;
reg weight_buf_1x1_V_21_ce0;
reg weight_buf_1x1_V_21_we0;
reg weight_buf_1x1_V_22_ce0;
reg weight_buf_1x1_V_22_we0;
reg weight_buf_1x1_V_23_ce0;
reg weight_buf_1x1_V_23_we0;
reg weight_buf_1x1_V_24_ce0;
reg weight_buf_1x1_V_24_we0;
reg weight_buf_1x1_V_25_ce0;
reg weight_buf_1x1_V_25_we0;
reg weight_buf_1x1_V_26_ce0;
reg weight_buf_1x1_V_26_we0;
reg weight_buf_1x1_V_27_ce0;
reg weight_buf_1x1_V_27_we0;
reg weight_buf_1x1_V_28_ce0;
reg weight_buf_1x1_V_28_we0;
reg weight_buf_1x1_V_29_ce0;
reg weight_buf_1x1_V_29_we0;
reg weight_buf_1x1_V_30_ce0;
reg weight_buf_1x1_V_30_we0;
reg weight_buf_1x1_V_31_ce0;
reg weight_buf_1x1_V_31_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_V_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    src_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln376_reg_1136;
reg   [5:0] ci_0_reg_698;
wire   [26:0] add_ln647_fu_726_p2;
reg   [26:0] add_ln647_reg_1120;
wire   [8:0] tmp_7_fu_742_p3;
reg   [8:0] tmp_7_reg_1131;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln376_fu_750_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln376_reg_1136_pp0_iter1_reg;
wire   [5:0] ci_fu_756_p2;
reg   [5:0] ci_reg_1140;
reg    ap_enable_reg_pp0_iter0;
wire   [8:0] add_ln339_fu_766_p2;
reg   [8:0] add_ln339_reg_1145;
wire   [10:0] trunc_ln647_fu_771_p1;
reg   [10:0] trunc_ln647_reg_1150;
reg   [10:0] p_Result_36_1_reg_1155;
reg   [10:0] p_Result_36_2_reg_1160;
reg   [10:0] p_Result_36_3_reg_1165;
reg   [10:0] p_Result_36_4_reg_1170;
reg   [10:0] p_Result_36_5_reg_1175;
reg   [10:0] p_Result_36_6_reg_1180;
reg   [10:0] p_Result_36_7_reg_1185;
reg   [10:0] p_Result_36_8_reg_1190;
reg   [10:0] p_Result_36_9_reg_1195;
reg   [10:0] p_Result_36_s_reg_1200;
reg   [10:0] p_Result_36_10_reg_1205;
reg   [10:0] p_Result_36_11_reg_1210;
reg   [10:0] p_Result_36_12_reg_1215;
reg   [10:0] p_Result_36_13_reg_1220;
reg   [10:0] p_Result_36_14_reg_1225;
reg   [10:0] p_Result_36_15_reg_1230;
reg   [10:0] p_Result_36_16_reg_1235;
reg   [10:0] p_Result_36_17_reg_1240;
reg   [10:0] p_Result_36_18_reg_1245;
reg   [10:0] p_Result_36_19_reg_1250;
reg   [10:0] p_Result_36_20_reg_1255;
reg   [10:0] p_Result_36_21_reg_1260;
reg   [10:0] p_Result_36_22_reg_1265;
reg   [10:0] p_Result_36_23_reg_1270;
reg   [10:0] p_Result_36_24_reg_1275;
reg   [10:0] p_Result_36_25_reg_1280;
reg   [10:0] p_Result_36_26_reg_1285;
reg   [10:0] p_Result_36_27_reg_1290;
reg   [10:0] p_Result_36_28_reg_1295;
reg   [10:0] p_Result_36_29_reg_1300;
reg   [10:0] p_Result_36_30_reg_1305;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg   [5:0] ap_phi_mux_ci_0_phi_fu_702_p4;
wire   [63:0] zext_ln339_8_fu_1085_p1;
wire   [63:0] zext_ln647_3_fu_732_p1;
wire   [13:0] tmp_6_fu_710_p3;
wire   [26:0] zext_ln376_fu_718_p1;
wire   [26:0] zext_ln647_fu_722_p1;
wire   [8:0] zext_ln339_fu_762_p1;
wire    ap_CS_fsm_state12;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln376_reg_1136 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ci_0_reg_698 <= ci_reg_1140;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ci_0_reg_698 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln376_reg_1136 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln339_reg_1145 <= add_ln339_fu_766_p2;
        p_Result_36_10_reg_1205 <= {{m_axi_src_V_RDATA[186:176]}};
        p_Result_36_11_reg_1210 <= {{m_axi_src_V_RDATA[202:192]}};
        p_Result_36_12_reg_1215 <= {{m_axi_src_V_RDATA[218:208]}};
        p_Result_36_13_reg_1220 <= {{m_axi_src_V_RDATA[234:224]}};
        p_Result_36_14_reg_1225 <= {{m_axi_src_V_RDATA[250:240]}};
        p_Result_36_15_reg_1230 <= {{m_axi_src_V_RDATA[266:256]}};
        p_Result_36_16_reg_1235 <= {{m_axi_src_V_RDATA[282:272]}};
        p_Result_36_17_reg_1240 <= {{m_axi_src_V_RDATA[298:288]}};
        p_Result_36_18_reg_1245 <= {{m_axi_src_V_RDATA[314:304]}};
        p_Result_36_19_reg_1250 <= {{m_axi_src_V_RDATA[330:320]}};
        p_Result_36_1_reg_1155 <= {{m_axi_src_V_RDATA[26:16]}};
        p_Result_36_20_reg_1255 <= {{m_axi_src_V_RDATA[346:336]}};
        p_Result_36_21_reg_1260 <= {{m_axi_src_V_RDATA[362:352]}};
        p_Result_36_22_reg_1265 <= {{m_axi_src_V_RDATA[378:368]}};
        p_Result_36_23_reg_1270 <= {{m_axi_src_V_RDATA[394:384]}};
        p_Result_36_24_reg_1275 <= {{m_axi_src_V_RDATA[410:400]}};
        p_Result_36_25_reg_1280 <= {{m_axi_src_V_RDATA[426:416]}};
        p_Result_36_26_reg_1285 <= {{m_axi_src_V_RDATA[442:432]}};
        p_Result_36_27_reg_1290 <= {{m_axi_src_V_RDATA[458:448]}};
        p_Result_36_28_reg_1295 <= {{m_axi_src_V_RDATA[474:464]}};
        p_Result_36_29_reg_1300 <= {{m_axi_src_V_RDATA[490:480]}};
        p_Result_36_2_reg_1160 <= {{m_axi_src_V_RDATA[42:32]}};
        p_Result_36_30_reg_1305 <= {{m_axi_src_V_RDATA[506:496]}};
        p_Result_36_3_reg_1165 <= {{m_axi_src_V_RDATA[58:48]}};
        p_Result_36_4_reg_1170 <= {{m_axi_src_V_RDATA[74:64]}};
        p_Result_36_5_reg_1175 <= {{m_axi_src_V_RDATA[90:80]}};
        p_Result_36_6_reg_1180 <= {{m_axi_src_V_RDATA[106:96]}};
        p_Result_36_7_reg_1185 <= {{m_axi_src_V_RDATA[122:112]}};
        p_Result_36_8_reg_1190 <= {{m_axi_src_V_RDATA[138:128]}};
        p_Result_36_9_reg_1195 <= {{m_axi_src_V_RDATA[154:144]}};
        p_Result_36_s_reg_1200 <= {{m_axi_src_V_RDATA[170:160]}};
        trunc_ln647_reg_1150 <= trunc_ln647_fu_771_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln647_reg_1120 <= add_ln647_fu_726_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ci_reg_1140 <= ci_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln376_reg_1136 <= icmp_ln376_fu_750_p2;
        icmp_ln376_reg_1136_pp0_iter1_reg <= icmp_ln376_reg_1136;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_7_reg_1131[8 : 5] <= tmp_7_fu_742_p3[8 : 5];
    end
end

always @ (*) begin
    if ((icmp_ln376_fu_750_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_ci_0_phi_fu_702_p4 = ci_reg_1140;
    end else begin
        ap_phi_mux_ci_0_phi_fu_702_p4 = ci_0_reg_698;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_src_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_src_V_ARVALID = 1'b1;
    end else begin
        m_axi_src_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_src_V_RREADY = 1'b1;
    end else begin
        m_axi_src_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_V_blk_n_AR = m_axi_src_V_ARREADY;
    end else begin
        src_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_blk_n_R = m_axi_src_V_RVALID;
    end else begin
        src_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_0_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_0_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_10_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_10_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_11_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_11_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_12_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_12_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_13_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_13_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_14_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_14_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_15_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_15_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_16_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_16_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_17_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_17_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_18_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_18_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_19_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_19_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_1_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_1_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_20_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_20_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_20_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_21_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_21_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_21_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_22_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_22_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_22_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_23_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_23_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_23_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_24_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_24_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_24_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_25_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_25_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_26_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_26_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_26_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_27_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_27_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_27_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_28_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_28_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_28_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_29_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_29_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_29_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_2_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_2_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_30_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_30_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_30_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_31_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_31_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_31_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_3_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_3_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_4_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_4_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_5_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_5_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_6_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_6_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_7_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_7_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_8_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_8_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_9_ce0 = 1'b1;
    end else begin
        weight_buf_1x1_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln376_reg_1136_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_buf_1x1_V_9_we0 = 1'b1;
    end else begin
        weight_buf_1x1_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_src_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln376_fu_750_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln376_fu_750_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln339_fu_766_p2 = (zext_ln339_fu_762_p1 + tmp_7_reg_1131);

assign add_ln647_fu_726_p2 = (zext_ln376_fu_718_p1 + zext_ln647_fu_722_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln376_reg_1136 == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln376_reg_1136 == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((icmp_ln376_reg_1136 == 1'd0) & (m_axi_src_V_RVALID == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ci_fu_756_p2 = (ap_phi_mux_ci_0_phi_fu_702_p4 + 6'd1);

assign icmp_ln376_fu_750_p2 = ((ap_phi_mux_ci_0_phi_fu_702_p4 == 6'd32) ? 1'b1 : 1'b0);

assign m_axi_src_V_ARADDR = zext_ln647_3_fu_732_p1;

assign m_axi_src_V_ARBURST = 2'd0;

assign m_axi_src_V_ARCACHE = 4'd0;

assign m_axi_src_V_ARID = 1'd0;

assign m_axi_src_V_ARLEN = 32'd32;

assign m_axi_src_V_ARLOCK = 2'd0;

assign m_axi_src_V_ARPROT = 3'd0;

assign m_axi_src_V_ARQOS = 4'd0;

assign m_axi_src_V_ARREGION = 4'd0;

assign m_axi_src_V_ARSIZE = 3'd0;

assign m_axi_src_V_ARUSER = 1'd0;

assign m_axi_src_V_AWADDR = 32'd0;

assign m_axi_src_V_AWBURST = 2'd0;

assign m_axi_src_V_AWCACHE = 4'd0;

assign m_axi_src_V_AWID = 1'd0;

assign m_axi_src_V_AWLEN = 32'd0;

assign m_axi_src_V_AWLOCK = 2'd0;

assign m_axi_src_V_AWPROT = 3'd0;

assign m_axi_src_V_AWQOS = 4'd0;

assign m_axi_src_V_AWREGION = 4'd0;

assign m_axi_src_V_AWSIZE = 3'd0;

assign m_axi_src_V_AWUSER = 1'd0;

assign m_axi_src_V_AWVALID = 1'b0;

assign m_axi_src_V_BREADY = 1'b0;

assign m_axi_src_V_WDATA = 512'd0;

assign m_axi_src_V_WID = 1'd0;

assign m_axi_src_V_WLAST = 1'b0;

assign m_axi_src_V_WSTRB = 64'd0;

assign m_axi_src_V_WUSER = 1'd0;

assign m_axi_src_V_WVALID = 1'b0;

assign tmp_6_fu_710_p3 = {{src_V_offset1}, {5'd0}};

assign tmp_7_fu_742_p3 = {{dest_V_offset_offset}, {5'd0}};

assign trunc_ln647_fu_771_p1 = m_axi_src_V_RDATA[10:0];

assign weight_buf_1x1_V_0_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_0_d0 = trunc_ln647_reg_1150;

assign weight_buf_1x1_V_10_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_10_d0 = p_Result_36_s_reg_1200;

assign weight_buf_1x1_V_11_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_11_d0 = p_Result_36_10_reg_1205;

assign weight_buf_1x1_V_12_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_12_d0 = p_Result_36_11_reg_1210;

assign weight_buf_1x1_V_13_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_13_d0 = p_Result_36_12_reg_1215;

assign weight_buf_1x1_V_14_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_14_d0 = p_Result_36_13_reg_1220;

assign weight_buf_1x1_V_15_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_15_d0 = p_Result_36_14_reg_1225;

assign weight_buf_1x1_V_16_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_16_d0 = p_Result_36_15_reg_1230;

assign weight_buf_1x1_V_17_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_17_d0 = p_Result_36_16_reg_1235;

assign weight_buf_1x1_V_18_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_18_d0 = p_Result_36_17_reg_1240;

assign weight_buf_1x1_V_19_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_19_d0 = p_Result_36_18_reg_1245;

assign weight_buf_1x1_V_1_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_1_d0 = p_Result_36_1_reg_1155;

assign weight_buf_1x1_V_20_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_20_d0 = p_Result_36_19_reg_1250;

assign weight_buf_1x1_V_21_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_21_d0 = p_Result_36_20_reg_1255;

assign weight_buf_1x1_V_22_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_22_d0 = p_Result_36_21_reg_1260;

assign weight_buf_1x1_V_23_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_23_d0 = p_Result_36_22_reg_1265;

assign weight_buf_1x1_V_24_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_24_d0 = p_Result_36_23_reg_1270;

assign weight_buf_1x1_V_25_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_25_d0 = p_Result_36_24_reg_1275;

assign weight_buf_1x1_V_26_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_26_d0 = p_Result_36_25_reg_1280;

assign weight_buf_1x1_V_27_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_27_d0 = p_Result_36_26_reg_1285;

assign weight_buf_1x1_V_28_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_28_d0 = p_Result_36_27_reg_1290;

assign weight_buf_1x1_V_29_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_29_d0 = p_Result_36_28_reg_1295;

assign weight_buf_1x1_V_2_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_2_d0 = p_Result_36_2_reg_1160;

assign weight_buf_1x1_V_30_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_30_d0 = p_Result_36_29_reg_1300;

assign weight_buf_1x1_V_31_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_31_d0 = p_Result_36_30_reg_1305;

assign weight_buf_1x1_V_3_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_3_d0 = p_Result_36_3_reg_1165;

assign weight_buf_1x1_V_4_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_4_d0 = p_Result_36_4_reg_1170;

assign weight_buf_1x1_V_5_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_5_d0 = p_Result_36_5_reg_1175;

assign weight_buf_1x1_V_6_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_6_d0 = p_Result_36_6_reg_1180;

assign weight_buf_1x1_V_7_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_7_d0 = p_Result_36_7_reg_1185;

assign weight_buf_1x1_V_8_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_8_d0 = p_Result_36_8_reg_1190;

assign weight_buf_1x1_V_9_address0 = zext_ln339_8_fu_1085_p1;

assign weight_buf_1x1_V_9_d0 = p_Result_36_9_reg_1195;

assign zext_ln339_8_fu_1085_p1 = add_ln339_reg_1145;

assign zext_ln339_fu_762_p1 = ci_0_reg_698;

assign zext_ln376_fu_718_p1 = src_V_offset;

assign zext_ln647_3_fu_732_p1 = add_ln647_reg_1120;

assign zext_ln647_fu_722_p1 = tmp_6_fu_710_p3;

always @ (posedge ap_clk) begin
    tmp_7_reg_1131[4:0] <= 5'b00000;
end

endmodule //load_weight_1x1_from
