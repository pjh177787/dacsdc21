// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_image_chunk_nor (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_buf_0_V_address0,
        img_buf_0_V_ce0,
        img_buf_0_V_we0,
        img_buf_0_V_d0,
        img_buf_1_V_address0,
        img_buf_1_V_ce0,
        img_buf_1_V_we0,
        img_buf_1_V_d0,
        img_buf_2_V_address0,
        img_buf_2_V_ce0,
        img_buf_2_V_we0,
        img_buf_2_V_d0,
        m_axi_image_in_raw_pad_burst_AWVALID,
        m_axi_image_in_raw_pad_burst_AWREADY,
        m_axi_image_in_raw_pad_burst_AWADDR,
        m_axi_image_in_raw_pad_burst_AWID,
        m_axi_image_in_raw_pad_burst_AWLEN,
        m_axi_image_in_raw_pad_burst_AWSIZE,
        m_axi_image_in_raw_pad_burst_AWBURST,
        m_axi_image_in_raw_pad_burst_AWLOCK,
        m_axi_image_in_raw_pad_burst_AWCACHE,
        m_axi_image_in_raw_pad_burst_AWPROT,
        m_axi_image_in_raw_pad_burst_AWQOS,
        m_axi_image_in_raw_pad_burst_AWREGION,
        m_axi_image_in_raw_pad_burst_AWUSER,
        m_axi_image_in_raw_pad_burst_WVALID,
        m_axi_image_in_raw_pad_burst_WREADY,
        m_axi_image_in_raw_pad_burst_WDATA,
        m_axi_image_in_raw_pad_burst_WSTRB,
        m_axi_image_in_raw_pad_burst_WLAST,
        m_axi_image_in_raw_pad_burst_WID,
        m_axi_image_in_raw_pad_burst_WUSER,
        m_axi_image_in_raw_pad_burst_ARVALID,
        m_axi_image_in_raw_pad_burst_ARREADY,
        m_axi_image_in_raw_pad_burst_ARADDR,
        m_axi_image_in_raw_pad_burst_ARID,
        m_axi_image_in_raw_pad_burst_ARLEN,
        m_axi_image_in_raw_pad_burst_ARSIZE,
        m_axi_image_in_raw_pad_burst_ARBURST,
        m_axi_image_in_raw_pad_burst_ARLOCK,
        m_axi_image_in_raw_pad_burst_ARCACHE,
        m_axi_image_in_raw_pad_burst_ARPROT,
        m_axi_image_in_raw_pad_burst_ARQOS,
        m_axi_image_in_raw_pad_burst_ARREGION,
        m_axi_image_in_raw_pad_burst_ARUSER,
        m_axi_image_in_raw_pad_burst_RVALID,
        m_axi_image_in_raw_pad_burst_RREADY,
        m_axi_image_in_raw_pad_burst_RDATA,
        m_axi_image_in_raw_pad_burst_RLAST,
        m_axi_image_in_raw_pad_burst_RID,
        m_axi_image_in_raw_pad_burst_RUSER,
        m_axi_image_in_raw_pad_burst_RRESP,
        m_axi_image_in_raw_pad_burst_BVALID,
        m_axi_image_in_raw_pad_burst_BREADY,
        m_axi_image_in_raw_pad_burst_BRESP,
        m_axi_image_in_raw_pad_burst_BID,
        m_axi_image_in_raw_pad_burst_BUSER,
        image_in_raw_pad_burst_offset,
        col,
        row,
        offset_h,
        offset_w
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_pp0_stage0 = 8'd4;
parameter    ap_ST_fsm_state15 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state42 = 8'd32;
parameter    ap_ST_fsm_pp2_stage0 = 8'd64;
parameter    ap_ST_fsm_state69 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] img_buf_0_V_address0;
output   img_buf_0_V_ce0;
output   img_buf_0_V_we0;
output  [8:0] img_buf_0_V_d0;
output  [11:0] img_buf_1_V_address0;
output   img_buf_1_V_ce0;
output   img_buf_1_V_we0;
output  [8:0] img_buf_1_V_d0;
output  [11:0] img_buf_2_V_address0;
output   img_buf_2_V_ce0;
output   img_buf_2_V_we0;
output  [8:0] img_buf_2_V_d0;
output   m_axi_image_in_raw_pad_burst_AWVALID;
input   m_axi_image_in_raw_pad_burst_AWREADY;
output  [31:0] m_axi_image_in_raw_pad_burst_AWADDR;
output  [0:0] m_axi_image_in_raw_pad_burst_AWID;
output  [31:0] m_axi_image_in_raw_pad_burst_AWLEN;
output  [2:0] m_axi_image_in_raw_pad_burst_AWSIZE;
output  [1:0] m_axi_image_in_raw_pad_burst_AWBURST;
output  [1:0] m_axi_image_in_raw_pad_burst_AWLOCK;
output  [3:0] m_axi_image_in_raw_pad_burst_AWCACHE;
output  [2:0] m_axi_image_in_raw_pad_burst_AWPROT;
output  [3:0] m_axi_image_in_raw_pad_burst_AWQOS;
output  [3:0] m_axi_image_in_raw_pad_burst_AWREGION;
output  [0:0] m_axi_image_in_raw_pad_burst_AWUSER;
output   m_axi_image_in_raw_pad_burst_WVALID;
input   m_axi_image_in_raw_pad_burst_WREADY;
output  [31:0] m_axi_image_in_raw_pad_burst_WDATA;
output  [3:0] m_axi_image_in_raw_pad_burst_WSTRB;
output   m_axi_image_in_raw_pad_burst_WLAST;
output  [0:0] m_axi_image_in_raw_pad_burst_WID;
output  [0:0] m_axi_image_in_raw_pad_burst_WUSER;
output   m_axi_image_in_raw_pad_burst_ARVALID;
input   m_axi_image_in_raw_pad_burst_ARREADY;
output  [31:0] m_axi_image_in_raw_pad_burst_ARADDR;
output  [0:0] m_axi_image_in_raw_pad_burst_ARID;
output  [31:0] m_axi_image_in_raw_pad_burst_ARLEN;
output  [2:0] m_axi_image_in_raw_pad_burst_ARSIZE;
output  [1:0] m_axi_image_in_raw_pad_burst_ARBURST;
output  [1:0] m_axi_image_in_raw_pad_burst_ARLOCK;
output  [3:0] m_axi_image_in_raw_pad_burst_ARCACHE;
output  [2:0] m_axi_image_in_raw_pad_burst_ARPROT;
output  [3:0] m_axi_image_in_raw_pad_burst_ARQOS;
output  [3:0] m_axi_image_in_raw_pad_burst_ARREGION;
output  [0:0] m_axi_image_in_raw_pad_burst_ARUSER;
input   m_axi_image_in_raw_pad_burst_RVALID;
output   m_axi_image_in_raw_pad_burst_RREADY;
input  [31:0] m_axi_image_in_raw_pad_burst_RDATA;
input   m_axi_image_in_raw_pad_burst_RLAST;
input  [0:0] m_axi_image_in_raw_pad_burst_RID;
input  [0:0] m_axi_image_in_raw_pad_burst_RUSER;
input  [1:0] m_axi_image_in_raw_pad_burst_RRESP;
input   m_axi_image_in_raw_pad_burst_BVALID;
output   m_axi_image_in_raw_pad_burst_BREADY;
input  [1:0] m_axi_image_in_raw_pad_burst_BRESP;
input  [0:0] m_axi_image_in_raw_pad_burst_BID;
input  [0:0] m_axi_image_in_raw_pad_burst_BUSER;
input  [29:0] image_in_raw_pad_burst_offset;
input  [3:0] col;
input  [3:0] row;
input  [1:0] offset_h;
input  [0:0] offset_w;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_buf_0_V_ce0;
reg img_buf_0_V_we0;
reg img_buf_1_V_ce0;
reg img_buf_1_V_we0;
reg img_buf_2_V_ce0;
reg img_buf_2_V_we0;
reg m_axi_image_in_raw_pad_burst_ARVALID;
reg[31:0] m_axi_image_in_raw_pad_burst_ARADDR;
reg[31:0] m_axi_image_in_raw_pad_burst_ARLEN;
reg m_axi_image_in_raw_pad_burst_RREADY;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] img_norm_ch_V_address0;
reg    img_norm_ch_V_ce0;
wire   [8:0] img_norm_ch_V_q0;
reg    image_in_raw_pad_burst_blk_n_AR;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln578_reg_957;
reg   [0:0] icmp_ln578_reg_957_pp0_iter1_reg;
reg    image_in_raw_pad_burst_blk_n_R;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] icmp_ln578_reg_957_pp0_iter8_reg;
reg    ap_enable_reg_pp1_iter16;
wire    ap_block_pp1_stage0;
reg   [0:0] empty_52_reg_1070;
reg    ap_enable_reg_pp1_iter23;
reg   [0:0] icmp_ln587_reg_1035;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter22_reg;
reg    ap_enable_reg_pp2_iter16;
wire    ap_block_pp2_stage0;
reg   [0:0] empty_56_reg_1141;
reg    ap_enable_reg_pp2_iter23;
reg   [0:0] icmp_ln596_reg_1106;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter22_reg;
reg   [11:0] indvar_flatten_reg_267;
reg   [14:0] image_in_raw_pad_bur_reg_278;
reg   [5:0] i_0_reg_289;
reg   [6:0] j_0_reg_301;
reg   [11:0] indvar_flatten7_reg_312;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state16_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
wire    ap_block_state18_pp1_stage0_iter2;
wire    ap_block_state19_pp1_stage0_iter3;
wire    ap_block_state20_pp1_stage0_iter4;
wire    ap_block_state21_pp1_stage0_iter5;
wire    ap_block_state22_pp1_stage0_iter6;
wire    ap_block_state23_pp1_stage0_iter7;
wire    ap_block_state24_pp1_stage0_iter8;
wire    ap_block_state25_pp1_stage0_iter9;
wire    ap_block_state26_pp1_stage0_iter10;
wire    ap_block_state27_pp1_stage0_iter11;
wire    ap_block_state28_pp1_stage0_iter12;
wire    ap_block_state29_pp1_stage0_iter13;
wire    ap_block_state30_pp1_stage0_iter14;
wire    ap_block_state31_pp1_stage0_iter15;
wire    ap_block_state32_pp1_stage0_iter16;
reg    ap_block_state32_io;
wire    ap_block_state33_pp1_stage0_iter17;
wire    ap_block_state34_pp1_stage0_iter18;
wire    ap_block_state35_pp1_stage0_iter19;
wire    ap_block_state36_pp1_stage0_iter20;
wire    ap_block_state37_pp1_stage0_iter21;
wire    ap_block_state38_pp1_stage0_iter22;
reg    ap_block_state39_pp1_stage0_iter23;
wire    ap_block_state40_pp1_stage0_iter24;
wire    ap_block_state41_pp1_stage0_iter25;
reg    ap_block_pp1_stage0_11001;
reg   [14:0] image_in_raw_pad_bur_3_reg_324;
reg   [5:0] i1_0_reg_336;
reg   [6:0] j2_0_reg_348;
reg   [11:0] indvar_flatten15_reg_360;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state43_pp2_stage0_iter0;
wire    ap_block_state44_pp2_stage0_iter1;
wire    ap_block_state45_pp2_stage0_iter2;
wire    ap_block_state46_pp2_stage0_iter3;
wire    ap_block_state47_pp2_stage0_iter4;
wire    ap_block_state48_pp2_stage0_iter5;
wire    ap_block_state49_pp2_stage0_iter6;
wire    ap_block_state50_pp2_stage0_iter7;
wire    ap_block_state51_pp2_stage0_iter8;
wire    ap_block_state52_pp2_stage0_iter9;
wire    ap_block_state53_pp2_stage0_iter10;
wire    ap_block_state54_pp2_stage0_iter11;
wire    ap_block_state55_pp2_stage0_iter12;
wire    ap_block_state56_pp2_stage0_iter13;
wire    ap_block_state57_pp2_stage0_iter14;
wire    ap_block_state58_pp2_stage0_iter15;
wire    ap_block_state59_pp2_stage0_iter16;
reg    ap_block_state59_io;
wire    ap_block_state60_pp2_stage0_iter17;
wire    ap_block_state61_pp2_stage0_iter18;
wire    ap_block_state62_pp2_stage0_iter19;
wire    ap_block_state63_pp2_stage0_iter20;
wire    ap_block_state64_pp2_stage0_iter21;
wire    ap_block_state65_pp2_stage0_iter22;
reg    ap_block_state66_pp2_stage0_iter23;
wire    ap_block_state67_pp2_stage0_iter24;
wire    ap_block_state68_pp2_stage0_iter25;
reg    ap_block_pp2_stage0_11001;
reg   [14:0] image_in_raw_pad_bur_7_reg_372;
reg   [5:0] i3_0_reg_384;
reg   [6:0] j4_0_reg_396;
wire   [8:0] add_ln577_fu_432_p2;
reg   [8:0] add_ln577_reg_914;
wire    ap_CS_fsm_state2;
wire   [19:0] mul_ln577_fu_880_p2;
reg   [19:0] mul_ln577_reg_925;
wire   [18:0] trunc_ln577_fu_441_p1;
reg   [18:0] trunc_ln577_reg_930;
wire   [17:0] trunc_ln577_1_fu_444_p1;
reg   [17:0] trunc_ln577_1_reg_935;
wire   [9:0] add_ln577_1_fu_467_p2;
reg   [9:0] add_ln577_1_reg_940;
wire   [17:0] zext_ln577_3_fu_473_p1;
reg   [17:0] zext_ln577_3_reg_945;
wire   [30:0] zext_ln578_fu_477_p1;
reg   [30:0] zext_ln578_reg_950;
wire   [0:0] icmp_ln578_fu_481_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
reg    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln578_reg_957_pp0_iter2_reg;
reg   [0:0] icmp_ln578_reg_957_pp0_iter3_reg;
reg   [0:0] icmp_ln578_reg_957_pp0_iter4_reg;
reg   [0:0] icmp_ln578_reg_957_pp0_iter5_reg;
reg   [0:0] icmp_ln578_reg_957_pp0_iter6_reg;
reg   [0:0] icmp_ln578_reg_957_pp0_iter7_reg;
reg   [0:0] icmp_ln578_reg_957_pp0_iter9_reg;
reg   [0:0] icmp_ln578_reg_957_pp0_iter10_reg;
wire   [11:0] add_ln578_fu_487_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln579_fu_499_p2;
reg   [0:0] icmp_ln579_reg_966;
reg   [0:0] icmp_ln579_reg_966_pp0_iter1_reg;
reg   [0:0] icmp_ln579_reg_966_pp0_iter2_reg;
reg   [0:0] icmp_ln579_reg_966_pp0_iter3_reg;
reg   [0:0] icmp_ln579_reg_966_pp0_iter4_reg;
reg   [0:0] icmp_ln579_reg_966_pp0_iter5_reg;
reg   [0:0] icmp_ln579_reg_966_pp0_iter6_reg;
reg   [0:0] icmp_ln579_reg_966_pp0_iter7_reg;
wire   [6:0] select_ln581_fu_505_p3;
reg   [6:0] select_ln581_reg_971;
reg   [6:0] select_ln581_reg_971_pp0_iter1_reg;
reg   [6:0] select_ln581_reg_971_pp0_iter2_reg;
reg   [6:0] select_ln581_reg_971_pp0_iter3_reg;
reg   [6:0] select_ln581_reg_971_pp0_iter4_reg;
reg   [6:0] select_ln581_reg_971_pp0_iter5_reg;
reg   [6:0] select_ln581_reg_971_pp0_iter6_reg;
reg   [6:0] select_ln581_reg_971_pp0_iter7_reg;
reg   [6:0] select_ln581_reg_971_pp0_iter8_reg;
wire   [14:0] select_ln578_fu_513_p3;
reg   [14:0] select_ln578_reg_977;
reg   [12:0] tmp_3_reg_982;
wire   [6:0] j_fu_531_p2;
wire   [30:0] add_ln581_3_fu_572_p2;
reg   [30:0] add_ln581_3_reg_992;
wire   [5:0] select_ln581_1_fu_593_p3;
reg   [5:0] select_ln581_1_reg_1003;
reg    ap_enable_reg_pp0_iter8;
wire   [12:0] grp_fu_888_p3;
reg   [12:0] add_ln203_reg_1009;
reg   [12:0] add_ln203_reg_1009_pp0_iter10_reg;
reg   [31:0] image_in_raw_pad_bur_5_reg_1014;
wire   [18:0] add_ln590_fu_614_p2;
reg   [18:0] add_ln590_reg_1024;
wire    ap_CS_fsm_state15;
wire   [14:0] zext_ln590_fu_637_p1;
reg   [14:0] zext_ln590_reg_1029;
wire   [0:0] icmp_ln587_fu_641_p2;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter1_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter2_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter3_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter4_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter5_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter6_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter7_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter8_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter9_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter10_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter11_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter12_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter13_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter14_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter15_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter16_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter17_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter18_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter19_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter20_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter21_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter23_reg;
reg   [0:0] icmp_ln587_reg_1035_pp1_iter24_reg;
wire   [11:0] add_ln587_fu_647_p2;
reg   [11:0] add_ln587_reg_1039;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln588_fu_665_p2;
reg   [0:0] icmp_ln588_reg_1044;
reg   [0:0] icmp_ln588_reg_1044_pp1_iter15_reg;
reg   [0:0] icmp_ln588_reg_1044_pp1_iter16_reg;
reg   [0:0] icmp_ln588_reg_1044_pp1_iter17_reg;
reg   [0:0] icmp_ln588_reg_1044_pp1_iter18_reg;
reg   [0:0] icmp_ln588_reg_1044_pp1_iter19_reg;
reg   [0:0] icmp_ln588_reg_1044_pp1_iter20_reg;
reg   [0:0] icmp_ln588_reg_1044_pp1_iter21_reg;
wire   [6:0] select_ln590_fu_671_p3;
reg   [6:0] select_ln590_reg_1049;
reg   [6:0] select_ln590_reg_1049_pp1_iter15_reg;
reg   [6:0] select_ln590_reg_1049_pp1_iter16_reg;
reg   [6:0] select_ln590_reg_1049_pp1_iter17_reg;
reg   [6:0] select_ln590_reg_1049_pp1_iter18_reg;
reg   [6:0] select_ln590_reg_1049_pp1_iter19_reg;
reg   [6:0] select_ln590_reg_1049_pp1_iter20_reg;
reg   [6:0] select_ln590_reg_1049_pp1_iter21_reg;
reg   [6:0] select_ln590_reg_1049_pp1_iter22_reg;
wire   [14:0] select_ln590_2_fu_679_p3;
reg   [14:0] select_ln590_2_reg_1054;
reg    ap_enable_reg_pp1_iter14;
wire   [6:0] j_1_fu_687_p2;
reg   [6:0] j_1_reg_1060;
wire   [30:0] add_ln590_3_fu_710_p2;
reg   [30:0] add_ln590_3_reg_1065;
wire   [0:0] empty_52_fu_715_p2;
wire   [5:0] select_ln590_1_fu_737_p3;
reg   [5:0] select_ln590_1_reg_1080;
reg    ap_enable_reg_pp1_iter22;
reg   [11:0] img_buf_1_V_addr_reg_1086;
reg   [11:0] img_buf_1_V_addr_reg_1086_pp1_iter24_reg;
reg   [31:0] image_in_raw_pad_bur_9_reg_1091;
(* use_dsp48 = "no" *) wire   [19:0] add_ln599_fu_758_p2;
reg   [19:0] add_ln599_reg_1101;
wire    ap_CS_fsm_state42;
wire   [0:0] icmp_ln596_fu_763_p2;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter1_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter2_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter3_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter4_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter5_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter6_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter7_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter8_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter9_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter10_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter11_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter12_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter13_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter14_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter15_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter16_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter17_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter18_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter19_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter20_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter21_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter23_reg;
reg   [0:0] icmp_ln596_reg_1106_pp2_iter24_reg;
wire   [11:0] add_ln596_fu_769_p2;
reg   [11:0] add_ln596_reg_1110;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln597_fu_787_p2;
reg   [0:0] icmp_ln597_reg_1115;
reg   [0:0] icmp_ln597_reg_1115_pp2_iter15_reg;
reg   [0:0] icmp_ln597_reg_1115_pp2_iter16_reg;
reg   [0:0] icmp_ln597_reg_1115_pp2_iter17_reg;
reg   [0:0] icmp_ln597_reg_1115_pp2_iter18_reg;
reg   [0:0] icmp_ln597_reg_1115_pp2_iter19_reg;
reg   [0:0] icmp_ln597_reg_1115_pp2_iter20_reg;
reg   [0:0] icmp_ln597_reg_1115_pp2_iter21_reg;
wire   [6:0] select_ln599_fu_793_p3;
reg   [6:0] select_ln599_reg_1120;
reg   [6:0] select_ln599_reg_1120_pp2_iter15_reg;
reg   [6:0] select_ln599_reg_1120_pp2_iter16_reg;
reg   [6:0] select_ln599_reg_1120_pp2_iter17_reg;
reg   [6:0] select_ln599_reg_1120_pp2_iter18_reg;
reg   [6:0] select_ln599_reg_1120_pp2_iter19_reg;
reg   [6:0] select_ln599_reg_1120_pp2_iter20_reg;
reg   [6:0] select_ln599_reg_1120_pp2_iter21_reg;
reg   [6:0] select_ln599_reg_1120_pp2_iter22_reg;
wire   [14:0] select_ln599_2_fu_801_p3;
reg   [14:0] select_ln599_2_reg_1125;
reg    ap_enable_reg_pp2_iter14;
wire   [6:0] j_2_fu_809_p2;
reg   [6:0] j_2_reg_1131;
wire   [30:0] add_ln599_3_fu_832_p2;
reg   [30:0] add_ln599_3_reg_1136;
wire   [0:0] empty_56_fu_837_p2;
wire   [5:0] select_ln599_1_fu_859_p3;
reg   [5:0] select_ln599_1_reg_1151;
reg    ap_enable_reg_pp2_iter22;
reg   [11:0] img_buf_2_V_addr_reg_1157;
reg   [11:0] img_buf_2_V_addr_reg_1157_pp2_iter24_reg;
reg   [31:0] image_in_raw_pad_bur_12_reg_1162;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state16;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter24;
reg    ap_enable_reg_pp1_iter25;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state43;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter17;
reg    ap_enable_reg_pp2_iter18;
reg    ap_enable_reg_pp2_iter19;
reg    ap_enable_reg_pp2_iter20;
reg    ap_enable_reg_pp2_iter21;
reg    ap_enable_reg_pp2_iter24;
reg    ap_enable_reg_pp2_iter25;
reg   [14:0] ap_phi_mux_image_in_raw_pad_bur_phi_fu_282_p4;
reg   [5:0] ap_phi_mux_i_0_phi_fu_293_p4;
reg   [11:0] ap_phi_mux_indvar_flatten7_phi_fu_316_p4;
reg   [14:0] ap_phi_mux_image_in_raw_pad_bur_3_phi_fu_328_p4;
reg   [5:0] ap_phi_mux_i1_0_phi_fu_340_p4;
reg   [6:0] ap_phi_mux_j2_0_phi_fu_352_p4;
reg   [11:0] ap_phi_mux_indvar_flatten15_phi_fu_364_p4;
reg   [14:0] ap_phi_mux_image_in_raw_pad_bur_7_phi_fu_376_p4;
reg   [5:0] ap_phi_mux_i3_0_phi_fu_388_p4;
reg   [6:0] ap_phi_mux_j4_0_phi_fu_400_p4;
wire  signed [63:0] sext_ln581_fu_606_p1;
wire  signed [63:0] sext_ln203_fu_610_p1;
wire  signed [63:0] sext_ln203_1_fu_750_p1;
wire  signed [63:0] sext_ln590_fu_754_p1;
wire  signed [63:0] sext_ln203_2_fu_872_p1;
wire  signed [63:0] sext_ln599_fu_876_p1;
wire   [63:0] zext_ln581_3_fu_577_p1;
wire   [63:0] zext_ln590_2_fu_721_p1;
wire   [63:0] zext_ln599_1_fu_843_p1;
wire   [6:0] shl_ln577_1_fu_408_p3;
wire   [8:0] zext_ln577_fu_416_p1;
wire   [8:0] tmp1_fu_420_p5;
wire   [7:0] shl_ln577_4_fu_455_p3;
wire   [9:0] shl_ln577_3_fu_447_p3;
wire   [9:0] zext_ln577_2_fu_463_p1;
wire   [14:0] add_ln583_fu_493_p2;
wire   [14:0] tmp2_fu_540_p4;
wire   [17:0] zext_ln581_fu_537_p1;
wire   [17:0] add_ln581_1_fu_552_p2;
wire   [17:0] zext_ln581_1_fu_548_p1;
wire   [17:0] add_ln581_2_fu_557_p2;
wire   [17:0] add_ln581_fu_562_p2;
wire   [30:0] zext_ln581_2_fu_568_p1;
wire   [5:0] i_fu_587_p2;
wire   [7:0] tmp_1_fu_619_p4;
wire   [9:0] tmp_2_fu_628_p4;
wire   [7:0] grp_fu_653_p1;
wire   [14:0] add_ln592_fu_659_p2;
wire   [14:0] add_ln590_1_fu_693_p2;
wire   [18:0] zext_ln590_1_fu_697_p1;
wire   [18:0] add_ln590_2_fu_701_p2;
wire   [30:0] zext_ln588_fu_706_p1;
wire   [11:0] grp_fu_653_p2;
wire   [5:0] i_2_fu_731_p2;
wire   [12:0] grp_fu_896_p3;
wire   [7:0] grp_fu_775_p1;
wire   [14:0] add_ln601_fu_781_p2;
wire   [14:0] add_ln599_1_fu_815_p2;
wire   [19:0] zext_ln599_fu_819_p1;
wire   [19:0] add_ln599_2_fu_823_p2;
wire   [30:0] zext_ln597_fu_828_p1;
wire   [11:0] grp_fu_775_p2;
wire   [5:0] i_4_fu_853_p2;
wire   [12:0] grp_fu_905_p3;
wire   [10:0] mul_ln577_fu_880_p0;
wire   [8:0] mul_ln577_fu_880_p1;
wire   [5:0] grp_fu_888_p0;
wire   [7:0] grp_fu_888_p1;
wire   [6:0] grp_fu_888_p2;
wire   [5:0] grp_fu_896_p0;
wire   [7:0] grp_fu_896_p1;
wire   [6:0] grp_fu_896_p2;
wire   [5:0] grp_fu_905_p0;
wire   [7:0] grp_fu_905_p1;
wire   [6:0] grp_fu_905_p2;
reg    grp_fu_653_ce;
reg    grp_fu_775_ce;
wire    ap_CS_fsm_state69;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [12:0] grp_fu_888_p00;
wire   [12:0] grp_fu_888_p20;
wire   [12:0] grp_fu_896_p00;
wire   [12:0] grp_fu_896_p20;
wire   [12:0] grp_fu_905_p00;
wire   [12:0] grp_fu_905_p20;
wire   [19:0] mul_ln577_fu_880_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter23 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp2_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter24 = 1'b0;
#0 ap_enable_reg_pp1_iter25 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter17 = 1'b0;
#0 ap_enable_reg_pp2_iter18 = 1'b0;
#0 ap_enable_reg_pp2_iter19 = 1'b0;
#0 ap_enable_reg_pp2_iter20 = 1'b0;
#0 ap_enable_reg_pp2_iter21 = 1'b0;
#0 ap_enable_reg_pp2_iter24 = 1'b0;
#0 ap_enable_reg_pp2_iter25 = 1'b0;
end

load_image_chunk_bkb #(
    .DataWidth( 9 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
img_norm_ch_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(img_norm_ch_V_address0),
    .ce0(img_norm_ch_V_ce0),
    .q0(img_norm_ch_V_q0)
);

SkyNet_urem_12ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 12 ))
SkyNet_urem_12ns_cud_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_indvar_flatten7_phi_fu_316_p4),
    .din1(grp_fu_653_p1),
    .ce(grp_fu_653_ce),
    .dout(grp_fu_653_p2)
);

SkyNet_urem_12ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 12 ))
SkyNet_urem_12ns_cud_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_indvar_flatten15_phi_fu_364_p4),
    .din1(grp_fu_775_p1),
    .ce(grp_fu_775_ce),
    .dout(grp_fu_775_p2)
);

SkyNet_mul_mul_11dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 20 ))
SkyNet_mul_mul_11dEe_U109(
    .din0(mul_ln577_fu_880_p0),
    .din1(mul_ln577_fu_880_p1),
    .dout(mul_ln577_fu_880_p2)
);

SkyNet_mac_muladdeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 13 ))
SkyNet_mac_muladdeOg_U110(
    .din0(grp_fu_888_p0),
    .din1(grp_fu_888_p1),
    .din2(grp_fu_888_p2),
    .dout(grp_fu_888_p3)
);

SkyNet_mac_muladdeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 13 ))
SkyNet_mac_muladdeOg_U111(
    .din0(grp_fu_896_p0),
    .din1(grp_fu_896_p1),
    .din2(grp_fu_896_p2),
    .dout(grp_fu_896_p3)
);

SkyNet_mac_muladdeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 13 ))
SkyNet_mac_muladdeOg_U112(
    .din0(grp_fu_905_p0),
    .din1(grp_fu_905_p1),
    .din2(grp_fu_905_p2),
    .dout(grp_fu_905_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state16)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp1_iter25 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state43) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state43)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state43);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            ap_enable_reg_pp2_iter25 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter23 == 1'b1) & (icmp_ln587_reg_1035_pp1_iter22_reg == 1'd0))) begin
        i1_0_reg_336 <= select_ln590_1_reg_1080;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i1_0_reg_336 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter23 == 1'b1) & (icmp_ln596_reg_1106_pp2_iter22_reg == 1'd0))) begin
        i3_0_reg_384 <= select_ln599_1_reg_1151;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        i3_0_reg_384 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln578_reg_957_pp0_iter8_reg == 1'd0))) begin
        i_0_reg_289 <= select_ln581_1_reg_1003;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_reg_289 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter15 == 1'b1) & (icmp_ln587_reg_1035_pp1_iter14_reg == 1'd0))) begin
        image_in_raw_pad_bur_3_reg_324 <= select_ln590_2_reg_1054;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        image_in_raw_pad_bur_3_reg_324 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter15 == 1'b1) & (icmp_ln596_reg_1106_pp2_iter14_reg == 1'd0))) begin
        image_in_raw_pad_bur_7_reg_372 <= select_ln599_2_reg_1125;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        image_in_raw_pad_bur_7_reg_372 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln578_reg_957 == 1'd0))) begin
        image_in_raw_pad_bur_reg_278 <= select_ln578_reg_977;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        image_in_raw_pad_bur_reg_278 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln596_reg_1106 == 1'd0))) begin
        indvar_flatten15_reg_360 <= add_ln596_reg_1110;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        indvar_flatten15_reg_360 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln587_reg_1035 == 1'd0))) begin
        indvar_flatten7_reg_312 <= add_ln587_reg_1039;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten7_reg_312 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln578_fu_481_p2 == 1'd0))) begin
        indvar_flatten_reg_267 <= add_ln578_fu_487_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_267 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter15 == 1'b1) & (icmp_ln587_reg_1035_pp1_iter14_reg == 1'd0))) begin
        j2_0_reg_348 <= j_1_reg_1060;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j2_0_reg_348 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter15 == 1'b1) & (icmp_ln596_reg_1106_pp2_iter14_reg == 1'd0))) begin
        j4_0_reg_396 <= j_2_reg_1131;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        j4_0_reg_396 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln578_fu_481_p2 == 1'd0))) begin
        j_0_reg_301 <= j_fu_531_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_0_reg_301 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln578_reg_957_pp0_iter8_reg == 1'd0))) begin
        add_ln203_reg_1009 <= grp_fu_888_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln203_reg_1009_pp0_iter10_reg <= add_ln203_reg_1009;
        icmp_ln578_reg_957_pp0_iter10_reg <= icmp_ln578_reg_957_pp0_iter9_reg;
        icmp_ln578_reg_957_pp0_iter2_reg <= icmp_ln578_reg_957_pp0_iter1_reg;
        icmp_ln578_reg_957_pp0_iter3_reg <= icmp_ln578_reg_957_pp0_iter2_reg;
        icmp_ln578_reg_957_pp0_iter4_reg <= icmp_ln578_reg_957_pp0_iter3_reg;
        icmp_ln578_reg_957_pp0_iter5_reg <= icmp_ln578_reg_957_pp0_iter4_reg;
        icmp_ln578_reg_957_pp0_iter6_reg <= icmp_ln578_reg_957_pp0_iter5_reg;
        icmp_ln578_reg_957_pp0_iter7_reg <= icmp_ln578_reg_957_pp0_iter6_reg;
        icmp_ln578_reg_957_pp0_iter8_reg <= icmp_ln578_reg_957_pp0_iter7_reg;
        icmp_ln578_reg_957_pp0_iter9_reg <= icmp_ln578_reg_957_pp0_iter8_reg;
        icmp_ln579_reg_966_pp0_iter2_reg <= icmp_ln579_reg_966_pp0_iter1_reg;
        icmp_ln579_reg_966_pp0_iter3_reg <= icmp_ln579_reg_966_pp0_iter2_reg;
        icmp_ln579_reg_966_pp0_iter4_reg <= icmp_ln579_reg_966_pp0_iter3_reg;
        icmp_ln579_reg_966_pp0_iter5_reg <= icmp_ln579_reg_966_pp0_iter4_reg;
        icmp_ln579_reg_966_pp0_iter6_reg <= icmp_ln579_reg_966_pp0_iter5_reg;
        icmp_ln579_reg_966_pp0_iter7_reg <= icmp_ln579_reg_966_pp0_iter6_reg;
        select_ln581_reg_971_pp0_iter2_reg <= select_ln581_reg_971_pp0_iter1_reg;
        select_ln581_reg_971_pp0_iter3_reg <= select_ln581_reg_971_pp0_iter2_reg;
        select_ln581_reg_971_pp0_iter4_reg <= select_ln581_reg_971_pp0_iter3_reg;
        select_ln581_reg_971_pp0_iter5_reg <= select_ln581_reg_971_pp0_iter4_reg;
        select_ln581_reg_971_pp0_iter6_reg <= select_ln581_reg_971_pp0_iter5_reg;
        select_ln581_reg_971_pp0_iter7_reg <= select_ln581_reg_971_pp0_iter6_reg;
        select_ln581_reg_971_pp0_iter8_reg <= select_ln581_reg_971_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln577_1_reg_940[9 : 4] <= add_ln577_1_fu_467_p2[9 : 4];
        mul_ln577_reg_925 <= mul_ln577_fu_880_p2;
        trunc_ln577_1_reg_935 <= trunc_ln577_1_fu_444_p1;
        trunc_ln577_reg_930 <= trunc_ln577_fu_441_p1;
        zext_ln577_3_reg_945[9 : 4] <= zext_ln577_3_fu_473_p1[9 : 4];
        zext_ln578_reg_950[29 : 0] <= zext_ln578_fu_477_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln577_reg_914[8 : 1] <= add_ln577_fu_432_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln578_reg_957 == 1'd0))) begin
        add_ln581_3_reg_992 <= add_ln581_3_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln587_reg_1039 <= add_ln587_fu_647_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln587_reg_1035_pp1_iter14_reg == 1'd0))) begin
        add_ln590_3_reg_1065 <= add_ln590_3_fu_710_p2;
        empty_52_reg_1070 <= empty_52_fu_715_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln590_reg_1024 <= add_ln590_fu_614_p2;
        zext_ln590_reg_1029[1] <= zext_ln590_fu_637_p1[1];
zext_ln590_reg_1029[9 : 4] <= zext_ln590_fu_637_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln596_reg_1110 <= add_ln596_fu_769_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln596_reg_1106_pp2_iter14_reg == 1'd0))) begin
        add_ln599_3_reg_1136 <= add_ln599_3_fu_832_p2;
        empty_56_reg_1141 <= empty_56_fu_837_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        add_ln599_reg_1101 <= add_ln599_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln578_reg_957 <= icmp_ln578_fu_481_p2;
        icmp_ln578_reg_957_pp0_iter1_reg <= icmp_ln578_reg_957;
        icmp_ln579_reg_966_pp0_iter1_reg <= icmp_ln579_reg_966;
        select_ln581_reg_971_pp0_iter1_reg <= select_ln581_reg_971;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln578_fu_481_p2 == 1'd0))) begin
        icmp_ln579_reg_966 <= icmp_ln579_fu_499_p2;
        select_ln581_reg_971 <= select_ln581_fu_505_p3;
        tmp_3_reg_982 <= {{select_ln578_fu_513_p3[14:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln587_reg_1035 <= icmp_ln587_fu_641_p2;
        icmp_ln587_reg_1035_pp1_iter1_reg <= icmp_ln587_reg_1035;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln587_reg_1035_pp1_iter10_reg <= icmp_ln587_reg_1035_pp1_iter9_reg;
        icmp_ln587_reg_1035_pp1_iter11_reg <= icmp_ln587_reg_1035_pp1_iter10_reg;
        icmp_ln587_reg_1035_pp1_iter12_reg <= icmp_ln587_reg_1035_pp1_iter11_reg;
        icmp_ln587_reg_1035_pp1_iter13_reg <= icmp_ln587_reg_1035_pp1_iter12_reg;
        icmp_ln587_reg_1035_pp1_iter14_reg <= icmp_ln587_reg_1035_pp1_iter13_reg;
        icmp_ln587_reg_1035_pp1_iter15_reg <= icmp_ln587_reg_1035_pp1_iter14_reg;
        icmp_ln587_reg_1035_pp1_iter16_reg <= icmp_ln587_reg_1035_pp1_iter15_reg;
        icmp_ln587_reg_1035_pp1_iter17_reg <= icmp_ln587_reg_1035_pp1_iter16_reg;
        icmp_ln587_reg_1035_pp1_iter18_reg <= icmp_ln587_reg_1035_pp1_iter17_reg;
        icmp_ln587_reg_1035_pp1_iter19_reg <= icmp_ln587_reg_1035_pp1_iter18_reg;
        icmp_ln587_reg_1035_pp1_iter20_reg <= icmp_ln587_reg_1035_pp1_iter19_reg;
        icmp_ln587_reg_1035_pp1_iter21_reg <= icmp_ln587_reg_1035_pp1_iter20_reg;
        icmp_ln587_reg_1035_pp1_iter22_reg <= icmp_ln587_reg_1035_pp1_iter21_reg;
        icmp_ln587_reg_1035_pp1_iter23_reg <= icmp_ln587_reg_1035_pp1_iter22_reg;
        icmp_ln587_reg_1035_pp1_iter24_reg <= icmp_ln587_reg_1035_pp1_iter23_reg;
        icmp_ln587_reg_1035_pp1_iter2_reg <= icmp_ln587_reg_1035_pp1_iter1_reg;
        icmp_ln587_reg_1035_pp1_iter3_reg <= icmp_ln587_reg_1035_pp1_iter2_reg;
        icmp_ln587_reg_1035_pp1_iter4_reg <= icmp_ln587_reg_1035_pp1_iter3_reg;
        icmp_ln587_reg_1035_pp1_iter5_reg <= icmp_ln587_reg_1035_pp1_iter4_reg;
        icmp_ln587_reg_1035_pp1_iter6_reg <= icmp_ln587_reg_1035_pp1_iter5_reg;
        icmp_ln587_reg_1035_pp1_iter7_reg <= icmp_ln587_reg_1035_pp1_iter6_reg;
        icmp_ln587_reg_1035_pp1_iter8_reg <= icmp_ln587_reg_1035_pp1_iter7_reg;
        icmp_ln587_reg_1035_pp1_iter9_reg <= icmp_ln587_reg_1035_pp1_iter8_reg;
        icmp_ln588_reg_1044_pp1_iter15_reg <= icmp_ln588_reg_1044;
        icmp_ln588_reg_1044_pp1_iter16_reg <= icmp_ln588_reg_1044_pp1_iter15_reg;
        icmp_ln588_reg_1044_pp1_iter17_reg <= icmp_ln588_reg_1044_pp1_iter16_reg;
        icmp_ln588_reg_1044_pp1_iter18_reg <= icmp_ln588_reg_1044_pp1_iter17_reg;
        icmp_ln588_reg_1044_pp1_iter19_reg <= icmp_ln588_reg_1044_pp1_iter18_reg;
        icmp_ln588_reg_1044_pp1_iter20_reg <= icmp_ln588_reg_1044_pp1_iter19_reg;
        icmp_ln588_reg_1044_pp1_iter21_reg <= icmp_ln588_reg_1044_pp1_iter20_reg;
        img_buf_1_V_addr_reg_1086_pp1_iter24_reg <= img_buf_1_V_addr_reg_1086;
        select_ln590_reg_1049_pp1_iter15_reg <= select_ln590_reg_1049;
        select_ln590_reg_1049_pp1_iter16_reg <= select_ln590_reg_1049_pp1_iter15_reg;
        select_ln590_reg_1049_pp1_iter17_reg <= select_ln590_reg_1049_pp1_iter16_reg;
        select_ln590_reg_1049_pp1_iter18_reg <= select_ln590_reg_1049_pp1_iter17_reg;
        select_ln590_reg_1049_pp1_iter19_reg <= select_ln590_reg_1049_pp1_iter18_reg;
        select_ln590_reg_1049_pp1_iter20_reg <= select_ln590_reg_1049_pp1_iter19_reg;
        select_ln590_reg_1049_pp1_iter21_reg <= select_ln590_reg_1049_pp1_iter20_reg;
        select_ln590_reg_1049_pp1_iter22_reg <= select_ln590_reg_1049_pp1_iter21_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln587_reg_1035_pp1_iter13_reg == 1'd0))) begin
        icmp_ln588_reg_1044 <= icmp_ln588_fu_665_p2;
        select_ln590_reg_1049 <= select_ln590_fu_671_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln596_reg_1106 <= icmp_ln596_fu_763_p2;
        icmp_ln596_reg_1106_pp2_iter1_reg <= icmp_ln596_reg_1106;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln596_reg_1106_pp2_iter10_reg <= icmp_ln596_reg_1106_pp2_iter9_reg;
        icmp_ln596_reg_1106_pp2_iter11_reg <= icmp_ln596_reg_1106_pp2_iter10_reg;
        icmp_ln596_reg_1106_pp2_iter12_reg <= icmp_ln596_reg_1106_pp2_iter11_reg;
        icmp_ln596_reg_1106_pp2_iter13_reg <= icmp_ln596_reg_1106_pp2_iter12_reg;
        icmp_ln596_reg_1106_pp2_iter14_reg <= icmp_ln596_reg_1106_pp2_iter13_reg;
        icmp_ln596_reg_1106_pp2_iter15_reg <= icmp_ln596_reg_1106_pp2_iter14_reg;
        icmp_ln596_reg_1106_pp2_iter16_reg <= icmp_ln596_reg_1106_pp2_iter15_reg;
        icmp_ln596_reg_1106_pp2_iter17_reg <= icmp_ln596_reg_1106_pp2_iter16_reg;
        icmp_ln596_reg_1106_pp2_iter18_reg <= icmp_ln596_reg_1106_pp2_iter17_reg;
        icmp_ln596_reg_1106_pp2_iter19_reg <= icmp_ln596_reg_1106_pp2_iter18_reg;
        icmp_ln596_reg_1106_pp2_iter20_reg <= icmp_ln596_reg_1106_pp2_iter19_reg;
        icmp_ln596_reg_1106_pp2_iter21_reg <= icmp_ln596_reg_1106_pp2_iter20_reg;
        icmp_ln596_reg_1106_pp2_iter22_reg <= icmp_ln596_reg_1106_pp2_iter21_reg;
        icmp_ln596_reg_1106_pp2_iter23_reg <= icmp_ln596_reg_1106_pp2_iter22_reg;
        icmp_ln596_reg_1106_pp2_iter24_reg <= icmp_ln596_reg_1106_pp2_iter23_reg;
        icmp_ln596_reg_1106_pp2_iter2_reg <= icmp_ln596_reg_1106_pp2_iter1_reg;
        icmp_ln596_reg_1106_pp2_iter3_reg <= icmp_ln596_reg_1106_pp2_iter2_reg;
        icmp_ln596_reg_1106_pp2_iter4_reg <= icmp_ln596_reg_1106_pp2_iter3_reg;
        icmp_ln596_reg_1106_pp2_iter5_reg <= icmp_ln596_reg_1106_pp2_iter4_reg;
        icmp_ln596_reg_1106_pp2_iter6_reg <= icmp_ln596_reg_1106_pp2_iter5_reg;
        icmp_ln596_reg_1106_pp2_iter7_reg <= icmp_ln596_reg_1106_pp2_iter6_reg;
        icmp_ln596_reg_1106_pp2_iter8_reg <= icmp_ln596_reg_1106_pp2_iter7_reg;
        icmp_ln596_reg_1106_pp2_iter9_reg <= icmp_ln596_reg_1106_pp2_iter8_reg;
        icmp_ln597_reg_1115_pp2_iter15_reg <= icmp_ln597_reg_1115;
        icmp_ln597_reg_1115_pp2_iter16_reg <= icmp_ln597_reg_1115_pp2_iter15_reg;
        icmp_ln597_reg_1115_pp2_iter17_reg <= icmp_ln597_reg_1115_pp2_iter16_reg;
        icmp_ln597_reg_1115_pp2_iter18_reg <= icmp_ln597_reg_1115_pp2_iter17_reg;
        icmp_ln597_reg_1115_pp2_iter19_reg <= icmp_ln597_reg_1115_pp2_iter18_reg;
        icmp_ln597_reg_1115_pp2_iter20_reg <= icmp_ln597_reg_1115_pp2_iter19_reg;
        icmp_ln597_reg_1115_pp2_iter21_reg <= icmp_ln597_reg_1115_pp2_iter20_reg;
        img_buf_2_V_addr_reg_1157_pp2_iter24_reg <= img_buf_2_V_addr_reg_1157;
        select_ln599_reg_1120_pp2_iter15_reg <= select_ln599_reg_1120;
        select_ln599_reg_1120_pp2_iter16_reg <= select_ln599_reg_1120_pp2_iter15_reg;
        select_ln599_reg_1120_pp2_iter17_reg <= select_ln599_reg_1120_pp2_iter16_reg;
        select_ln599_reg_1120_pp2_iter18_reg <= select_ln599_reg_1120_pp2_iter17_reg;
        select_ln599_reg_1120_pp2_iter19_reg <= select_ln599_reg_1120_pp2_iter18_reg;
        select_ln599_reg_1120_pp2_iter20_reg <= select_ln599_reg_1120_pp2_iter19_reg;
        select_ln599_reg_1120_pp2_iter21_reg <= select_ln599_reg_1120_pp2_iter20_reg;
        select_ln599_reg_1120_pp2_iter22_reg <= select_ln599_reg_1120_pp2_iter21_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln596_reg_1106_pp2_iter13_reg == 1'd0))) begin
        icmp_ln597_reg_1115 <= icmp_ln597_fu_787_p2;
        select_ln599_reg_1120 <= select_ln599_fu_793_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln596_reg_1106_pp2_iter22_reg == 1'd0))) begin
        image_in_raw_pad_bur_12_reg_1162 <= m_axi_image_in_raw_pad_burst_RDATA;
        img_buf_2_V_addr_reg_1157 <= sext_ln203_2_fu_872_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln578_reg_957_pp0_iter8_reg == 1'd0))) begin
        image_in_raw_pad_bur_5_reg_1014 <= m_axi_image_in_raw_pad_burst_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln587_reg_1035_pp1_iter22_reg == 1'd0))) begin
        image_in_raw_pad_bur_9_reg_1091 <= m_axi_image_in_raw_pad_burst_RDATA;
        img_buf_1_V_addr_reg_1086 <= sext_ln203_1_fu_750_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter14 == 1'b1) & (icmp_ln587_reg_1035_pp1_iter13_reg == 1'd0))) begin
        j_1_reg_1060 <= j_1_fu_687_p2;
        select_ln590_2_reg_1054 <= select_ln590_2_fu_679_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter14 == 1'b1) & (icmp_ln596_reg_1106_pp2_iter13_reg == 1'd0))) begin
        j_2_reg_1131 <= j_2_fu_809_p2;
        select_ln599_2_reg_1125 <= select_ln599_2_fu_801_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln578_fu_481_p2 == 1'd0))) begin
        select_ln578_reg_977 <= select_ln578_fu_513_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln578_reg_957_pp0_iter7_reg == 1'd0))) begin
        select_ln581_1_reg_1003 <= select_ln581_1_fu_593_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter22 == 1'b1) & (icmp_ln587_reg_1035_pp1_iter21_reg == 1'd0))) begin
        select_ln590_1_reg_1080 <= select_ln590_1_fu_737_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter22 == 1'b1) & (icmp_ln596_reg_1106_pp2_iter21_reg == 1'd0))) begin
        select_ln599_1_reg_1151 <= select_ln599_1_fu_859_p3;
    end
end

always @ (*) begin
    if ((icmp_ln578_fu_481_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln587_fu_641_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln596_fu_763_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state43 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state43 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter25 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter21 == 1'b0) & (ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter22 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter25 == 1'b0) & (ap_enable_reg_pp2_iter24 == 1'b0) & (ap_enable_reg_pp2_iter21 == 1'b0) & (ap_enable_reg_pp2_iter20 == 1'b0) & (ap_enable_reg_pp2_iter19 == 1'b0) & (ap_enable_reg_pp2_iter18 == 1'b0) & (ap_enable_reg_pp2_iter17 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter22 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter23 == 1'b0) & (ap_enable_reg_pp2_iter16 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter23 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln587_reg_1035_pp1_iter22_reg == 1'd0))) begin
        ap_phi_mux_i1_0_phi_fu_340_p4 = select_ln590_1_reg_1080;
    end else begin
        ap_phi_mux_i1_0_phi_fu_340_p4 = i1_0_reg_336;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter23 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln596_reg_1106_pp2_iter22_reg == 1'd0))) begin
        ap_phi_mux_i3_0_phi_fu_388_p4 = select_ln599_1_reg_1151;
    end else begin
        ap_phi_mux_i3_0_phi_fu_388_p4 = i3_0_reg_384;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln578_reg_957_pp0_iter8_reg == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_293_p4 = select_ln581_1_reg_1003;
    end else begin
        ap_phi_mux_i_0_phi_fu_293_p4 = i_0_reg_289;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln587_reg_1035_pp1_iter14_reg == 1'd0))) begin
        ap_phi_mux_image_in_raw_pad_bur_3_phi_fu_328_p4 = select_ln590_2_reg_1054;
    end else begin
        ap_phi_mux_image_in_raw_pad_bur_3_phi_fu_328_p4 = image_in_raw_pad_bur_3_reg_324;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter15 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln596_reg_1106_pp2_iter14_reg == 1'd0))) begin
        ap_phi_mux_image_in_raw_pad_bur_7_phi_fu_376_p4 = select_ln599_2_reg_1125;
    end else begin
        ap_phi_mux_image_in_raw_pad_bur_7_phi_fu_376_p4 = image_in_raw_pad_bur_7_reg_372;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln578_reg_957 == 1'd0))) begin
        ap_phi_mux_image_in_raw_pad_bur_phi_fu_282_p4 = select_ln578_reg_977;
    end else begin
        ap_phi_mux_image_in_raw_pad_bur_phi_fu_282_p4 = image_in_raw_pad_bur_reg_278;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln596_reg_1106 == 1'd0))) begin
        ap_phi_mux_indvar_flatten15_phi_fu_364_p4 = add_ln596_reg_1110;
    end else begin
        ap_phi_mux_indvar_flatten15_phi_fu_364_p4 = indvar_flatten15_reg_360;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln587_reg_1035 == 1'd0))) begin
        ap_phi_mux_indvar_flatten7_phi_fu_316_p4 = add_ln587_reg_1039;
    end else begin
        ap_phi_mux_indvar_flatten7_phi_fu_316_p4 = indvar_flatten7_reg_312;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln587_reg_1035_pp1_iter14_reg == 1'd0))) begin
        ap_phi_mux_j2_0_phi_fu_352_p4 = j_1_reg_1060;
    end else begin
        ap_phi_mux_j2_0_phi_fu_352_p4 = j2_0_reg_348;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter15 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln596_reg_1106_pp2_iter14_reg == 1'd0))) begin
        ap_phi_mux_j4_0_phi_fu_400_p4 = j_2_reg_1131;
    end else begin
        ap_phi_mux_j4_0_phi_fu_400_p4 = j4_0_reg_396;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_653_ce = 1'b1;
    end else begin
        grp_fu_653_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_775_ce = 1'b1;
    end else begin
        grp_fu_775_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter16 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (empty_56_reg_1141 == 1'd1)) | ((ap_enable_reg_pp1_iter16 == 1'b1) & (empty_52_reg_1070 == 1'd1) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln578_reg_957_pp0_iter1_reg == 1'd0)))) begin
        image_in_raw_pad_burst_blk_n_AR = m_axi_image_in_raw_pad_burst_ARREADY;
    end else begin
        image_in_raw_pad_burst_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter23 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln596_reg_1106_pp2_iter22_reg == 1'd0)) | ((ap_enable_reg_pp1_iter23 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln587_reg_1035_pp1_iter22_reg == 1'd0)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln578_reg_957_pp0_iter8_reg == 1'd0)))) begin
        image_in_raw_pad_burst_blk_n_R = m_axi_image_in_raw_pad_burst_RVALID;
    end else begin
        image_in_raw_pad_burst_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        img_buf_0_V_ce0 = 1'b1;
    end else begin
        img_buf_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln578_reg_957_pp0_iter10_reg == 1'd0))) begin
        img_buf_0_V_we0 = 1'b1;
    end else begin
        img_buf_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter25 == 1'b1))) begin
        img_buf_1_V_ce0 = 1'b1;
    end else begin
        img_buf_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter25 == 1'b1) & (icmp_ln587_reg_1035_pp1_iter24_reg == 1'd0))) begin
        img_buf_1_V_we0 = 1'b1;
    end else begin
        img_buf_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter25 == 1'b1))) begin
        img_buf_2_V_ce0 = 1'b1;
    end else begin
        img_buf_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter25 == 1'b1) & (icmp_ln596_reg_1106_pp2_iter24_reg == 1'd0))) begin
        img_buf_2_V_we0 = 1'b1;
    end else begin
        img_buf_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter24 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        img_norm_ch_V_address0 = sext_ln599_fu_876_p1;
    end else if (((ap_enable_reg_pp1_iter24 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        img_norm_ch_V_address0 = sext_ln590_fu_754_p1;
    end else if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        img_norm_ch_V_address0 = sext_ln581_fu_606_p1;
    end else begin
        img_norm_ch_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter24 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter24 == 1'b1)))) begin
        img_norm_ch_V_ce0 = 1'b1;
    end else begin
        img_norm_ch_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter16 == 1'b1) & (empty_56_reg_1141 == 1'd1))) begin
        m_axi_image_in_raw_pad_burst_ARADDR = zext_ln599_1_fu_843_p1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter16 == 1'b1) & (empty_52_reg_1070 == 1'd1))) begin
        m_axi_image_in_raw_pad_burst_ARADDR = zext_ln590_2_fu_721_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln578_reg_957_pp0_iter1_reg == 1'd0))) begin
        m_axi_image_in_raw_pad_burst_ARADDR = zext_ln581_3_fu_577_p1;
    end else begin
        m_axi_image_in_raw_pad_burst_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter16 == 1'b1) & (empty_56_reg_1141 == 1'd1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter16 == 1'b1) & (empty_52_reg_1070 == 1'd1)))) begin
        m_axi_image_in_raw_pad_burst_ARLEN = 32'd84;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln578_reg_957_pp0_iter1_reg == 1'd0))) begin
        m_axi_image_in_raw_pad_burst_ARLEN = 32'd1;
    end else begin
        m_axi_image_in_raw_pad_burst_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter16 == 1'b1) & (empty_56_reg_1141 == 1'd1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter16 == 1'b1) & (empty_52_reg_1070 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln578_reg_957_pp0_iter1_reg == 1'd0)))) begin
        m_axi_image_in_raw_pad_burst_ARVALID = 1'b1;
    end else begin
        m_axi_image_in_raw_pad_burst_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter23 == 1'b1) & (icmp_ln596_reg_1106_pp2_iter22_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter23 == 1'b1) & (icmp_ln587_reg_1035_pp1_iter22_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln578_reg_957_pp0_iter8_reg == 1'd0)))) begin
        m_axi_image_in_raw_pad_burst_RREADY = 1'b1;
    end else begin
        m_axi_image_in_raw_pad_burst_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln578_fu_481_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln578_fu_481_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln587_fu_641_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter24 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter25 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter24 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter25 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln587_fu_641_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln596_fu_763_p2 == 1'd1)) & ~((ap_enable_reg_pp2_iter24 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter25 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter24 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter25 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln596_fu_763_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln577_1_fu_467_p2 = (shl_ln577_3_fu_447_p3 + zext_ln577_2_fu_463_p1);

assign add_ln577_fu_432_p2 = (zext_ln577_fu_416_p1 + tmp1_fu_420_p5);

assign add_ln578_fu_487_p2 = (indvar_flatten_reg_267 + 12'd1);

assign add_ln581_1_fu_552_p2 = (zext_ln581_fu_537_p1 + trunc_ln577_1_reg_935);

assign add_ln581_2_fu_557_p2 = (zext_ln577_3_reg_945 + add_ln581_1_fu_552_p2);

assign add_ln581_3_fu_572_p2 = (zext_ln581_2_fu_568_p1 + zext_ln578_reg_950);

assign add_ln581_fu_562_p2 = (zext_ln581_1_fu_548_p1 + add_ln581_2_fu_557_p2);

assign add_ln583_fu_493_p2 = (ap_phi_mux_image_in_raw_pad_bur_phi_fu_282_p4 + 15'd644);

assign add_ln587_fu_647_p2 = (ap_phi_mux_indvar_flatten7_phi_fu_316_p4 + 12'd1);

assign add_ln590_1_fu_693_p2 = (select_ln590_2_reg_1054 + zext_ln590_reg_1029);

assign add_ln590_2_fu_701_p2 = (zext_ln590_1_fu_697_p1 + add_ln590_reg_1024);

assign add_ln590_3_fu_710_p2 = (zext_ln578_reg_950 + zext_ln588_fu_706_p1);

assign add_ln590_fu_614_p2 = (trunc_ln577_reg_930 + 19'd208656);

assign add_ln592_fu_659_p2 = (ap_phi_mux_image_in_raw_pad_bur_3_phi_fu_328_p4 + 15'd644);

assign add_ln596_fu_769_p2 = (ap_phi_mux_indvar_flatten15_phi_fu_364_p4 + 12'd1);

assign add_ln599_1_fu_815_p2 = (select_ln599_2_reg_1125 + zext_ln590_reg_1029);

assign add_ln599_2_fu_823_p2 = (zext_ln599_fu_819_p1 + add_ln599_reg_1101);

assign add_ln599_3_fu_832_p2 = (zext_ln578_reg_950 + zext_ln597_fu_828_p1);

assign add_ln599_fu_758_p2 = (mul_ln577_reg_925 + 20'd417312);

assign add_ln601_fu_781_p2 = (ap_phi_mux_image_in_raw_pad_bur_7_phi_fu_376_p4 + 15'd644);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_image_in_raw_pad_burst_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln578_reg_957_pp0_iter8_reg == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_image_in_raw_pad_burst_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln578_reg_957_pp0_iter8_reg == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((m_axi_image_in_raw_pad_burst_RVALID == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b1) & (icmp_ln587_reg_1035_pp1_iter22_reg == 1'd0)) | ((ap_enable_reg_pp1_iter16 == 1'b1) & (1'b1 == ap_block_state32_io)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((m_axi_image_in_raw_pad_burst_RVALID == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b1) & (icmp_ln587_reg_1035_pp1_iter22_reg == 1'd0)) | ((ap_enable_reg_pp1_iter16 == 1'b1) & (1'b1 == ap_block_state32_io)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((m_axi_image_in_raw_pad_burst_RVALID == 1'b0) & (ap_enable_reg_pp2_iter23 == 1'b1) & (icmp_ln596_reg_1106_pp2_iter22_reg == 1'd0)) | ((ap_enable_reg_pp2_iter16 == 1'b1) & (1'b1 == ap_block_state59_io)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((m_axi_image_in_raw_pad_burst_RVALID == 1'b0) & (ap_enable_reg_pp2_iter23 == 1'b1) & (icmp_ln596_reg_1106_pp2_iter22_reg == 1'd0)) | ((ap_enable_reg_pp2_iter16 == 1'b1) & (1'b1 == ap_block_state59_io)));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter9 = ((m_axi_image_in_raw_pad_burst_RVALID == 1'b0) & (icmp_ln578_reg_957_pp0_iter8_reg == 1'd0));
end

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_io = ((m_axi_image_in_raw_pad_burst_ARREADY == 1'b0) & (empty_52_reg_1070 == 1'd1));
end

assign ap_block_state32_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39_pp1_stage0_iter23 = ((m_axi_image_in_raw_pad_burst_RVALID == 1'b0) & (icmp_ln587_reg_1035_pp1_iter22_reg == 1'd0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state59_io = ((m_axi_image_in_raw_pad_burst_ARREADY == 1'b0) & (empty_56_reg_1141 == 1'd1));
end

assign ap_block_state59_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_image_in_raw_pad_burst_ARREADY == 1'b0) & (icmp_ln578_reg_957_pp0_iter1_reg == 1'd0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp2_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp2_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp2_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp2_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp2_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp2_stage0_iter22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state66_pp2_stage0_iter23 = ((m_axi_image_in_raw_pad_burst_RVALID == 1'b0) & (icmp_ln596_reg_1106_pp2_iter22_reg == 1'd0));
end

assign ap_block_state67_pp2_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp2_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign empty_52_fu_715_p2 = ((grp_fu_653_p2 == 12'd0) ? 1'b1 : 1'b0);

assign empty_56_fu_837_p2 = ((grp_fu_775_p2 == 12'd0) ? 1'b1 : 1'b0);

assign grp_fu_653_p1 = 12'd84;

assign grp_fu_775_p1 = 12'd84;

assign grp_fu_888_p0 = grp_fu_888_p00;

assign grp_fu_888_p00 = select_ln581_1_reg_1003;

assign grp_fu_888_p1 = 13'd84;

assign grp_fu_888_p2 = grp_fu_888_p20;

assign grp_fu_888_p20 = select_ln581_reg_971_pp0_iter8_reg;

assign grp_fu_896_p0 = grp_fu_896_p00;

assign grp_fu_896_p00 = select_ln590_1_reg_1080;

assign grp_fu_896_p1 = 13'd84;

assign grp_fu_896_p2 = grp_fu_896_p20;

assign grp_fu_896_p20 = select_ln590_reg_1049_pp1_iter22_reg;

assign grp_fu_905_p0 = grp_fu_905_p00;

assign grp_fu_905_p00 = select_ln599_1_reg_1151;

assign grp_fu_905_p1 = 13'd84;

assign grp_fu_905_p2 = grp_fu_905_p20;

assign grp_fu_905_p20 = select_ln599_reg_1120_pp2_iter22_reg;

assign i_2_fu_731_p2 = (ap_phi_mux_i1_0_phi_fu_340_p4 + 6'd1);

assign i_4_fu_853_p2 = (ap_phi_mux_i3_0_phi_fu_388_p4 + 6'd1);

assign i_fu_587_p2 = (ap_phi_mux_i_0_phi_fu_293_p4 + 6'd1);

assign icmp_ln578_fu_481_p2 = ((indvar_flatten_reg_267 == 12'd3696) ? 1'b1 : 1'b0);

assign icmp_ln579_fu_499_p2 = ((j_0_reg_301 == 7'd84) ? 1'b1 : 1'b0);

assign icmp_ln587_fu_641_p2 = ((ap_phi_mux_indvar_flatten7_phi_fu_316_p4 == 12'd3696) ? 1'b1 : 1'b0);

assign icmp_ln588_fu_665_p2 = ((ap_phi_mux_j2_0_phi_fu_352_p4 == 7'd84) ? 1'b1 : 1'b0);

assign icmp_ln596_fu_763_p2 = ((ap_phi_mux_indvar_flatten15_phi_fu_364_p4 == 12'd3696) ? 1'b1 : 1'b0);

assign icmp_ln597_fu_787_p2 = ((ap_phi_mux_j4_0_phi_fu_400_p4 == 7'd84) ? 1'b1 : 1'b0);

assign img_buf_0_V_address0 = sext_ln203_fu_610_p1;

assign img_buf_0_V_d0 = img_norm_ch_V_q0;

assign img_buf_1_V_address0 = img_buf_1_V_addr_reg_1086_pp1_iter24_reg;

assign img_buf_1_V_d0 = img_norm_ch_V_q0;

assign img_buf_2_V_address0 = img_buf_2_V_addr_reg_1157_pp2_iter24_reg;

assign img_buf_2_V_d0 = img_norm_ch_V_q0;

assign j_1_fu_687_p2 = (select_ln590_fu_671_p3 + 7'd1);

assign j_2_fu_809_p2 = (select_ln599_fu_793_p3 + 7'd1);

assign j_fu_531_p2 = (select_ln581_fu_505_p3 + 7'd1);

assign m_axi_image_in_raw_pad_burst_ARBURST = 2'd0;

assign m_axi_image_in_raw_pad_burst_ARCACHE = 4'd0;

assign m_axi_image_in_raw_pad_burst_ARID = 1'd0;

assign m_axi_image_in_raw_pad_burst_ARLOCK = 2'd0;

assign m_axi_image_in_raw_pad_burst_ARPROT = 3'd0;

assign m_axi_image_in_raw_pad_burst_ARQOS = 4'd0;

assign m_axi_image_in_raw_pad_burst_ARREGION = 4'd0;

assign m_axi_image_in_raw_pad_burst_ARSIZE = 3'd0;

assign m_axi_image_in_raw_pad_burst_ARUSER = 1'd0;

assign m_axi_image_in_raw_pad_burst_AWADDR = 32'd0;

assign m_axi_image_in_raw_pad_burst_AWBURST = 2'd0;

assign m_axi_image_in_raw_pad_burst_AWCACHE = 4'd0;

assign m_axi_image_in_raw_pad_burst_AWID = 1'd0;

assign m_axi_image_in_raw_pad_burst_AWLEN = 32'd0;

assign m_axi_image_in_raw_pad_burst_AWLOCK = 2'd0;

assign m_axi_image_in_raw_pad_burst_AWPROT = 3'd0;

assign m_axi_image_in_raw_pad_burst_AWQOS = 4'd0;

assign m_axi_image_in_raw_pad_burst_AWREGION = 4'd0;

assign m_axi_image_in_raw_pad_burst_AWSIZE = 3'd0;

assign m_axi_image_in_raw_pad_burst_AWUSER = 1'd0;

assign m_axi_image_in_raw_pad_burst_AWVALID = 1'b0;

assign m_axi_image_in_raw_pad_burst_BREADY = 1'b0;

assign m_axi_image_in_raw_pad_burst_WDATA = 32'd0;

assign m_axi_image_in_raw_pad_burst_WID = 1'd0;

assign m_axi_image_in_raw_pad_burst_WLAST = 1'b0;

assign m_axi_image_in_raw_pad_burst_WSTRB = 4'd0;

assign m_axi_image_in_raw_pad_burst_WUSER = 1'd0;

assign m_axi_image_in_raw_pad_burst_WVALID = 1'b0;

assign mul_ln577_fu_880_p0 = 20'd644;

assign mul_ln577_fu_880_p1 = mul_ln577_fu_880_p10;

assign mul_ln577_fu_880_p10 = add_ln577_reg_914;

assign select_ln578_fu_513_p3 = ((icmp_ln579_fu_499_p2[0:0] === 1'b1) ? add_ln583_fu_493_p2 : ap_phi_mux_image_in_raw_pad_bur_phi_fu_282_p4);

assign select_ln581_1_fu_593_p3 = ((icmp_ln579_reg_966_pp0_iter7_reg[0:0] === 1'b1) ? i_fu_587_p2 : ap_phi_mux_i_0_phi_fu_293_p4);

assign select_ln581_fu_505_p3 = ((icmp_ln579_fu_499_p2[0:0] === 1'b1) ? 7'd0 : j_0_reg_301);

assign select_ln590_1_fu_737_p3 = ((icmp_ln588_reg_1044_pp1_iter21_reg[0:0] === 1'b1) ? i_2_fu_731_p2 : ap_phi_mux_i1_0_phi_fu_340_p4);

assign select_ln590_2_fu_679_p3 = ((icmp_ln588_fu_665_p2[0:0] === 1'b1) ? add_ln592_fu_659_p2 : ap_phi_mux_image_in_raw_pad_bur_3_phi_fu_328_p4);

assign select_ln590_fu_671_p3 = ((icmp_ln588_fu_665_p2[0:0] === 1'b1) ? 7'd0 : ap_phi_mux_j2_0_phi_fu_352_p4);

assign select_ln599_1_fu_859_p3 = ((icmp_ln597_reg_1115_pp2_iter21_reg[0:0] === 1'b1) ? i_4_fu_853_p2 : ap_phi_mux_i3_0_phi_fu_388_p4);

assign select_ln599_2_fu_801_p3 = ((icmp_ln597_fu_787_p2[0:0] === 1'b1) ? add_ln601_fu_781_p2 : ap_phi_mux_image_in_raw_pad_bur_7_phi_fu_376_p4);

assign select_ln599_fu_793_p3 = ((icmp_ln597_fu_787_p2[0:0] === 1'b1) ? 7'd0 : ap_phi_mux_j4_0_phi_fu_400_p4);

assign sext_ln203_1_fu_750_p1 = $signed(grp_fu_896_p3);

assign sext_ln203_2_fu_872_p1 = $signed(grp_fu_905_p3);

assign sext_ln203_fu_610_p1 = $signed(add_ln203_reg_1009_pp0_iter10_reg);

assign sext_ln581_fu_606_p1 = $signed(image_in_raw_pad_bur_5_reg_1014);

assign sext_ln590_fu_754_p1 = $signed(image_in_raw_pad_bur_9_reg_1091);

assign sext_ln599_fu_876_p1 = $signed(image_in_raw_pad_bur_12_reg_1162);

assign shl_ln577_1_fu_408_p3 = {{col}, {3'd0}};

assign shl_ln577_3_fu_447_p3 = {{row}, {6'd0}};

assign shl_ln577_4_fu_455_p3 = {{row}, {4'd0}};

assign tmp1_fu_420_p5 = {{{{col}, {2'd0}}, {offset_h}}, {1'd0}};

assign tmp2_fu_540_p4 = {{{tmp_3_reg_982}, {offset_w}}, {1'd0}};

assign tmp_1_fu_619_p4 = {{add_ln577_1_reg_940[9:2]}};

assign tmp_2_fu_628_p4 = {{{tmp_1_fu_619_p4}, {offset_w}}, {1'd0}};

assign trunc_ln577_1_fu_444_p1 = mul_ln577_fu_880_p2[17:0];

assign trunc_ln577_fu_441_p1 = mul_ln577_fu_880_p2[18:0];

assign zext_ln577_2_fu_463_p1 = shl_ln577_4_fu_455_p3;

assign zext_ln577_3_fu_473_p1 = add_ln577_1_fu_467_p2;

assign zext_ln577_fu_416_p1 = shl_ln577_1_fu_408_p3;

assign zext_ln578_fu_477_p1 = image_in_raw_pad_burst_offset;

assign zext_ln581_1_fu_548_p1 = tmp2_fu_540_p4;

assign zext_ln581_2_fu_568_p1 = add_ln581_fu_562_p2;

assign zext_ln581_3_fu_577_p1 = add_ln581_3_reg_992;

assign zext_ln581_fu_537_p1 = select_ln581_reg_971;

assign zext_ln588_fu_706_p1 = add_ln590_2_fu_701_p2;

assign zext_ln590_1_fu_697_p1 = add_ln590_1_fu_693_p2;

assign zext_ln590_2_fu_721_p1 = add_ln590_3_reg_1065;

assign zext_ln590_fu_637_p1 = tmp_2_fu_628_p4;

assign zext_ln597_fu_828_p1 = add_ln599_2_fu_823_p2;

assign zext_ln599_1_fu_843_p1 = add_ln599_3_reg_1136;

assign zext_ln599_fu_819_p1 = add_ln599_1_fu_815_p2;

always @ (posedge ap_clk) begin
    add_ln577_reg_914[0] <= 1'b0;
    add_ln577_1_reg_940[3:0] <= 4'b0000;
    zext_ln577_3_reg_945[3:0] <= 4'b0000;
    zext_ln577_3_reg_945[17:10] <= 8'b00000000;
    zext_ln578_reg_950[30] <= 1'b0;
    zext_ln590_reg_1029[0] <= 1'b0;
    zext_ln590_reg_1029[3:2] <= 2'b00;
    zext_ln590_reg_1029[14:10] <= 5'b00000;
end

endmodule //load_image_chunk_nor
