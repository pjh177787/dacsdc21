// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_weight_3x3_from (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dest_V_offset_offset,
        m_axi_src_V_AWVALID,
        m_axi_src_V_AWREADY,
        m_axi_src_V_AWADDR,
        m_axi_src_V_AWID,
        m_axi_src_V_AWLEN,
        m_axi_src_V_AWSIZE,
        m_axi_src_V_AWBURST,
        m_axi_src_V_AWLOCK,
        m_axi_src_V_AWCACHE,
        m_axi_src_V_AWPROT,
        m_axi_src_V_AWQOS,
        m_axi_src_V_AWREGION,
        m_axi_src_V_AWUSER,
        m_axi_src_V_WVALID,
        m_axi_src_V_WREADY,
        m_axi_src_V_WDATA,
        m_axi_src_V_WSTRB,
        m_axi_src_V_WLAST,
        m_axi_src_V_WID,
        m_axi_src_V_WUSER,
        m_axi_src_V_ARVALID,
        m_axi_src_V_ARREADY,
        m_axi_src_V_ARADDR,
        m_axi_src_V_ARID,
        m_axi_src_V_ARLEN,
        m_axi_src_V_ARSIZE,
        m_axi_src_V_ARBURST,
        m_axi_src_V_ARLOCK,
        m_axi_src_V_ARCACHE,
        m_axi_src_V_ARPROT,
        m_axi_src_V_ARQOS,
        m_axi_src_V_ARREGION,
        m_axi_src_V_ARUSER,
        m_axi_src_V_RVALID,
        m_axi_src_V_RREADY,
        m_axi_src_V_RDATA,
        m_axi_src_V_RLAST,
        m_axi_src_V_RID,
        m_axi_src_V_RUSER,
        m_axi_src_V_RRESP,
        m_axi_src_V_BVALID,
        m_axi_src_V_BREADY,
        m_axi_src_V_BRESP,
        m_axi_src_V_BID,
        m_axi_src_V_BUSER,
        src_V_offset,
        src_V_offset1,
        weight_buf_3x3_V_0_address0,
        weight_buf_3x3_V_0_ce0,
        weight_buf_3x3_V_0_we0,
        weight_buf_3x3_V_0_d0,
        weight_buf_3x3_V_1_address0,
        weight_buf_3x3_V_1_ce0,
        weight_buf_3x3_V_1_we0,
        weight_buf_3x3_V_1_d0,
        weight_buf_3x3_V_2_address0,
        weight_buf_3x3_V_2_ce0,
        weight_buf_3x3_V_2_we0,
        weight_buf_3x3_V_2_d0,
        weight_buf_3x3_V_3_address0,
        weight_buf_3x3_V_3_ce0,
        weight_buf_3x3_V_3_we0,
        weight_buf_3x3_V_3_d0,
        weight_buf_3x3_V_4_address0,
        weight_buf_3x3_V_4_ce0,
        weight_buf_3x3_V_4_we0,
        weight_buf_3x3_V_4_d0,
        weight_buf_3x3_V_5_address0,
        weight_buf_3x3_V_5_ce0,
        weight_buf_3x3_V_5_we0,
        weight_buf_3x3_V_5_d0,
        weight_buf_3x3_V_6_address0,
        weight_buf_3x3_V_6_ce0,
        weight_buf_3x3_V_6_we0,
        weight_buf_3x3_V_6_d0,
        weight_buf_3x3_V_7_address0,
        weight_buf_3x3_V_7_ce0,
        weight_buf_3x3_V_7_we0,
        weight_buf_3x3_V_7_d0,
        weight_buf_3x3_V_8_address0,
        weight_buf_3x3_V_8_ce0,
        weight_buf_3x3_V_8_we0,
        weight_buf_3x3_V_8_d0,
        weight_buf_3x3_V_9_address0,
        weight_buf_3x3_V_9_ce0,
        weight_buf_3x3_V_9_we0,
        weight_buf_3x3_V_9_d0,
        weight_buf_3x3_V_10_address0,
        weight_buf_3x3_V_10_ce0,
        weight_buf_3x3_V_10_we0,
        weight_buf_3x3_V_10_d0,
        weight_buf_3x3_V_11_address0,
        weight_buf_3x3_V_11_ce0,
        weight_buf_3x3_V_11_we0,
        weight_buf_3x3_V_11_d0,
        weight_buf_3x3_V_12_address0,
        weight_buf_3x3_V_12_ce0,
        weight_buf_3x3_V_12_we0,
        weight_buf_3x3_V_12_d0,
        weight_buf_3x3_V_13_address0,
        weight_buf_3x3_V_13_ce0,
        weight_buf_3x3_V_13_we0,
        weight_buf_3x3_V_13_d0,
        weight_buf_3x3_V_14_address0,
        weight_buf_3x3_V_14_ce0,
        weight_buf_3x3_V_14_we0,
        weight_buf_3x3_V_14_d0,
        weight_buf_3x3_V_15_address0,
        weight_buf_3x3_V_15_ce0,
        weight_buf_3x3_V_15_we0,
        weight_buf_3x3_V_15_d0,
        weight_buf_3x3_V_16_address0,
        weight_buf_3x3_V_16_ce0,
        weight_buf_3x3_V_16_we0,
        weight_buf_3x3_V_16_d0,
        weight_buf_3x3_V_17_address0,
        weight_buf_3x3_V_17_ce0,
        weight_buf_3x3_V_17_we0,
        weight_buf_3x3_V_17_d0,
        weight_buf_3x3_V_18_address0,
        weight_buf_3x3_V_18_ce0,
        weight_buf_3x3_V_18_we0,
        weight_buf_3x3_V_18_d0,
        weight_buf_3x3_V_19_address0,
        weight_buf_3x3_V_19_ce0,
        weight_buf_3x3_V_19_we0,
        weight_buf_3x3_V_19_d0,
        weight_buf_3x3_V_20_address0,
        weight_buf_3x3_V_20_ce0,
        weight_buf_3x3_V_20_we0,
        weight_buf_3x3_V_20_d0,
        weight_buf_3x3_V_21_address0,
        weight_buf_3x3_V_21_ce0,
        weight_buf_3x3_V_21_we0,
        weight_buf_3x3_V_21_d0,
        weight_buf_3x3_V_22_address0,
        weight_buf_3x3_V_22_ce0,
        weight_buf_3x3_V_22_we0,
        weight_buf_3x3_V_22_d0,
        weight_buf_3x3_V_23_address0,
        weight_buf_3x3_V_23_ce0,
        weight_buf_3x3_V_23_we0,
        weight_buf_3x3_V_23_d0,
        weight_buf_3x3_V_24_address0,
        weight_buf_3x3_V_24_ce0,
        weight_buf_3x3_V_24_we0,
        weight_buf_3x3_V_24_d0,
        weight_buf_3x3_V_25_address0,
        weight_buf_3x3_V_25_ce0,
        weight_buf_3x3_V_25_we0,
        weight_buf_3x3_V_25_d0,
        weight_buf_3x3_V_26_address0,
        weight_buf_3x3_V_26_ce0,
        weight_buf_3x3_V_26_we0,
        weight_buf_3x3_V_26_d0,
        weight_buf_3x3_V_27_address0,
        weight_buf_3x3_V_27_ce0,
        weight_buf_3x3_V_27_we0,
        weight_buf_3x3_V_27_d0,
        weight_buf_3x3_V_28_address0,
        weight_buf_3x3_V_28_ce0,
        weight_buf_3x3_V_28_we0,
        weight_buf_3x3_V_28_d0,
        weight_buf_3x3_V_29_address0,
        weight_buf_3x3_V_29_ce0,
        weight_buf_3x3_V_29_we0,
        weight_buf_3x3_V_29_d0,
        weight_buf_3x3_V_30_address0,
        weight_buf_3x3_V_30_ce0,
        weight_buf_3x3_V_30_we0,
        weight_buf_3x3_V_30_d0,
        weight_buf_3x3_V_31_address0,
        weight_buf_3x3_V_31_ce0,
        weight_buf_3x3_V_31_we0,
        weight_buf_3x3_V_31_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state13 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] dest_V_offset_offset;
output   m_axi_src_V_AWVALID;
input   m_axi_src_V_AWREADY;
output  [31:0] m_axi_src_V_AWADDR;
output  [0:0] m_axi_src_V_AWID;
output  [31:0] m_axi_src_V_AWLEN;
output  [2:0] m_axi_src_V_AWSIZE;
output  [1:0] m_axi_src_V_AWBURST;
output  [1:0] m_axi_src_V_AWLOCK;
output  [3:0] m_axi_src_V_AWCACHE;
output  [2:0] m_axi_src_V_AWPROT;
output  [3:0] m_axi_src_V_AWQOS;
output  [3:0] m_axi_src_V_AWREGION;
output  [0:0] m_axi_src_V_AWUSER;
output   m_axi_src_V_WVALID;
input   m_axi_src_V_WREADY;
output  [511:0] m_axi_src_V_WDATA;
output  [63:0] m_axi_src_V_WSTRB;
output   m_axi_src_V_WLAST;
output  [0:0] m_axi_src_V_WID;
output  [0:0] m_axi_src_V_WUSER;
output   m_axi_src_V_ARVALID;
input   m_axi_src_V_ARREADY;
output  [31:0] m_axi_src_V_ARADDR;
output  [0:0] m_axi_src_V_ARID;
output  [31:0] m_axi_src_V_ARLEN;
output  [2:0] m_axi_src_V_ARSIZE;
output  [1:0] m_axi_src_V_ARBURST;
output  [1:0] m_axi_src_V_ARLOCK;
output  [3:0] m_axi_src_V_ARCACHE;
output  [2:0] m_axi_src_V_ARPROT;
output  [3:0] m_axi_src_V_ARQOS;
output  [3:0] m_axi_src_V_ARREGION;
output  [0:0] m_axi_src_V_ARUSER;
input   m_axi_src_V_RVALID;
output   m_axi_src_V_RREADY;
input  [511:0] m_axi_src_V_RDATA;
input   m_axi_src_V_RLAST;
input  [0:0] m_axi_src_V_RID;
input  [0:0] m_axi_src_V_RUSER;
input  [1:0] m_axi_src_V_RRESP;
input   m_axi_src_V_BVALID;
output   m_axi_src_V_BREADY;
input  [1:0] m_axi_src_V_BRESP;
input  [0:0] m_axi_src_V_BID;
input  [0:0] m_axi_src_V_BUSER;
input  [25:0] src_V_offset;
input  [6:0] src_V_offset1;
output  [5:0] weight_buf_3x3_V_0_address0;
output   weight_buf_3x3_V_0_ce0;
output   weight_buf_3x3_V_0_we0;
output  [10:0] weight_buf_3x3_V_0_d0;
output  [5:0] weight_buf_3x3_V_1_address0;
output   weight_buf_3x3_V_1_ce0;
output   weight_buf_3x3_V_1_we0;
output  [10:0] weight_buf_3x3_V_1_d0;
output  [5:0] weight_buf_3x3_V_2_address0;
output   weight_buf_3x3_V_2_ce0;
output   weight_buf_3x3_V_2_we0;
output  [10:0] weight_buf_3x3_V_2_d0;
output  [5:0] weight_buf_3x3_V_3_address0;
output   weight_buf_3x3_V_3_ce0;
output   weight_buf_3x3_V_3_we0;
output  [10:0] weight_buf_3x3_V_3_d0;
output  [5:0] weight_buf_3x3_V_4_address0;
output   weight_buf_3x3_V_4_ce0;
output   weight_buf_3x3_V_4_we0;
output  [10:0] weight_buf_3x3_V_4_d0;
output  [5:0] weight_buf_3x3_V_5_address0;
output   weight_buf_3x3_V_5_ce0;
output   weight_buf_3x3_V_5_we0;
output  [10:0] weight_buf_3x3_V_5_d0;
output  [5:0] weight_buf_3x3_V_6_address0;
output   weight_buf_3x3_V_6_ce0;
output   weight_buf_3x3_V_6_we0;
output  [10:0] weight_buf_3x3_V_6_d0;
output  [5:0] weight_buf_3x3_V_7_address0;
output   weight_buf_3x3_V_7_ce0;
output   weight_buf_3x3_V_7_we0;
output  [10:0] weight_buf_3x3_V_7_d0;
output  [5:0] weight_buf_3x3_V_8_address0;
output   weight_buf_3x3_V_8_ce0;
output   weight_buf_3x3_V_8_we0;
output  [10:0] weight_buf_3x3_V_8_d0;
output  [5:0] weight_buf_3x3_V_9_address0;
output   weight_buf_3x3_V_9_ce0;
output   weight_buf_3x3_V_9_we0;
output  [10:0] weight_buf_3x3_V_9_d0;
output  [5:0] weight_buf_3x3_V_10_address0;
output   weight_buf_3x3_V_10_ce0;
output   weight_buf_3x3_V_10_we0;
output  [10:0] weight_buf_3x3_V_10_d0;
output  [5:0] weight_buf_3x3_V_11_address0;
output   weight_buf_3x3_V_11_ce0;
output   weight_buf_3x3_V_11_we0;
output  [10:0] weight_buf_3x3_V_11_d0;
output  [5:0] weight_buf_3x3_V_12_address0;
output   weight_buf_3x3_V_12_ce0;
output   weight_buf_3x3_V_12_we0;
output  [10:0] weight_buf_3x3_V_12_d0;
output  [5:0] weight_buf_3x3_V_13_address0;
output   weight_buf_3x3_V_13_ce0;
output   weight_buf_3x3_V_13_we0;
output  [10:0] weight_buf_3x3_V_13_d0;
output  [5:0] weight_buf_3x3_V_14_address0;
output   weight_buf_3x3_V_14_ce0;
output   weight_buf_3x3_V_14_we0;
output  [10:0] weight_buf_3x3_V_14_d0;
output  [5:0] weight_buf_3x3_V_15_address0;
output   weight_buf_3x3_V_15_ce0;
output   weight_buf_3x3_V_15_we0;
output  [10:0] weight_buf_3x3_V_15_d0;
output  [5:0] weight_buf_3x3_V_16_address0;
output   weight_buf_3x3_V_16_ce0;
output   weight_buf_3x3_V_16_we0;
output  [10:0] weight_buf_3x3_V_16_d0;
output  [5:0] weight_buf_3x3_V_17_address0;
output   weight_buf_3x3_V_17_ce0;
output   weight_buf_3x3_V_17_we0;
output  [10:0] weight_buf_3x3_V_17_d0;
output  [5:0] weight_buf_3x3_V_18_address0;
output   weight_buf_3x3_V_18_ce0;
output   weight_buf_3x3_V_18_we0;
output  [10:0] weight_buf_3x3_V_18_d0;
output  [5:0] weight_buf_3x3_V_19_address0;
output   weight_buf_3x3_V_19_ce0;
output   weight_buf_3x3_V_19_we0;
output  [10:0] weight_buf_3x3_V_19_d0;
output  [5:0] weight_buf_3x3_V_20_address0;
output   weight_buf_3x3_V_20_ce0;
output   weight_buf_3x3_V_20_we0;
output  [10:0] weight_buf_3x3_V_20_d0;
output  [5:0] weight_buf_3x3_V_21_address0;
output   weight_buf_3x3_V_21_ce0;
output   weight_buf_3x3_V_21_we0;
output  [10:0] weight_buf_3x3_V_21_d0;
output  [5:0] weight_buf_3x3_V_22_address0;
output   weight_buf_3x3_V_22_ce0;
output   weight_buf_3x3_V_22_we0;
output  [10:0] weight_buf_3x3_V_22_d0;
output  [5:0] weight_buf_3x3_V_23_address0;
output   weight_buf_3x3_V_23_ce0;
output   weight_buf_3x3_V_23_we0;
output  [10:0] weight_buf_3x3_V_23_d0;
output  [5:0] weight_buf_3x3_V_24_address0;
output   weight_buf_3x3_V_24_ce0;
output   weight_buf_3x3_V_24_we0;
output  [10:0] weight_buf_3x3_V_24_d0;
output  [5:0] weight_buf_3x3_V_25_address0;
output   weight_buf_3x3_V_25_ce0;
output   weight_buf_3x3_V_25_we0;
output  [10:0] weight_buf_3x3_V_25_d0;
output  [5:0] weight_buf_3x3_V_26_address0;
output   weight_buf_3x3_V_26_ce0;
output   weight_buf_3x3_V_26_we0;
output  [10:0] weight_buf_3x3_V_26_d0;
output  [5:0] weight_buf_3x3_V_27_address0;
output   weight_buf_3x3_V_27_ce0;
output   weight_buf_3x3_V_27_we0;
output  [10:0] weight_buf_3x3_V_27_d0;
output  [5:0] weight_buf_3x3_V_28_address0;
output   weight_buf_3x3_V_28_ce0;
output   weight_buf_3x3_V_28_we0;
output  [10:0] weight_buf_3x3_V_28_d0;
output  [5:0] weight_buf_3x3_V_29_address0;
output   weight_buf_3x3_V_29_ce0;
output   weight_buf_3x3_V_29_we0;
output  [10:0] weight_buf_3x3_V_29_d0;
output  [5:0] weight_buf_3x3_V_30_address0;
output   weight_buf_3x3_V_30_ce0;
output   weight_buf_3x3_V_30_we0;
output  [10:0] weight_buf_3x3_V_30_d0;
output  [5:0] weight_buf_3x3_V_31_address0;
output   weight_buf_3x3_V_31_ce0;
output   weight_buf_3x3_V_31_we0;
output  [10:0] weight_buf_3x3_V_31_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_src_V_ARVALID;
reg m_axi_src_V_RREADY;
reg weight_buf_3x3_V_0_ce0;
reg weight_buf_3x3_V_0_we0;
reg weight_buf_3x3_V_1_ce0;
reg weight_buf_3x3_V_1_we0;
reg weight_buf_3x3_V_2_ce0;
reg weight_buf_3x3_V_2_we0;
reg weight_buf_3x3_V_3_ce0;
reg weight_buf_3x3_V_3_we0;
reg weight_buf_3x3_V_4_ce0;
reg weight_buf_3x3_V_4_we0;
reg weight_buf_3x3_V_5_ce0;
reg weight_buf_3x3_V_5_we0;
reg weight_buf_3x3_V_6_ce0;
reg weight_buf_3x3_V_6_we0;
reg weight_buf_3x3_V_7_ce0;
reg weight_buf_3x3_V_7_we0;
reg weight_buf_3x3_V_8_ce0;
reg weight_buf_3x3_V_8_we0;
reg weight_buf_3x3_V_9_ce0;
reg weight_buf_3x3_V_9_we0;
reg weight_buf_3x3_V_10_ce0;
reg weight_buf_3x3_V_10_we0;
reg weight_buf_3x3_V_11_ce0;
reg weight_buf_3x3_V_11_we0;
reg weight_buf_3x3_V_12_ce0;
reg weight_buf_3x3_V_12_we0;
reg weight_buf_3x3_V_13_ce0;
reg weight_buf_3x3_V_13_we0;
reg weight_buf_3x3_V_14_ce0;
reg weight_buf_3x3_V_14_we0;
reg weight_buf_3x3_V_15_ce0;
reg weight_buf_3x3_V_15_we0;
reg weight_buf_3x3_V_16_ce0;
reg weight_buf_3x3_V_16_we0;
reg weight_buf_3x3_V_17_ce0;
reg weight_buf_3x3_V_17_we0;
reg weight_buf_3x3_V_18_ce0;
reg weight_buf_3x3_V_18_we0;
reg weight_buf_3x3_V_19_ce0;
reg weight_buf_3x3_V_19_we0;
reg weight_buf_3x3_V_20_ce0;
reg weight_buf_3x3_V_20_we0;
reg weight_buf_3x3_V_21_ce0;
reg weight_buf_3x3_V_21_we0;
reg weight_buf_3x3_V_22_ce0;
reg weight_buf_3x3_V_22_we0;
reg weight_buf_3x3_V_23_ce0;
reg weight_buf_3x3_V_23_we0;
reg weight_buf_3x3_V_24_ce0;
reg weight_buf_3x3_V_24_we0;
reg weight_buf_3x3_V_25_ce0;
reg weight_buf_3x3_V_25_we0;
reg weight_buf_3x3_V_26_ce0;
reg weight_buf_3x3_V_26_we0;
reg weight_buf_3x3_V_27_ce0;
reg weight_buf_3x3_V_27_we0;
reg weight_buf_3x3_V_28_ce0;
reg weight_buf_3x3_V_28_we0;
reg weight_buf_3x3_V_29_ce0;
reg weight_buf_3x3_V_29_we0;
reg weight_buf_3x3_V_30_ce0;
reg weight_buf_3x3_V_30_we0;
reg weight_buf_3x3_V_31_ce0;
reg weight_buf_3x3_V_31_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_V_blk_n_AR;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln391_reg_1295;
reg   [0:0] icmp_ln391_reg_1295_pp0_iter1_reg;
reg    src_V_blk_n_R;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] icmp_ln391_reg_1295_pp0_iter8_reg;
reg   [3:0] indvar_flatten_reg_706;
reg   [1:0] m_0_reg_717;
reg   [1:0] n_0_reg_728;
wire  signed [10:0] sext_ln647_fu_761_p1;
reg  signed [10:0] sext_ln647_reg_1280;
wire  signed [7:0] sext_ln339_fu_787_p1;
reg  signed [7:0] sext_ln339_reg_1285;
wire   [63:0] zext_ln647_1_fu_791_p1;
reg   [63:0] zext_ln647_1_reg_1290;
wire   [0:0] icmp_ln391_fu_795_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln391_reg_1295_pp0_iter2_reg;
reg   [0:0] icmp_ln391_reg_1295_pp0_iter3_reg;
reg   [0:0] icmp_ln391_reg_1295_pp0_iter4_reg;
reg   [0:0] icmp_ln391_reg_1295_pp0_iter5_reg;
reg   [0:0] icmp_ln391_reg_1295_pp0_iter6_reg;
reg   [0:0] icmp_ln391_reg_1295_pp0_iter7_reg;
reg   [0:0] icmp_ln391_reg_1295_pp0_iter9_reg;
wire   [3:0] add_ln391_fu_801_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln395_fu_819_p3;
reg   [1:0] select_ln395_reg_1304;
reg   [1:0] select_ln395_reg_1304_pp0_iter1_reg;
reg   [1:0] select_ln395_reg_1304_pp0_iter2_reg;
reg   [1:0] select_ln395_reg_1304_pp0_iter3_reg;
reg   [1:0] select_ln395_reg_1304_pp0_iter4_reg;
reg   [1:0] select_ln395_reg_1304_pp0_iter5_reg;
reg   [1:0] select_ln395_reg_1304_pp0_iter6_reg;
reg   [1:0] select_ln395_reg_1304_pp0_iter7_reg;
reg   [1:0] select_ln395_reg_1304_pp0_iter8_reg;
reg   [1:0] select_ln395_reg_1304_pp0_iter9_reg;
wire   [1:0] select_ln395_1_fu_827_p3;
reg   [1:0] select_ln395_1_reg_1310;
reg   [1:0] select_ln395_1_reg_1310_pp0_iter1_reg;
reg   [1:0] select_ln395_1_reg_1310_pp0_iter2_reg;
reg   [1:0] select_ln395_1_reg_1310_pp0_iter3_reg;
reg   [1:0] select_ln395_1_reg_1310_pp0_iter4_reg;
reg   [1:0] select_ln395_1_reg_1310_pp0_iter5_reg;
reg   [1:0] select_ln395_1_reg_1310_pp0_iter6_reg;
reg   [1:0] select_ln395_1_reg_1310_pp0_iter7_reg;
reg   [1:0] select_ln395_1_reg_1310_pp0_iter8_reg;
reg   [1:0] select_ln395_1_reg_1310_pp0_iter9_reg;
wire   [1:0] n_fu_835_p2;
wire   [63:0] add_ln647_2_fu_880_p2;
reg   [63:0] add_ln647_2_reg_1322;
wire   [10:0] trunc_ln647_fu_891_p1;
reg   [10:0] trunc_ln647_reg_1333;
reg   [10:0] p_Result_30_1_reg_1338;
reg   [10:0] p_Result_30_2_reg_1343;
reg   [10:0] p_Result_30_3_reg_1348;
reg   [10:0] p_Result_30_4_reg_1353;
reg   [10:0] p_Result_30_5_reg_1358;
reg   [10:0] p_Result_30_6_reg_1363;
reg   [10:0] p_Result_30_7_reg_1368;
reg   [10:0] p_Result_30_8_reg_1373;
reg   [10:0] p_Result_30_9_reg_1378;
reg   [10:0] p_Result_30_s_reg_1383;
reg   [10:0] p_Result_30_10_reg_1388;
reg   [10:0] p_Result_30_11_reg_1393;
reg   [10:0] p_Result_30_12_reg_1398;
reg   [10:0] p_Result_30_13_reg_1403;
reg   [10:0] p_Result_30_14_reg_1408;
reg   [10:0] p_Result_30_15_reg_1413;
reg   [10:0] p_Result_30_16_reg_1418;
reg   [10:0] p_Result_30_17_reg_1423;
reg   [10:0] p_Result_30_18_reg_1428;
reg   [10:0] p_Result_30_19_reg_1433;
reg   [10:0] p_Result_30_20_reg_1438;
reg   [10:0] p_Result_30_21_reg_1443;
reg   [10:0] p_Result_30_22_reg_1448;
reg   [10:0] p_Result_30_23_reg_1453;
reg   [10:0] p_Result_30_24_reg_1458;
reg   [10:0] p_Result_30_25_reg_1463;
reg   [10:0] p_Result_30_26_reg_1468;
reg   [10:0] p_Result_30_27_reg_1473;
reg   [10:0] p_Result_30_28_reg_1478;
reg   [10:0] p_Result_30_29_reg_1483;
reg   [10:0] p_Result_30_30_reg_1488;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter10;
reg   [1:0] ap_phi_mux_m_0_phi_fu_721_p4;
wire   [63:0] zext_ln339_7_fu_1244_p1;
wire   [8:0] tmp_2_fu_743_p3;
wire   [9:0] zext_ln647_2_fu_751_p1;
wire   [9:0] zext_ln647_fu_739_p1;
wire   [9:0] sub_ln647_fu_755_p2;
wire   [5:0] tmp_3_fu_769_p3;
wire   [6:0] zext_ln339_3_fu_777_p1;
wire   [6:0] zext_ln339_fu_765_p1;
wire   [6:0] sub_ln339_fu_781_p2;
wire   [0:0] icmp_ln392_fu_813_p2;
wire   [1:0] m_fu_807_p2;
wire   [10:0] zext_ln339_4_fu_841_p1;
wire  signed [10:0] add_ln647_fu_844_p2;
wire   [12:0] tmp_228_fu_853_p3;
wire  signed [63:0] sext_ln647_2_fu_861_p1;
wire  signed [63:0] sext_ln647_1_fu_849_p1;
wire   [63:0] zext_ln395_fu_871_p1;
wire   [63:0] sub_ln647_1_fu_865_p2;
wire   [63:0] add_ln647_1_fu_874_p2;
wire   [7:0] zext_ln339_5_fu_1205_p1;
wire   [7:0] add_ln339_fu_1208_p2;
wire   [4:0] trunc_ln339_1_fu_1217_p1;
wire   [6:0] p_shl4_cast_fu_1221_p3;
wire   [6:0] trunc_ln339_fu_1213_p1;
wire   [6:0] zext_ln339_6_fu_1235_p1;
wire   [6:0] sub_ln339_1_fu_1229_p2;
wire   [6:0] add_ln339_2_fu_1238_p2;
wire    ap_CS_fsm_state13;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_fu_795_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_706 <= add_ln391_fu_801_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_706 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_reg_1295 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_0_reg_717 <= select_ln395_1_reg_1310;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        m_0_reg_717 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_fu_795_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n_0_reg_728 <= n_fu_835_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_0_reg_728 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_reg_1295 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln647_2_reg_1322 <= add_ln647_2_fu_880_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln391_reg_1295 <= icmp_ln391_fu_795_p2;
        icmp_ln391_reg_1295_pp0_iter1_reg <= icmp_ln391_reg_1295;
        select_ln395_1_reg_1310_pp0_iter1_reg <= select_ln395_1_reg_1310;
        select_ln395_reg_1304_pp0_iter1_reg <= select_ln395_reg_1304;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln391_reg_1295_pp0_iter2_reg <= icmp_ln391_reg_1295_pp0_iter1_reg;
        icmp_ln391_reg_1295_pp0_iter3_reg <= icmp_ln391_reg_1295_pp0_iter2_reg;
        icmp_ln391_reg_1295_pp0_iter4_reg <= icmp_ln391_reg_1295_pp0_iter3_reg;
        icmp_ln391_reg_1295_pp0_iter5_reg <= icmp_ln391_reg_1295_pp0_iter4_reg;
        icmp_ln391_reg_1295_pp0_iter6_reg <= icmp_ln391_reg_1295_pp0_iter5_reg;
        icmp_ln391_reg_1295_pp0_iter7_reg <= icmp_ln391_reg_1295_pp0_iter6_reg;
        icmp_ln391_reg_1295_pp0_iter8_reg <= icmp_ln391_reg_1295_pp0_iter7_reg;
        icmp_ln391_reg_1295_pp0_iter9_reg <= icmp_ln391_reg_1295_pp0_iter8_reg;
        select_ln395_1_reg_1310_pp0_iter2_reg <= select_ln395_1_reg_1310_pp0_iter1_reg;
        select_ln395_1_reg_1310_pp0_iter3_reg <= select_ln395_1_reg_1310_pp0_iter2_reg;
        select_ln395_1_reg_1310_pp0_iter4_reg <= select_ln395_1_reg_1310_pp0_iter3_reg;
        select_ln395_1_reg_1310_pp0_iter5_reg <= select_ln395_1_reg_1310_pp0_iter4_reg;
        select_ln395_1_reg_1310_pp0_iter6_reg <= select_ln395_1_reg_1310_pp0_iter5_reg;
        select_ln395_1_reg_1310_pp0_iter7_reg <= select_ln395_1_reg_1310_pp0_iter6_reg;
        select_ln395_1_reg_1310_pp0_iter8_reg <= select_ln395_1_reg_1310_pp0_iter7_reg;
        select_ln395_1_reg_1310_pp0_iter9_reg <= select_ln395_1_reg_1310_pp0_iter8_reg;
        select_ln395_reg_1304_pp0_iter2_reg <= select_ln395_reg_1304_pp0_iter1_reg;
        select_ln395_reg_1304_pp0_iter3_reg <= select_ln395_reg_1304_pp0_iter2_reg;
        select_ln395_reg_1304_pp0_iter4_reg <= select_ln395_reg_1304_pp0_iter3_reg;
        select_ln395_reg_1304_pp0_iter5_reg <= select_ln395_reg_1304_pp0_iter4_reg;
        select_ln395_reg_1304_pp0_iter6_reg <= select_ln395_reg_1304_pp0_iter5_reg;
        select_ln395_reg_1304_pp0_iter7_reg <= select_ln395_reg_1304_pp0_iter6_reg;
        select_ln395_reg_1304_pp0_iter8_reg <= select_ln395_reg_1304_pp0_iter7_reg;
        select_ln395_reg_1304_pp0_iter9_reg <= select_ln395_reg_1304_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_reg_1295_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_30_10_reg_1388 <= {{m_axi_src_V_RDATA[186:176]}};
        p_Result_30_11_reg_1393 <= {{m_axi_src_V_RDATA[202:192]}};
        p_Result_30_12_reg_1398 <= {{m_axi_src_V_RDATA[218:208]}};
        p_Result_30_13_reg_1403 <= {{m_axi_src_V_RDATA[234:224]}};
        p_Result_30_14_reg_1408 <= {{m_axi_src_V_RDATA[250:240]}};
        p_Result_30_15_reg_1413 <= {{m_axi_src_V_RDATA[266:256]}};
        p_Result_30_16_reg_1418 <= {{m_axi_src_V_RDATA[282:272]}};
        p_Result_30_17_reg_1423 <= {{m_axi_src_V_RDATA[298:288]}};
        p_Result_30_18_reg_1428 <= {{m_axi_src_V_RDATA[314:304]}};
        p_Result_30_19_reg_1433 <= {{m_axi_src_V_RDATA[330:320]}};
        p_Result_30_1_reg_1338 <= {{m_axi_src_V_RDATA[26:16]}};
        p_Result_30_20_reg_1438 <= {{m_axi_src_V_RDATA[346:336]}};
        p_Result_30_21_reg_1443 <= {{m_axi_src_V_RDATA[362:352]}};
        p_Result_30_22_reg_1448 <= {{m_axi_src_V_RDATA[378:368]}};
        p_Result_30_23_reg_1453 <= {{m_axi_src_V_RDATA[394:384]}};
        p_Result_30_24_reg_1458 <= {{m_axi_src_V_RDATA[410:400]}};
        p_Result_30_25_reg_1463 <= {{m_axi_src_V_RDATA[426:416]}};
        p_Result_30_26_reg_1468 <= {{m_axi_src_V_RDATA[442:432]}};
        p_Result_30_27_reg_1473 <= {{m_axi_src_V_RDATA[458:448]}};
        p_Result_30_28_reg_1478 <= {{m_axi_src_V_RDATA[474:464]}};
        p_Result_30_29_reg_1483 <= {{m_axi_src_V_RDATA[490:480]}};
        p_Result_30_2_reg_1343 <= {{m_axi_src_V_RDATA[42:32]}};
        p_Result_30_30_reg_1488 <= {{m_axi_src_V_RDATA[506:496]}};
        p_Result_30_3_reg_1348 <= {{m_axi_src_V_RDATA[58:48]}};
        p_Result_30_4_reg_1353 <= {{m_axi_src_V_RDATA[74:64]}};
        p_Result_30_5_reg_1358 <= {{m_axi_src_V_RDATA[90:80]}};
        p_Result_30_6_reg_1363 <= {{m_axi_src_V_RDATA[106:96]}};
        p_Result_30_7_reg_1368 <= {{m_axi_src_V_RDATA[122:112]}};
        p_Result_30_8_reg_1373 <= {{m_axi_src_V_RDATA[138:128]}};
        p_Result_30_9_reg_1378 <= {{m_axi_src_V_RDATA[154:144]}};
        p_Result_30_s_reg_1383 <= {{m_axi_src_V_RDATA[170:160]}};
        trunc_ln647_reg_1333 <= trunc_ln647_fu_891_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_fu_795_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln395_1_reg_1310 <= select_ln395_1_fu_827_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_fu_795_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln395_reg_1304 <= select_ln395_fu_819_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_ln339_reg_1285 <= sext_ln339_fu_787_p1;
        sext_ln647_reg_1280 <= sext_ln647_fu_761_p1;
        zext_ln647_1_reg_1290[25 : 0] <= zext_ln647_1_fu_791_p1[25 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln391_fu_795_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_m_0_phi_fu_721_p4 = select_ln395_1_reg_1310;
    end else begin
        ap_phi_mux_m_0_phi_fu_721_p4 = m_0_reg_717;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_src_V_ARVALID = 1'b1;
    end else begin
        m_axi_src_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        m_axi_src_V_RREADY = 1'b1;
    end else begin
        m_axi_src_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        src_V_blk_n_AR = m_axi_src_V_ARREADY;
    end else begin
        src_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        src_V_blk_n_R = m_axi_src_V_RVALID;
    end else begin
        src_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_0_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_0_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_10_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_10_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_11_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_11_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_12_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_12_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_13_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_13_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_14_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_14_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_15_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_15_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_16_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_16_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_17_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_17_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_18_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_18_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_19_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_19_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_1_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_1_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_20_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_20_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_20_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_21_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_21_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_21_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_22_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_22_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_22_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_23_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_23_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_23_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_24_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_24_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_24_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_25_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_25_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_26_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_26_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_26_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_27_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_27_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_27_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_28_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_28_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_28_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_29_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_29_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_29_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_2_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_2_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_30_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_30_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_30_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_31_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_31_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_31_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_3_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_3_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_4_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_4_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_5_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_5_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_6_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_6_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_7_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_7_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_8_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_8_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_9_ce0 = 1'b1;
    end else begin
        weight_buf_3x3_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_1295_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weight_buf_3x3_V_9_we0 = 1'b1;
    end else begin
        weight_buf_3x3_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln391_fu_795_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln391_fu_795_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln339_2_fu_1238_p2 = (zext_ln339_6_fu_1235_p1 + sub_ln339_1_fu_1229_p2);

assign add_ln339_fu_1208_p2 = ($signed(zext_ln339_5_fu_1205_p1) + $signed(sext_ln339_reg_1285));

assign add_ln391_fu_801_p2 = (indvar_flatten_reg_706 + 4'd1);

assign add_ln647_1_fu_874_p2 = (zext_ln395_fu_871_p1 + sub_ln647_1_fu_865_p2);

assign add_ln647_2_fu_880_p2 = (add_ln647_1_fu_874_p2 + zext_ln647_1_reg_1290);

assign add_ln647_fu_844_p2 = ($signed(zext_ln339_4_fu_841_p1) + $signed(sext_ln647_reg_1280));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln391_reg_1295_pp0_iter8_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln391_reg_1295_pp0_iter8_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter9 = ((icmp_ln391_reg_1295_pp0_iter8_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0));
end

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln391_reg_1295_pp0_iter1_reg == 1'd0) & (m_axi_src_V_ARREADY == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln391_fu_795_p2 = ((indvar_flatten_reg_706 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln392_fu_813_p2 = ((n_0_reg_728 == 2'd3) ? 1'b1 : 1'b0);

assign m_axi_src_V_ARADDR = add_ln647_2_reg_1322;

assign m_axi_src_V_ARBURST = 2'd0;

assign m_axi_src_V_ARCACHE = 4'd0;

assign m_axi_src_V_ARID = 1'd0;

assign m_axi_src_V_ARLEN = 32'd1;

assign m_axi_src_V_ARLOCK = 2'd0;

assign m_axi_src_V_ARPROT = 3'd0;

assign m_axi_src_V_ARQOS = 4'd0;

assign m_axi_src_V_ARREGION = 4'd0;

assign m_axi_src_V_ARSIZE = 3'd0;

assign m_axi_src_V_ARUSER = 1'd0;

assign m_axi_src_V_AWADDR = 32'd0;

assign m_axi_src_V_AWBURST = 2'd0;

assign m_axi_src_V_AWCACHE = 4'd0;

assign m_axi_src_V_AWID = 1'd0;

assign m_axi_src_V_AWLEN = 32'd0;

assign m_axi_src_V_AWLOCK = 2'd0;

assign m_axi_src_V_AWPROT = 3'd0;

assign m_axi_src_V_AWQOS = 4'd0;

assign m_axi_src_V_AWREGION = 4'd0;

assign m_axi_src_V_AWSIZE = 3'd0;

assign m_axi_src_V_AWUSER = 1'd0;

assign m_axi_src_V_AWVALID = 1'b0;

assign m_axi_src_V_BREADY = 1'b0;

assign m_axi_src_V_WDATA = 512'd0;

assign m_axi_src_V_WID = 1'd0;

assign m_axi_src_V_WLAST = 1'b0;

assign m_axi_src_V_WSTRB = 64'd0;

assign m_axi_src_V_WUSER = 1'd0;

assign m_axi_src_V_WVALID = 1'b0;

assign m_fu_807_p2 = (2'd1 + ap_phi_mux_m_0_phi_fu_721_p4);

assign n_fu_835_p2 = (2'd1 + select_ln395_fu_819_p3);

assign p_shl4_cast_fu_1221_p3 = {{trunc_ln339_1_fu_1217_p1}, {2'd0}};

assign select_ln395_1_fu_827_p3 = ((icmp_ln392_fu_813_p2[0:0] === 1'b1) ? m_fu_807_p2 : ap_phi_mux_m_0_phi_fu_721_p4);

assign select_ln395_fu_819_p3 = ((icmp_ln392_fu_813_p2[0:0] === 1'b1) ? 2'd0 : n_0_reg_728);

assign sext_ln339_fu_787_p1 = $signed(sub_ln339_fu_781_p2);

assign sext_ln647_1_fu_849_p1 = add_ln647_fu_844_p2;

assign sext_ln647_2_fu_861_p1 = $signed(tmp_228_fu_853_p3);

assign sext_ln647_fu_761_p1 = $signed(sub_ln647_fu_755_p2);

assign sub_ln339_1_fu_1229_p2 = (p_shl4_cast_fu_1221_p3 - trunc_ln339_fu_1213_p1);

assign sub_ln339_fu_781_p2 = (zext_ln339_3_fu_777_p1 - zext_ln339_fu_765_p1);

assign sub_ln647_1_fu_865_p2 = ($signed(sext_ln647_2_fu_861_p1) - $signed(sext_ln647_1_fu_849_p1));

assign sub_ln647_fu_755_p2 = (zext_ln647_2_fu_751_p1 - zext_ln647_fu_739_p1);

assign tmp_228_fu_853_p3 = {{add_ln647_fu_844_p2}, {2'd0}};

assign tmp_2_fu_743_p3 = {{src_V_offset1}, {2'd0}};

assign tmp_3_fu_769_p3 = {{dest_V_offset_offset}, {2'd0}};

assign trunc_ln339_1_fu_1217_p1 = add_ln339_fu_1208_p2[4:0];

assign trunc_ln339_fu_1213_p1 = add_ln339_fu_1208_p2[6:0];

assign trunc_ln647_fu_891_p1 = m_axi_src_V_RDATA[10:0];

assign weight_buf_3x3_V_0_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_0_d0 = trunc_ln647_reg_1333;

assign weight_buf_3x3_V_10_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_10_d0 = p_Result_30_s_reg_1383;

assign weight_buf_3x3_V_11_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_11_d0 = p_Result_30_10_reg_1388;

assign weight_buf_3x3_V_12_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_12_d0 = p_Result_30_11_reg_1393;

assign weight_buf_3x3_V_13_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_13_d0 = p_Result_30_12_reg_1398;

assign weight_buf_3x3_V_14_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_14_d0 = p_Result_30_13_reg_1403;

assign weight_buf_3x3_V_15_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_15_d0 = p_Result_30_14_reg_1408;

assign weight_buf_3x3_V_16_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_16_d0 = p_Result_30_15_reg_1413;

assign weight_buf_3x3_V_17_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_17_d0 = p_Result_30_16_reg_1418;

assign weight_buf_3x3_V_18_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_18_d0 = p_Result_30_17_reg_1423;

assign weight_buf_3x3_V_19_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_19_d0 = p_Result_30_18_reg_1428;

assign weight_buf_3x3_V_1_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_1_d0 = p_Result_30_1_reg_1338;

assign weight_buf_3x3_V_20_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_20_d0 = p_Result_30_19_reg_1433;

assign weight_buf_3x3_V_21_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_21_d0 = p_Result_30_20_reg_1438;

assign weight_buf_3x3_V_22_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_22_d0 = p_Result_30_21_reg_1443;

assign weight_buf_3x3_V_23_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_23_d0 = p_Result_30_22_reg_1448;

assign weight_buf_3x3_V_24_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_24_d0 = p_Result_30_23_reg_1453;

assign weight_buf_3x3_V_25_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_25_d0 = p_Result_30_24_reg_1458;

assign weight_buf_3x3_V_26_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_26_d0 = p_Result_30_25_reg_1463;

assign weight_buf_3x3_V_27_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_27_d0 = p_Result_30_26_reg_1468;

assign weight_buf_3x3_V_28_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_28_d0 = p_Result_30_27_reg_1473;

assign weight_buf_3x3_V_29_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_29_d0 = p_Result_30_28_reg_1478;

assign weight_buf_3x3_V_2_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_2_d0 = p_Result_30_2_reg_1343;

assign weight_buf_3x3_V_30_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_30_d0 = p_Result_30_29_reg_1483;

assign weight_buf_3x3_V_31_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_31_d0 = p_Result_30_30_reg_1488;

assign weight_buf_3x3_V_3_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_3_d0 = p_Result_30_3_reg_1348;

assign weight_buf_3x3_V_4_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_4_d0 = p_Result_30_4_reg_1353;

assign weight_buf_3x3_V_5_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_5_d0 = p_Result_30_5_reg_1358;

assign weight_buf_3x3_V_6_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_6_d0 = p_Result_30_6_reg_1363;

assign weight_buf_3x3_V_7_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_7_d0 = p_Result_30_7_reg_1368;

assign weight_buf_3x3_V_8_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_8_d0 = p_Result_30_8_reg_1373;

assign weight_buf_3x3_V_9_address0 = zext_ln339_7_fu_1244_p1;

assign weight_buf_3x3_V_9_d0 = p_Result_30_9_reg_1378;

assign zext_ln339_3_fu_777_p1 = tmp_3_fu_769_p3;

assign zext_ln339_4_fu_841_p1 = select_ln395_1_reg_1310;

assign zext_ln339_5_fu_1205_p1 = select_ln395_1_reg_1310_pp0_iter9_reg;

assign zext_ln339_6_fu_1235_p1 = select_ln395_reg_1304_pp0_iter9_reg;

assign zext_ln339_7_fu_1244_p1 = add_ln339_2_fu_1238_p2;

assign zext_ln339_fu_765_p1 = dest_V_offset_offset;

assign zext_ln395_fu_871_p1 = select_ln395_reg_1304;

assign zext_ln647_1_fu_791_p1 = src_V_offset;

assign zext_ln647_2_fu_751_p1 = tmp_2_fu_743_p3;

assign zext_ln647_fu_739_p1 = src_V_offset1;

always @ (posedge ap_clk) begin
    zext_ln647_1_reg_1290[63:26] <= 38'b00000000000000000000000000000000000000;
end

endmodule //load_weight_3x3_from
