// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_buf_from_DDR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dest_0_V_address0,
        dest_0_V_ce0,
        dest_0_V_we0,
        dest_0_V_d0,
        dest_1_V_address0,
        dest_1_V_ce0,
        dest_1_V_we0,
        dest_1_V_d0,
        dest_2_V_address0,
        dest_2_V_ce0,
        dest_2_V_we0,
        dest_2_V_d0,
        dest_3_V_address0,
        dest_3_V_ce0,
        dest_3_V_we0,
        dest_3_V_d0,
        dest_4_V_address0,
        dest_4_V_ce0,
        dest_4_V_we0,
        dest_4_V_d0,
        dest_5_V_address0,
        dest_5_V_ce0,
        dest_5_V_we0,
        dest_5_V_d0,
        dest_6_V_address0,
        dest_6_V_ce0,
        dest_6_V_we0,
        dest_6_V_d0,
        dest_7_V_address0,
        dest_7_V_ce0,
        dest_7_V_we0,
        dest_7_V_d0,
        dest_8_V_address0,
        dest_8_V_ce0,
        dest_8_V_we0,
        dest_8_V_d0,
        dest_9_V_address0,
        dest_9_V_ce0,
        dest_9_V_we0,
        dest_9_V_d0,
        dest_10_V_address0,
        dest_10_V_ce0,
        dest_10_V_we0,
        dest_10_V_d0,
        dest_11_V_address0,
        dest_11_V_ce0,
        dest_11_V_we0,
        dest_11_V_d0,
        dest_12_V_address0,
        dest_12_V_ce0,
        dest_12_V_we0,
        dest_12_V_d0,
        dest_13_V_address0,
        dest_13_V_ce0,
        dest_13_V_we0,
        dest_13_V_d0,
        dest_14_V_address0,
        dest_14_V_ce0,
        dest_14_V_we0,
        dest_14_V_d0,
        dest_15_V_address0,
        dest_15_V_ce0,
        dest_15_V_we0,
        dest_15_V_d0,
        dest_16_V_address0,
        dest_16_V_ce0,
        dest_16_V_we0,
        dest_16_V_d0,
        dest_17_V_address0,
        dest_17_V_ce0,
        dest_17_V_we0,
        dest_17_V_d0,
        dest_18_V_address0,
        dest_18_V_ce0,
        dest_18_V_we0,
        dest_18_V_d0,
        dest_19_V_address0,
        dest_19_V_ce0,
        dest_19_V_we0,
        dest_19_V_d0,
        dest_20_V_address0,
        dest_20_V_ce0,
        dest_20_V_we0,
        dest_20_V_d0,
        dest_21_V_address0,
        dest_21_V_ce0,
        dest_21_V_we0,
        dest_21_V_d0,
        dest_22_V_address0,
        dest_22_V_ce0,
        dest_22_V_we0,
        dest_22_V_d0,
        dest_23_V_address0,
        dest_23_V_ce0,
        dest_23_V_we0,
        dest_23_V_d0,
        dest_24_V_address0,
        dest_24_V_ce0,
        dest_24_V_we0,
        dest_24_V_d0,
        dest_25_V_address0,
        dest_25_V_ce0,
        dest_25_V_we0,
        dest_25_V_d0,
        dest_26_V_address0,
        dest_26_V_ce0,
        dest_26_V_we0,
        dest_26_V_d0,
        dest_27_V_address0,
        dest_27_V_ce0,
        dest_27_V_we0,
        dest_27_V_d0,
        dest_28_V_address0,
        dest_28_V_ce0,
        dest_28_V_we0,
        dest_28_V_d0,
        dest_29_V_address0,
        dest_29_V_ce0,
        dest_29_V_we0,
        dest_29_V_d0,
        dest_30_V_address0,
        dest_30_V_ce0,
        dest_30_V_we0,
        dest_30_V_d0,
        dest_31_V_address0,
        dest_31_V_ce0,
        dest_31_V_we0,
        dest_31_V_d0,
        m_axi_src_V_AWVALID,
        m_axi_src_V_AWREADY,
        m_axi_src_V_AWADDR,
        m_axi_src_V_AWID,
        m_axi_src_V_AWLEN,
        m_axi_src_V_AWSIZE,
        m_axi_src_V_AWBURST,
        m_axi_src_V_AWLOCK,
        m_axi_src_V_AWCACHE,
        m_axi_src_V_AWPROT,
        m_axi_src_V_AWQOS,
        m_axi_src_V_AWREGION,
        m_axi_src_V_AWUSER,
        m_axi_src_V_WVALID,
        m_axi_src_V_WREADY,
        m_axi_src_V_WDATA,
        m_axi_src_V_WSTRB,
        m_axi_src_V_WLAST,
        m_axi_src_V_WID,
        m_axi_src_V_WUSER,
        m_axi_src_V_ARVALID,
        m_axi_src_V_ARREADY,
        m_axi_src_V_ARADDR,
        m_axi_src_V_ARID,
        m_axi_src_V_ARLEN,
        m_axi_src_V_ARSIZE,
        m_axi_src_V_ARBURST,
        m_axi_src_V_ARLOCK,
        m_axi_src_V_ARCACHE,
        m_axi_src_V_ARPROT,
        m_axi_src_V_ARQOS,
        m_axi_src_V_ARREGION,
        m_axi_src_V_ARUSER,
        m_axi_src_V_RVALID,
        m_axi_src_V_RREADY,
        m_axi_src_V_RDATA,
        m_axi_src_V_RLAST,
        m_axi_src_V_RID,
        m_axi_src_V_RUSER,
        m_axi_src_V_RRESP,
        m_axi_src_V_BVALID,
        m_axi_src_V_BREADY,
        m_axi_src_V_BRESP,
        m_axi_src_V_BID,
        m_axi_src_V_BUSER,
        src_V_offset,
        buf_id
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state27 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] dest_0_V_address0;
output   dest_0_V_ce0;
output   dest_0_V_we0;
output  [8:0] dest_0_V_d0;
output  [11:0] dest_1_V_address0;
output   dest_1_V_ce0;
output   dest_1_V_we0;
output  [8:0] dest_1_V_d0;
output  [11:0] dest_2_V_address0;
output   dest_2_V_ce0;
output   dest_2_V_we0;
output  [8:0] dest_2_V_d0;
output  [11:0] dest_3_V_address0;
output   dest_3_V_ce0;
output   dest_3_V_we0;
output  [8:0] dest_3_V_d0;
output  [11:0] dest_4_V_address0;
output   dest_4_V_ce0;
output   dest_4_V_we0;
output  [8:0] dest_4_V_d0;
output  [11:0] dest_5_V_address0;
output   dest_5_V_ce0;
output   dest_5_V_we0;
output  [8:0] dest_5_V_d0;
output  [11:0] dest_6_V_address0;
output   dest_6_V_ce0;
output   dest_6_V_we0;
output  [8:0] dest_6_V_d0;
output  [11:0] dest_7_V_address0;
output   dest_7_V_ce0;
output   dest_7_V_we0;
output  [8:0] dest_7_V_d0;
output  [11:0] dest_8_V_address0;
output   dest_8_V_ce0;
output   dest_8_V_we0;
output  [8:0] dest_8_V_d0;
output  [11:0] dest_9_V_address0;
output   dest_9_V_ce0;
output   dest_9_V_we0;
output  [8:0] dest_9_V_d0;
output  [11:0] dest_10_V_address0;
output   dest_10_V_ce0;
output   dest_10_V_we0;
output  [8:0] dest_10_V_d0;
output  [11:0] dest_11_V_address0;
output   dest_11_V_ce0;
output   dest_11_V_we0;
output  [8:0] dest_11_V_d0;
output  [11:0] dest_12_V_address0;
output   dest_12_V_ce0;
output   dest_12_V_we0;
output  [8:0] dest_12_V_d0;
output  [11:0] dest_13_V_address0;
output   dest_13_V_ce0;
output   dest_13_V_we0;
output  [8:0] dest_13_V_d0;
output  [11:0] dest_14_V_address0;
output   dest_14_V_ce0;
output   dest_14_V_we0;
output  [8:0] dest_14_V_d0;
output  [11:0] dest_15_V_address0;
output   dest_15_V_ce0;
output   dest_15_V_we0;
output  [8:0] dest_15_V_d0;
output  [11:0] dest_16_V_address0;
output   dest_16_V_ce0;
output   dest_16_V_we0;
output  [8:0] dest_16_V_d0;
output  [11:0] dest_17_V_address0;
output   dest_17_V_ce0;
output   dest_17_V_we0;
output  [8:0] dest_17_V_d0;
output  [11:0] dest_18_V_address0;
output   dest_18_V_ce0;
output   dest_18_V_we0;
output  [8:0] dest_18_V_d0;
output  [11:0] dest_19_V_address0;
output   dest_19_V_ce0;
output   dest_19_V_we0;
output  [8:0] dest_19_V_d0;
output  [11:0] dest_20_V_address0;
output   dest_20_V_ce0;
output   dest_20_V_we0;
output  [8:0] dest_20_V_d0;
output  [11:0] dest_21_V_address0;
output   dest_21_V_ce0;
output   dest_21_V_we0;
output  [8:0] dest_21_V_d0;
output  [11:0] dest_22_V_address0;
output   dest_22_V_ce0;
output   dest_22_V_we0;
output  [8:0] dest_22_V_d0;
output  [11:0] dest_23_V_address0;
output   dest_23_V_ce0;
output   dest_23_V_we0;
output  [8:0] dest_23_V_d0;
output  [11:0] dest_24_V_address0;
output   dest_24_V_ce0;
output   dest_24_V_we0;
output  [8:0] dest_24_V_d0;
output  [11:0] dest_25_V_address0;
output   dest_25_V_ce0;
output   dest_25_V_we0;
output  [8:0] dest_25_V_d0;
output  [11:0] dest_26_V_address0;
output   dest_26_V_ce0;
output   dest_26_V_we0;
output  [8:0] dest_26_V_d0;
output  [11:0] dest_27_V_address0;
output   dest_27_V_ce0;
output   dest_27_V_we0;
output  [8:0] dest_27_V_d0;
output  [11:0] dest_28_V_address0;
output   dest_28_V_ce0;
output   dest_28_V_we0;
output  [8:0] dest_28_V_d0;
output  [11:0] dest_29_V_address0;
output   dest_29_V_ce0;
output   dest_29_V_we0;
output  [8:0] dest_29_V_d0;
output  [11:0] dest_30_V_address0;
output   dest_30_V_ce0;
output   dest_30_V_we0;
output  [8:0] dest_30_V_d0;
output  [11:0] dest_31_V_address0;
output   dest_31_V_ce0;
output   dest_31_V_we0;
output  [8:0] dest_31_V_d0;
output   m_axi_src_V_AWVALID;
input   m_axi_src_V_AWREADY;
output  [31:0] m_axi_src_V_AWADDR;
output  [0:0] m_axi_src_V_AWID;
output  [31:0] m_axi_src_V_AWLEN;
output  [2:0] m_axi_src_V_AWSIZE;
output  [1:0] m_axi_src_V_AWBURST;
output  [1:0] m_axi_src_V_AWLOCK;
output  [3:0] m_axi_src_V_AWCACHE;
output  [2:0] m_axi_src_V_AWPROT;
output  [3:0] m_axi_src_V_AWQOS;
output  [3:0] m_axi_src_V_AWREGION;
output  [0:0] m_axi_src_V_AWUSER;
output   m_axi_src_V_WVALID;
input   m_axi_src_V_WREADY;
output  [255:0] m_axi_src_V_WDATA;
output  [31:0] m_axi_src_V_WSTRB;
output   m_axi_src_V_WLAST;
output  [0:0] m_axi_src_V_WID;
output  [0:0] m_axi_src_V_WUSER;
output   m_axi_src_V_ARVALID;
input   m_axi_src_V_ARREADY;
output  [31:0] m_axi_src_V_ARADDR;
output  [0:0] m_axi_src_V_ARID;
output  [31:0] m_axi_src_V_ARLEN;
output  [2:0] m_axi_src_V_ARSIZE;
output  [1:0] m_axi_src_V_ARBURST;
output  [1:0] m_axi_src_V_ARLOCK;
output  [3:0] m_axi_src_V_ARCACHE;
output  [2:0] m_axi_src_V_ARPROT;
output  [3:0] m_axi_src_V_ARQOS;
output  [3:0] m_axi_src_V_ARREGION;
output  [0:0] m_axi_src_V_ARUSER;
input   m_axi_src_V_RVALID;
output   m_axi_src_V_RREADY;
input  [255:0] m_axi_src_V_RDATA;
input   m_axi_src_V_RLAST;
input  [0:0] m_axi_src_V_RID;
input  [0:0] m_axi_src_V_RUSER;
input  [1:0] m_axi_src_V_RRESP;
input   m_axi_src_V_BVALID;
output   m_axi_src_V_BREADY;
input  [1:0] m_axi_src_V_BRESP;
input  [0:0] m_axi_src_V_BID;
input  [0:0] m_axi_src_V_BUSER;
input  [26:0] src_V_offset;
input  [7:0] buf_id;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dest_0_V_ce0;
reg dest_0_V_we0;
reg dest_1_V_ce0;
reg dest_1_V_we0;
reg dest_2_V_ce0;
reg dest_2_V_we0;
reg dest_3_V_ce0;
reg dest_3_V_we0;
reg dest_4_V_ce0;
reg dest_4_V_we0;
reg dest_5_V_ce0;
reg dest_5_V_we0;
reg dest_6_V_ce0;
reg dest_6_V_we0;
reg dest_7_V_ce0;
reg dest_7_V_we0;
reg dest_8_V_ce0;
reg dest_8_V_we0;
reg dest_9_V_ce0;
reg dest_9_V_we0;
reg dest_10_V_ce0;
reg dest_10_V_we0;
reg dest_11_V_ce0;
reg dest_11_V_we0;
reg dest_12_V_ce0;
reg dest_12_V_we0;
reg dest_13_V_ce0;
reg dest_13_V_we0;
reg dest_14_V_ce0;
reg dest_14_V_we0;
reg dest_15_V_ce0;
reg dest_15_V_we0;
reg dest_16_V_ce0;
reg dest_16_V_we0;
reg dest_17_V_ce0;
reg dest_17_V_we0;
reg dest_18_V_ce0;
reg dest_18_V_we0;
reg dest_19_V_ce0;
reg dest_19_V_we0;
reg dest_20_V_ce0;
reg dest_20_V_we0;
reg dest_21_V_ce0;
reg dest_21_V_we0;
reg dest_22_V_ce0;
reg dest_22_V_we0;
reg dest_23_V_ce0;
reg dest_23_V_we0;
reg dest_24_V_ce0;
reg dest_24_V_we0;
reg dest_25_V_ce0;
reg dest_25_V_we0;
reg dest_26_V_ce0;
reg dest_26_V_we0;
reg dest_27_V_ce0;
reg dest_27_V_we0;
reg dest_28_V_ce0;
reg dest_28_V_we0;
reg dest_29_V_ce0;
reg dest_29_V_we0;
reg dest_30_V_ce0;
reg dest_30_V_we0;
reg dest_31_V_ce0;
reg dest_31_V_we0;
reg m_axi_src_V_ARVALID;
reg m_axi_src_V_RREADY;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_V_blk_n_AR;
reg    ap_enable_reg_pp0_iter16;
wire    ap_block_pp0_stage0;
reg   [0:0] empty_65_reg_1393;
reg    src_V_blk_n_R;
reg    ap_enable_reg_pp0_iter23;
reg   [0:0] icmp_ln355_reg_1357;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter22_reg;
reg   [11:0] indvar_flatten_reg_698;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
reg    ap_block_state18_io;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
reg    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
reg    ap_block_pp0_stage0_11001;
reg   [11:0] src_ptr_0_rec_reg_710;
reg   [5:0] h_0_reg_721;
reg   [6:0] w_0_reg_732;
wire   [18:0] mul_ln355_fu_1333_p2;
reg   [18:0] mul_ln355_reg_1347;
wire   [27:0] zext_ln355_2_fu_747_p1;
reg   [27:0] zext_ln355_2_reg_1352;
wire   [0:0] icmp_ln355_fu_751_p2;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter1_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter2_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter3_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter4_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter5_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter6_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter7_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter8_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter9_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter10_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter11_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter12_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter13_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter14_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter15_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter16_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter17_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter18_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter19_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter20_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter21_reg;
reg   [0:0] icmp_ln355_reg_1357_pp0_iter23_reg;
wire   [11:0] add_ln355_1_fu_757_p2;
reg   [11:0] add_ln355_1_reg_1361;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] select_ln355_fu_781_p3;
reg   [6:0] select_ln355_reg_1366;
reg   [6:0] select_ln355_reg_1366_pp0_iter1_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter2_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter3_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter4_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter5_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter6_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter7_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter8_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter9_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter10_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter11_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter12_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter13_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter14_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter15_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter16_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter17_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter18_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter19_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter20_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter21_reg;
reg   [6:0] select_ln355_reg_1366_pp0_iter22_reg;
wire   [11:0] select_ln355_1_fu_789_p3;
reg   [11:0] select_ln355_1_reg_1371;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter1_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter2_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter3_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter4_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter5_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter6_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter7_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter8_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter9_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter10_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter11_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter12_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter13_reg;
reg   [11:0] select_ln355_1_reg_1371_pp0_iter14_reg;
wire   [5:0] select_ln355_2_fu_797_p3;
reg   [5:0] select_ln355_2_reg_1377;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter1_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter2_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter3_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter4_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter5_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter6_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter7_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter8_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter9_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter10_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter11_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter12_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter13_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter14_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter15_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter16_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter17_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter18_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter19_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter20_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter21_reg;
reg   [5:0] select_ln355_2_reg_1377_pp0_iter22_reg;
wire   [6:0] w_fu_811_p2;
wire   [27:0] add_ln360_fu_829_p2;
reg   [27:0] add_ln360_reg_1388;
wire   [0:0] empty_65_fu_834_p2;
wire   [12:0] grp_fu_1339_p3;
reg   [12:0] add_ln203_reg_1403;
wire   [7:0] trunc_ln647_fu_856_p1;
reg   [7:0] trunc_ln647_reg_1408;
reg   [7:0] p_Result_i_reg_1413;
reg   [7:0] p_Result_i51_reg_1418;
reg   [7:0] p_Result_i52_reg_1423;
reg   [7:0] p_Result_i53_reg_1428;
reg   [7:0] p_Result_i54_reg_1433;
reg   [7:0] p_Result_i55_reg_1438;
reg   [7:0] p_Result_i56_reg_1443;
reg   [7:0] p_Result_i57_reg_1448;
reg   [7:0] p_Result_i58_reg_1453;
reg   [7:0] p_Result_i59_reg_1458;
reg   [7:0] p_Result_i60_reg_1463;
reg   [7:0] p_Result_i61_reg_1468;
reg   [7:0] p_Result_i62_reg_1473;
reg   [7:0] p_Result_i63_reg_1478;
reg   [7:0] p_Result_i64_reg_1483;
reg   [7:0] p_Result_i65_reg_1488;
reg   [7:0] p_Result_i66_reg_1493;
reg   [7:0] p_Result_i67_reg_1498;
reg   [7:0] p_Result_i68_reg_1503;
reg   [7:0] p_Result_i69_reg_1508;
reg   [7:0] p_Result_i70_reg_1513;
reg   [7:0] p_Result_i71_reg_1518;
reg   [7:0] p_Result_i72_reg_1523;
reg   [7:0] p_Result_i73_reg_1528;
reg   [7:0] p_Result_i74_reg_1533;
reg   [7:0] p_Result_i75_reg_1538;
reg   [7:0] p_Result_i76_reg_1543;
reg   [7:0] p_Result_i77_reg_1548;
reg   [7:0] p_Result_i78_reg_1553;
reg   [7:0] p_Result_i79_reg_1558;
reg   [7:0] p_Result_i80_reg_1563;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter24;
reg   [11:0] ap_phi_mux_indvar_flatten_phi_fu_702_p4;
reg   [11:0] ap_phi_mux_src_ptr_0_rec_phi_fu_714_p4;
reg   [5:0] ap_phi_mux_h_0_phi_fu_725_p4;
wire  signed [63:0] sext_ln203_fu_1170_p1;
wire   [63:0] zext_ln360_fu_840_p1;
wire   [0:0] icmp_ln357_fu_775_p2;
wire   [11:0] add_ln366_fu_763_p2;
wire   [5:0] h_fu_769_p2;
wire   [7:0] grp_fu_805_p1;
wire   [18:0] zext_ln355_1_fu_817_p1;
(* use_dsp48 = "no" *) wire   [18:0] add_ln355_fu_820_p2;
wire   [27:0] zext_ln357_fu_825_p1;
wire   [11:0] grp_fu_805_p2;
wire   [7:0] mul_ln355_fu_1333_p0;
wire   [12:0] mul_ln355_fu_1333_p1;
wire   [5:0] grp_fu_1339_p0;
wire   [7:0] grp_fu_1339_p1;
wire   [6:0] grp_fu_1339_p2;
reg    grp_fu_805_ce;
wire    ap_CS_fsm_state27;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [12:0] grp_fu_1339_p00;
wire   [12:0] grp_fu_1339_p20;
wire   [18:0] mul_ln355_fu_1333_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
end

SkyNet_urem_12ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 12 ))
SkyNet_urem_12ns_cud_U1148(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_indvar_flatten_phi_fu_702_p4),
    .din1(grp_fu_805_p1),
    .ce(grp_fu_805_ce),
    .dout(grp_fu_805_p2)
);

SkyNet_mul_mul_8nqcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 19 ))
SkyNet_mul_mul_8nqcK_U1149(
    .din0(mul_ln355_fu_1333_p0),
    .din1(mul_ln355_fu_1333_p1),
    .dout(mul_ln355_fu_1333_p2)
);

SkyNet_mac_muladdeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 13 ))
SkyNet_mac_muladdeOg_U1150(
    .din0(grp_fu_1339_p0),
    .din1(grp_fu_1339_p1),
    .din2(grp_fu_1339_p2),
    .dout(grp_fu_1339_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter24 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_0_reg_721 <= select_ln355_2_reg_1377;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        h_0_reg_721 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_698 <= add_ln355_1_reg_1361;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_698 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_ptr_0_rec_reg_710 <= select_ln355_1_reg_1371;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        src_ptr_0_rec_reg_710 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_fu_751_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_0_reg_732 <= w_fu_811_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_0_reg_732 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter22_reg == 1'd0) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        add_ln203_reg_1403 <= grp_fu_1339_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln355_1_reg_1361 <= add_ln355_1_fu_757_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter14_reg == 1'd0))) begin
        add_ln360_reg_1388 <= add_ln360_fu_829_p2;
        empty_65_reg_1393 <= empty_65_fu_834_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln355_reg_1357 <= icmp_ln355_fu_751_p2;
        icmp_ln355_reg_1357_pp0_iter1_reg <= icmp_ln355_reg_1357;
        select_ln355_1_reg_1371_pp0_iter1_reg <= select_ln355_1_reg_1371;
        select_ln355_2_reg_1377_pp0_iter1_reg <= select_ln355_2_reg_1377;
        select_ln355_reg_1366_pp0_iter1_reg <= select_ln355_reg_1366;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln355_reg_1357_pp0_iter10_reg <= icmp_ln355_reg_1357_pp0_iter9_reg;
        icmp_ln355_reg_1357_pp0_iter11_reg <= icmp_ln355_reg_1357_pp0_iter10_reg;
        icmp_ln355_reg_1357_pp0_iter12_reg <= icmp_ln355_reg_1357_pp0_iter11_reg;
        icmp_ln355_reg_1357_pp0_iter13_reg <= icmp_ln355_reg_1357_pp0_iter12_reg;
        icmp_ln355_reg_1357_pp0_iter14_reg <= icmp_ln355_reg_1357_pp0_iter13_reg;
        icmp_ln355_reg_1357_pp0_iter15_reg <= icmp_ln355_reg_1357_pp0_iter14_reg;
        icmp_ln355_reg_1357_pp0_iter16_reg <= icmp_ln355_reg_1357_pp0_iter15_reg;
        icmp_ln355_reg_1357_pp0_iter17_reg <= icmp_ln355_reg_1357_pp0_iter16_reg;
        icmp_ln355_reg_1357_pp0_iter18_reg <= icmp_ln355_reg_1357_pp0_iter17_reg;
        icmp_ln355_reg_1357_pp0_iter19_reg <= icmp_ln355_reg_1357_pp0_iter18_reg;
        icmp_ln355_reg_1357_pp0_iter20_reg <= icmp_ln355_reg_1357_pp0_iter19_reg;
        icmp_ln355_reg_1357_pp0_iter21_reg <= icmp_ln355_reg_1357_pp0_iter20_reg;
        icmp_ln355_reg_1357_pp0_iter22_reg <= icmp_ln355_reg_1357_pp0_iter21_reg;
        icmp_ln355_reg_1357_pp0_iter23_reg <= icmp_ln355_reg_1357_pp0_iter22_reg;
        icmp_ln355_reg_1357_pp0_iter2_reg <= icmp_ln355_reg_1357_pp0_iter1_reg;
        icmp_ln355_reg_1357_pp0_iter3_reg <= icmp_ln355_reg_1357_pp0_iter2_reg;
        icmp_ln355_reg_1357_pp0_iter4_reg <= icmp_ln355_reg_1357_pp0_iter3_reg;
        icmp_ln355_reg_1357_pp0_iter5_reg <= icmp_ln355_reg_1357_pp0_iter4_reg;
        icmp_ln355_reg_1357_pp0_iter6_reg <= icmp_ln355_reg_1357_pp0_iter5_reg;
        icmp_ln355_reg_1357_pp0_iter7_reg <= icmp_ln355_reg_1357_pp0_iter6_reg;
        icmp_ln355_reg_1357_pp0_iter8_reg <= icmp_ln355_reg_1357_pp0_iter7_reg;
        icmp_ln355_reg_1357_pp0_iter9_reg <= icmp_ln355_reg_1357_pp0_iter8_reg;
        select_ln355_1_reg_1371_pp0_iter10_reg <= select_ln355_1_reg_1371_pp0_iter9_reg;
        select_ln355_1_reg_1371_pp0_iter11_reg <= select_ln355_1_reg_1371_pp0_iter10_reg;
        select_ln355_1_reg_1371_pp0_iter12_reg <= select_ln355_1_reg_1371_pp0_iter11_reg;
        select_ln355_1_reg_1371_pp0_iter13_reg <= select_ln355_1_reg_1371_pp0_iter12_reg;
        select_ln355_1_reg_1371_pp0_iter14_reg <= select_ln355_1_reg_1371_pp0_iter13_reg;
        select_ln355_1_reg_1371_pp0_iter2_reg <= select_ln355_1_reg_1371_pp0_iter1_reg;
        select_ln355_1_reg_1371_pp0_iter3_reg <= select_ln355_1_reg_1371_pp0_iter2_reg;
        select_ln355_1_reg_1371_pp0_iter4_reg <= select_ln355_1_reg_1371_pp0_iter3_reg;
        select_ln355_1_reg_1371_pp0_iter5_reg <= select_ln355_1_reg_1371_pp0_iter4_reg;
        select_ln355_1_reg_1371_pp0_iter6_reg <= select_ln355_1_reg_1371_pp0_iter5_reg;
        select_ln355_1_reg_1371_pp0_iter7_reg <= select_ln355_1_reg_1371_pp0_iter6_reg;
        select_ln355_1_reg_1371_pp0_iter8_reg <= select_ln355_1_reg_1371_pp0_iter7_reg;
        select_ln355_1_reg_1371_pp0_iter9_reg <= select_ln355_1_reg_1371_pp0_iter8_reg;
        select_ln355_2_reg_1377_pp0_iter10_reg <= select_ln355_2_reg_1377_pp0_iter9_reg;
        select_ln355_2_reg_1377_pp0_iter11_reg <= select_ln355_2_reg_1377_pp0_iter10_reg;
        select_ln355_2_reg_1377_pp0_iter12_reg <= select_ln355_2_reg_1377_pp0_iter11_reg;
        select_ln355_2_reg_1377_pp0_iter13_reg <= select_ln355_2_reg_1377_pp0_iter12_reg;
        select_ln355_2_reg_1377_pp0_iter14_reg <= select_ln355_2_reg_1377_pp0_iter13_reg;
        select_ln355_2_reg_1377_pp0_iter15_reg <= select_ln355_2_reg_1377_pp0_iter14_reg;
        select_ln355_2_reg_1377_pp0_iter16_reg <= select_ln355_2_reg_1377_pp0_iter15_reg;
        select_ln355_2_reg_1377_pp0_iter17_reg <= select_ln355_2_reg_1377_pp0_iter16_reg;
        select_ln355_2_reg_1377_pp0_iter18_reg <= select_ln355_2_reg_1377_pp0_iter17_reg;
        select_ln355_2_reg_1377_pp0_iter19_reg <= select_ln355_2_reg_1377_pp0_iter18_reg;
        select_ln355_2_reg_1377_pp0_iter20_reg <= select_ln355_2_reg_1377_pp0_iter19_reg;
        select_ln355_2_reg_1377_pp0_iter21_reg <= select_ln355_2_reg_1377_pp0_iter20_reg;
        select_ln355_2_reg_1377_pp0_iter22_reg <= select_ln355_2_reg_1377_pp0_iter21_reg;
        select_ln355_2_reg_1377_pp0_iter2_reg <= select_ln355_2_reg_1377_pp0_iter1_reg;
        select_ln355_2_reg_1377_pp0_iter3_reg <= select_ln355_2_reg_1377_pp0_iter2_reg;
        select_ln355_2_reg_1377_pp0_iter4_reg <= select_ln355_2_reg_1377_pp0_iter3_reg;
        select_ln355_2_reg_1377_pp0_iter5_reg <= select_ln355_2_reg_1377_pp0_iter4_reg;
        select_ln355_2_reg_1377_pp0_iter6_reg <= select_ln355_2_reg_1377_pp0_iter5_reg;
        select_ln355_2_reg_1377_pp0_iter7_reg <= select_ln355_2_reg_1377_pp0_iter6_reg;
        select_ln355_2_reg_1377_pp0_iter8_reg <= select_ln355_2_reg_1377_pp0_iter7_reg;
        select_ln355_2_reg_1377_pp0_iter9_reg <= select_ln355_2_reg_1377_pp0_iter8_reg;
        select_ln355_reg_1366_pp0_iter10_reg <= select_ln355_reg_1366_pp0_iter9_reg;
        select_ln355_reg_1366_pp0_iter11_reg <= select_ln355_reg_1366_pp0_iter10_reg;
        select_ln355_reg_1366_pp0_iter12_reg <= select_ln355_reg_1366_pp0_iter11_reg;
        select_ln355_reg_1366_pp0_iter13_reg <= select_ln355_reg_1366_pp0_iter12_reg;
        select_ln355_reg_1366_pp0_iter14_reg <= select_ln355_reg_1366_pp0_iter13_reg;
        select_ln355_reg_1366_pp0_iter15_reg <= select_ln355_reg_1366_pp0_iter14_reg;
        select_ln355_reg_1366_pp0_iter16_reg <= select_ln355_reg_1366_pp0_iter15_reg;
        select_ln355_reg_1366_pp0_iter17_reg <= select_ln355_reg_1366_pp0_iter16_reg;
        select_ln355_reg_1366_pp0_iter18_reg <= select_ln355_reg_1366_pp0_iter17_reg;
        select_ln355_reg_1366_pp0_iter19_reg <= select_ln355_reg_1366_pp0_iter18_reg;
        select_ln355_reg_1366_pp0_iter20_reg <= select_ln355_reg_1366_pp0_iter19_reg;
        select_ln355_reg_1366_pp0_iter21_reg <= select_ln355_reg_1366_pp0_iter20_reg;
        select_ln355_reg_1366_pp0_iter22_reg <= select_ln355_reg_1366_pp0_iter21_reg;
        select_ln355_reg_1366_pp0_iter2_reg <= select_ln355_reg_1366_pp0_iter1_reg;
        select_ln355_reg_1366_pp0_iter3_reg <= select_ln355_reg_1366_pp0_iter2_reg;
        select_ln355_reg_1366_pp0_iter4_reg <= select_ln355_reg_1366_pp0_iter3_reg;
        select_ln355_reg_1366_pp0_iter5_reg <= select_ln355_reg_1366_pp0_iter4_reg;
        select_ln355_reg_1366_pp0_iter6_reg <= select_ln355_reg_1366_pp0_iter5_reg;
        select_ln355_reg_1366_pp0_iter7_reg <= select_ln355_reg_1366_pp0_iter6_reg;
        select_ln355_reg_1366_pp0_iter8_reg <= select_ln355_reg_1366_pp0_iter7_reg;
        select_ln355_reg_1366_pp0_iter9_reg <= select_ln355_reg_1366_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln355_reg_1347 <= mul_ln355_fu_1333_p2;
        zext_ln355_2_reg_1352[26 : 0] <= zext_ln355_2_fu_747_p1[26 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter22_reg == 1'd0))) begin
        p_Result_i51_reg_1418 <= {{m_axi_src_V_RDATA[23:16]}};
        p_Result_i52_reg_1423 <= {{m_axi_src_V_RDATA[31:24]}};
        p_Result_i53_reg_1428 <= {{m_axi_src_V_RDATA[39:32]}};
        p_Result_i54_reg_1433 <= {{m_axi_src_V_RDATA[47:40]}};
        p_Result_i55_reg_1438 <= {{m_axi_src_V_RDATA[55:48]}};
        p_Result_i56_reg_1443 <= {{m_axi_src_V_RDATA[63:56]}};
        p_Result_i57_reg_1448 <= {{m_axi_src_V_RDATA[71:64]}};
        p_Result_i58_reg_1453 <= {{m_axi_src_V_RDATA[79:72]}};
        p_Result_i59_reg_1458 <= {{m_axi_src_V_RDATA[87:80]}};
        p_Result_i60_reg_1463 <= {{m_axi_src_V_RDATA[95:88]}};
        p_Result_i61_reg_1468 <= {{m_axi_src_V_RDATA[103:96]}};
        p_Result_i62_reg_1473 <= {{m_axi_src_V_RDATA[111:104]}};
        p_Result_i63_reg_1478 <= {{m_axi_src_V_RDATA[119:112]}};
        p_Result_i64_reg_1483 <= {{m_axi_src_V_RDATA[127:120]}};
        p_Result_i65_reg_1488 <= {{m_axi_src_V_RDATA[135:128]}};
        p_Result_i66_reg_1493 <= {{m_axi_src_V_RDATA[143:136]}};
        p_Result_i67_reg_1498 <= {{m_axi_src_V_RDATA[151:144]}};
        p_Result_i68_reg_1503 <= {{m_axi_src_V_RDATA[159:152]}};
        p_Result_i69_reg_1508 <= {{m_axi_src_V_RDATA[167:160]}};
        p_Result_i70_reg_1513 <= {{m_axi_src_V_RDATA[175:168]}};
        p_Result_i71_reg_1518 <= {{m_axi_src_V_RDATA[183:176]}};
        p_Result_i72_reg_1523 <= {{m_axi_src_V_RDATA[191:184]}};
        p_Result_i73_reg_1528 <= {{m_axi_src_V_RDATA[199:192]}};
        p_Result_i74_reg_1533 <= {{m_axi_src_V_RDATA[207:200]}};
        p_Result_i75_reg_1538 <= {{m_axi_src_V_RDATA[215:208]}};
        p_Result_i76_reg_1543 <= {{m_axi_src_V_RDATA[223:216]}};
        p_Result_i77_reg_1548 <= {{m_axi_src_V_RDATA[231:224]}};
        p_Result_i78_reg_1553 <= {{m_axi_src_V_RDATA[239:232]}};
        p_Result_i79_reg_1558 <= {{m_axi_src_V_RDATA[247:240]}};
        p_Result_i80_reg_1563 <= {{m_axi_src_V_RDATA[255:248]}};
        p_Result_i_reg_1413 <= {{m_axi_src_V_RDATA[15:8]}};
        trunc_ln647_reg_1408 <= trunc_ln647_fu_856_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_fu_751_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln355_1_reg_1371 <= select_ln355_1_fu_789_p3;
        select_ln355_2_reg_1377 <= select_ln355_2_fu_797_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_fu_751_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln355_reg_1366 <= select_ln355_fu_781_p3;
    end
end

always @ (*) begin
    if ((icmp_ln355_fu_751_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln355_reg_1357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_h_0_phi_fu_725_p4 = select_ln355_2_reg_1377;
    end else begin
        ap_phi_mux_h_0_phi_fu_725_p4 = h_0_reg_721;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln355_reg_1357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_702_p4 = add_ln355_1_reg_1361;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_702_p4 = indvar_flatten_reg_698;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln355_reg_1357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_src_ptr_0_rec_phi_fu_714_p4 = select_ln355_1_reg_1371;
    end else begin
        ap_phi_mux_src_ptr_0_rec_phi_fu_714_p4 = src_ptr_0_rec_reg_710;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_0_V_ce0 = 1'b1;
    end else begin
        dest_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_0_V_we0 = 1'b1;
    end else begin
        dest_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_10_V_ce0 = 1'b1;
    end else begin
        dest_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_10_V_we0 = 1'b1;
    end else begin
        dest_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_11_V_ce0 = 1'b1;
    end else begin
        dest_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_11_V_we0 = 1'b1;
    end else begin
        dest_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_12_V_ce0 = 1'b1;
    end else begin
        dest_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_12_V_we0 = 1'b1;
    end else begin
        dest_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_13_V_ce0 = 1'b1;
    end else begin
        dest_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_13_V_we0 = 1'b1;
    end else begin
        dest_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_14_V_ce0 = 1'b1;
    end else begin
        dest_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_14_V_we0 = 1'b1;
    end else begin
        dest_14_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_15_V_ce0 = 1'b1;
    end else begin
        dest_15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_15_V_we0 = 1'b1;
    end else begin
        dest_15_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_16_V_ce0 = 1'b1;
    end else begin
        dest_16_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_16_V_we0 = 1'b1;
    end else begin
        dest_16_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_17_V_ce0 = 1'b1;
    end else begin
        dest_17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_17_V_we0 = 1'b1;
    end else begin
        dest_17_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_18_V_ce0 = 1'b1;
    end else begin
        dest_18_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_18_V_we0 = 1'b1;
    end else begin
        dest_18_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_19_V_ce0 = 1'b1;
    end else begin
        dest_19_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_19_V_we0 = 1'b1;
    end else begin
        dest_19_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_1_V_ce0 = 1'b1;
    end else begin
        dest_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_1_V_we0 = 1'b1;
    end else begin
        dest_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_20_V_ce0 = 1'b1;
    end else begin
        dest_20_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_20_V_we0 = 1'b1;
    end else begin
        dest_20_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_21_V_ce0 = 1'b1;
    end else begin
        dest_21_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_21_V_we0 = 1'b1;
    end else begin
        dest_21_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_22_V_ce0 = 1'b1;
    end else begin
        dest_22_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_22_V_we0 = 1'b1;
    end else begin
        dest_22_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_23_V_ce0 = 1'b1;
    end else begin
        dest_23_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_23_V_we0 = 1'b1;
    end else begin
        dest_23_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_24_V_ce0 = 1'b1;
    end else begin
        dest_24_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_24_V_we0 = 1'b1;
    end else begin
        dest_24_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_25_V_ce0 = 1'b1;
    end else begin
        dest_25_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_25_V_we0 = 1'b1;
    end else begin
        dest_25_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_26_V_ce0 = 1'b1;
    end else begin
        dest_26_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_26_V_we0 = 1'b1;
    end else begin
        dest_26_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_27_V_ce0 = 1'b1;
    end else begin
        dest_27_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_27_V_we0 = 1'b1;
    end else begin
        dest_27_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_28_V_ce0 = 1'b1;
    end else begin
        dest_28_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_28_V_we0 = 1'b1;
    end else begin
        dest_28_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_29_V_ce0 = 1'b1;
    end else begin
        dest_29_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_29_V_we0 = 1'b1;
    end else begin
        dest_29_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_2_V_ce0 = 1'b1;
    end else begin
        dest_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_2_V_we0 = 1'b1;
    end else begin
        dest_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_30_V_ce0 = 1'b1;
    end else begin
        dest_30_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_30_V_we0 = 1'b1;
    end else begin
        dest_30_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_31_V_ce0 = 1'b1;
    end else begin
        dest_31_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_31_V_we0 = 1'b1;
    end else begin
        dest_31_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_3_V_ce0 = 1'b1;
    end else begin
        dest_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_3_V_we0 = 1'b1;
    end else begin
        dest_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_4_V_ce0 = 1'b1;
    end else begin
        dest_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_4_V_we0 = 1'b1;
    end else begin
        dest_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_5_V_ce0 = 1'b1;
    end else begin
        dest_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_5_V_we0 = 1'b1;
    end else begin
        dest_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_6_V_ce0 = 1'b1;
    end else begin
        dest_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_6_V_we0 = 1'b1;
    end else begin
        dest_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_7_V_ce0 = 1'b1;
    end else begin
        dest_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_7_V_we0 = 1'b1;
    end else begin
        dest_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_8_V_ce0 = 1'b1;
    end else begin
        dest_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_8_V_we0 = 1'b1;
    end else begin
        dest_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_9_V_ce0 = 1'b1;
    end else begin
        dest_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter23_reg == 1'd0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        dest_9_V_we0 = 1'b1;
    end else begin
        dest_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_805_ce = 1'b1;
    end else begin
        grp_fu_805_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_65_reg_1393 == 1'd1) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        m_axi_src_V_ARVALID = 1'b1;
    end else begin
        m_axi_src_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_1357_pp0_iter22_reg == 1'd0) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        m_axi_src_V_RREADY = 1'b1;
    end else begin
        m_axi_src_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((empty_65_reg_1393 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        src_V_blk_n_AR = m_axi_src_V_ARREADY;
    end else begin
        src_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln355_reg_1357_pp0_iter22_reg == 1'd0) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        src_V_blk_n_R = m_axi_src_V_RVALID;
    end else begin
        src_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln355_fu_751_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln355_fu_751_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln355_1_fu_757_p2 = (ap_phi_mux_indvar_flatten_phi_fu_702_p4 + 12'd1);

assign add_ln355_fu_820_p2 = (zext_ln355_1_fu_817_p1 + mul_ln355_reg_1347);

assign add_ln360_fu_829_p2 = (zext_ln355_2_reg_1352 + zext_ln357_fu_825_p1);

assign add_ln366_fu_763_p2 = (ap_phi_mux_src_ptr_0_rec_phi_fu_714_p4 + 12'd84);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_src_V_RVALID == 1'b0) & (icmp_ln355_reg_1357_pp0_iter22_reg == 1'd0) & (ap_enable_reg_pp0_iter23 == 1'b1)) | ((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state18_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_src_V_RVALID == 1'b0) & (icmp_ln355_reg_1357_pp0_iter22_reg == 1'd0) & (ap_enable_reg_pp0_iter23 == 1'b1)) | ((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state18_io)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = ((empty_65_reg_1393 == 1'd1) & (m_axi_src_V_ARREADY == 1'b0));
end

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp0_stage0_iter23 = ((m_axi_src_V_RVALID == 1'b0) & (icmp_ln355_reg_1357_pp0_iter22_reg == 1'd0));
end

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dest_0_V_address0 = sext_ln203_fu_1170_p1;

assign dest_0_V_d0 = trunc_ln647_reg_1408;

assign dest_10_V_address0 = sext_ln203_fu_1170_p1;

assign dest_10_V_d0 = p_Result_i59_reg_1458;

assign dest_11_V_address0 = sext_ln203_fu_1170_p1;

assign dest_11_V_d0 = p_Result_i60_reg_1463;

assign dest_12_V_address0 = sext_ln203_fu_1170_p1;

assign dest_12_V_d0 = p_Result_i61_reg_1468;

assign dest_13_V_address0 = sext_ln203_fu_1170_p1;

assign dest_13_V_d0 = p_Result_i62_reg_1473;

assign dest_14_V_address0 = sext_ln203_fu_1170_p1;

assign dest_14_V_d0 = p_Result_i63_reg_1478;

assign dest_15_V_address0 = sext_ln203_fu_1170_p1;

assign dest_15_V_d0 = p_Result_i64_reg_1483;

assign dest_16_V_address0 = sext_ln203_fu_1170_p1;

assign dest_16_V_d0 = p_Result_i65_reg_1488;

assign dest_17_V_address0 = sext_ln203_fu_1170_p1;

assign dest_17_V_d0 = p_Result_i66_reg_1493;

assign dest_18_V_address0 = sext_ln203_fu_1170_p1;

assign dest_18_V_d0 = p_Result_i67_reg_1498;

assign dest_19_V_address0 = sext_ln203_fu_1170_p1;

assign dest_19_V_d0 = p_Result_i68_reg_1503;

assign dest_1_V_address0 = sext_ln203_fu_1170_p1;

assign dest_1_V_d0 = p_Result_i_reg_1413;

assign dest_20_V_address0 = sext_ln203_fu_1170_p1;

assign dest_20_V_d0 = p_Result_i69_reg_1508;

assign dest_21_V_address0 = sext_ln203_fu_1170_p1;

assign dest_21_V_d0 = p_Result_i70_reg_1513;

assign dest_22_V_address0 = sext_ln203_fu_1170_p1;

assign dest_22_V_d0 = p_Result_i71_reg_1518;

assign dest_23_V_address0 = sext_ln203_fu_1170_p1;

assign dest_23_V_d0 = p_Result_i72_reg_1523;

assign dest_24_V_address0 = sext_ln203_fu_1170_p1;

assign dest_24_V_d0 = p_Result_i73_reg_1528;

assign dest_25_V_address0 = sext_ln203_fu_1170_p1;

assign dest_25_V_d0 = p_Result_i74_reg_1533;

assign dest_26_V_address0 = sext_ln203_fu_1170_p1;

assign dest_26_V_d0 = p_Result_i75_reg_1538;

assign dest_27_V_address0 = sext_ln203_fu_1170_p1;

assign dest_27_V_d0 = p_Result_i76_reg_1543;

assign dest_28_V_address0 = sext_ln203_fu_1170_p1;

assign dest_28_V_d0 = p_Result_i77_reg_1548;

assign dest_29_V_address0 = sext_ln203_fu_1170_p1;

assign dest_29_V_d0 = p_Result_i78_reg_1553;

assign dest_2_V_address0 = sext_ln203_fu_1170_p1;

assign dest_2_V_d0 = p_Result_i51_reg_1418;

assign dest_30_V_address0 = sext_ln203_fu_1170_p1;

assign dest_30_V_d0 = p_Result_i79_reg_1558;

assign dest_31_V_address0 = sext_ln203_fu_1170_p1;

assign dest_31_V_d0 = p_Result_i80_reg_1563;

assign dest_3_V_address0 = sext_ln203_fu_1170_p1;

assign dest_3_V_d0 = p_Result_i52_reg_1423;

assign dest_4_V_address0 = sext_ln203_fu_1170_p1;

assign dest_4_V_d0 = p_Result_i53_reg_1428;

assign dest_5_V_address0 = sext_ln203_fu_1170_p1;

assign dest_5_V_d0 = p_Result_i54_reg_1433;

assign dest_6_V_address0 = sext_ln203_fu_1170_p1;

assign dest_6_V_d0 = p_Result_i55_reg_1438;

assign dest_7_V_address0 = sext_ln203_fu_1170_p1;

assign dest_7_V_d0 = p_Result_i56_reg_1443;

assign dest_8_V_address0 = sext_ln203_fu_1170_p1;

assign dest_8_V_d0 = p_Result_i57_reg_1448;

assign dest_9_V_address0 = sext_ln203_fu_1170_p1;

assign dest_9_V_d0 = p_Result_i58_reg_1453;

assign empty_65_fu_834_p2 = ((grp_fu_805_p2 == 12'd0) ? 1'b1 : 1'b0);

assign grp_fu_1339_p0 = grp_fu_1339_p00;

assign grp_fu_1339_p00 = select_ln355_2_reg_1377_pp0_iter22_reg;

assign grp_fu_1339_p1 = 13'd84;

assign grp_fu_1339_p2 = grp_fu_1339_p20;

assign grp_fu_1339_p20 = select_ln355_reg_1366_pp0_iter22_reg;

assign grp_fu_805_p1 = 12'd84;

assign h_fu_769_p2 = (ap_phi_mux_h_0_phi_fu_725_p4 + 6'd1);

assign icmp_ln355_fu_751_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_702_p4 == 12'd3696) ? 1'b1 : 1'b0);

assign icmp_ln357_fu_775_p2 = ((w_0_reg_732 == 7'd84) ? 1'b1 : 1'b0);

assign m_axi_src_V_ARADDR = zext_ln360_fu_840_p1;

assign m_axi_src_V_ARBURST = 2'd0;

assign m_axi_src_V_ARCACHE = 4'd0;

assign m_axi_src_V_ARID = 1'd0;

assign m_axi_src_V_ARLEN = 32'd84;

assign m_axi_src_V_ARLOCK = 2'd0;

assign m_axi_src_V_ARPROT = 3'd0;

assign m_axi_src_V_ARQOS = 4'd0;

assign m_axi_src_V_ARREGION = 4'd0;

assign m_axi_src_V_ARSIZE = 3'd0;

assign m_axi_src_V_ARUSER = 1'd0;

assign m_axi_src_V_AWADDR = 32'd0;

assign m_axi_src_V_AWBURST = 2'd0;

assign m_axi_src_V_AWCACHE = 4'd0;

assign m_axi_src_V_AWID = 1'd0;

assign m_axi_src_V_AWLEN = 32'd0;

assign m_axi_src_V_AWLOCK = 2'd0;

assign m_axi_src_V_AWPROT = 3'd0;

assign m_axi_src_V_AWQOS = 4'd0;

assign m_axi_src_V_AWREGION = 4'd0;

assign m_axi_src_V_AWSIZE = 3'd0;

assign m_axi_src_V_AWUSER = 1'd0;

assign m_axi_src_V_AWVALID = 1'b0;

assign m_axi_src_V_BREADY = 1'b0;

assign m_axi_src_V_WDATA = 256'd0;

assign m_axi_src_V_WID = 1'd0;

assign m_axi_src_V_WLAST = 1'b0;

assign m_axi_src_V_WSTRB = 32'd0;

assign m_axi_src_V_WUSER = 1'd0;

assign m_axi_src_V_WVALID = 1'b0;

assign mul_ln355_fu_1333_p0 = mul_ln355_fu_1333_p00;

assign mul_ln355_fu_1333_p00 = buf_id;

assign mul_ln355_fu_1333_p1 = 19'd3696;

assign select_ln355_1_fu_789_p3 = ((icmp_ln357_fu_775_p2[0:0] === 1'b1) ? add_ln366_fu_763_p2 : ap_phi_mux_src_ptr_0_rec_phi_fu_714_p4);

assign select_ln355_2_fu_797_p3 = ((icmp_ln357_fu_775_p2[0:0] === 1'b1) ? h_fu_769_p2 : ap_phi_mux_h_0_phi_fu_725_p4);

assign select_ln355_fu_781_p3 = ((icmp_ln357_fu_775_p2[0:0] === 1'b1) ? 7'd0 : w_0_reg_732);

assign sext_ln203_fu_1170_p1 = $signed(add_ln203_reg_1403);

assign trunc_ln647_fu_856_p1 = m_axi_src_V_RDATA[7:0];

assign w_fu_811_p2 = (7'd1 + select_ln355_fu_781_p3);

assign zext_ln355_1_fu_817_p1 = select_ln355_1_reg_1371_pp0_iter14_reg;

assign zext_ln355_2_fu_747_p1 = src_V_offset;

assign zext_ln357_fu_825_p1 = add_ln355_fu_820_p2;

assign zext_ln360_fu_840_p1 = add_ln360_reg_1388;

always @ (posedge ap_clk) begin
    zext_ln355_2_reg_1352[27] <= 1'b0;
end

endmodule //load_buf_from_DDR
