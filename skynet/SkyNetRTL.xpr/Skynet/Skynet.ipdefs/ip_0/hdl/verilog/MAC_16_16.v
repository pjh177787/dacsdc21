// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MAC_16_16 (
        ap_clk,
        ap_rst,
        w1_V,
        b1_V,
        w2_V,
        b2_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [10:0] w1_V;
input  [8:0] b1_V;
input  [10:0] w2_V;
input  [8:0] b2_V;
output  [23:0] ap_return;
input   ap_ce;

reg[23:0] ap_return;

reg  signed [8:0] b2_V_read_reg_85;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg  signed [10:0] w2_V_read_reg_90;
wire  signed [19:0] r_V_51_fu_71_p2;
reg  signed [19:0] r_V_51_reg_95;
wire    ap_block_pp0_stage0;
wire  signed [19:0] grp_fu_77_p3;
wire   [23:0] tmp_V_fu_64_p3;
reg    ap_ce_reg;
reg   [23:0] ap_return_int_reg;

SkyNet_mul_mul_9sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 20 ))
SkyNet_mul_mul_9sfYi_U126(
    .din0(b1_V),
    .din1(w1_V),
    .dout(r_V_51_fu_71_p2)
);

SkyNet_mac_muladdg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
SkyNet_mac_muladdg8j_U127(
    .din0(b2_V_read_reg_85),
    .din1(w2_V_read_reg_90),
    .din2(r_V_51_reg_95),
    .dout(grp_fu_77_p3)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg[23 : 4] <= tmp_V_fu_64_p3[23 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b2_V_read_reg_85 <= b2_V;
        r_V_51_reg_95 <= r_V_51_fu_71_p2;
        w2_V_read_reg_90 <= w2_V;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = tmp_V_fu_64_p3;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign tmp_V_fu_64_p3 = {{grp_fu_77_p3}, {4'd0}};

always @ (posedge ap_clk) begin
    ap_return_int_reg[3:0] <= 4'b0000;
end

endmodule //MAC_16_16
