-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity load_image_chunk_bkb_rom is 
    generic(
             DWIDTH     : integer := 9; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of load_image_chunk_bkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "110000000", 1 => "110000001", 2 => "110000010", 3 => "110000011", 
    4 => "110000100", 5 => "110000101", 6 => "110000110", 7 => "110000111", 
    8 => "110001000", 9 => "110001001", 10 => "110001010", 11 => "110001011", 
    12 => "110001100", 13 => "110001101", 14 => "110001110", 15 => "110001111", 
    16 => "110010000", 17 => "110010001", 18 => "110010010", 19 => "110010011", 
    20 => "110010100", 21 => "110010101", 22 => "110010110", 23 => "110010111", 
    24 => "110011000", 25 => "110011001", 26 => "110011010", 27 => "110011011", 
    28 => "110011100", 29 => "110011101", 30 => "110011110", 31 => "110011111", 
    32 => "110100000", 33 => "110100001", 34 => "110100010", 35 => "110100011", 
    36 => "110100100", 37 => "110100101", 38 => "110100110", 39 => "110100111", 
    40 => "110101000", 41 => "110101001", 42 => "110101010", 43 => "110101011", 
    44 => "110101100", 45 => "110101101", 46 => "110101110", 47 => "110101111", 
    48 => "110110000", 49 => "110110001", 50 => "110110010", 51 => "110110011", 
    52 => "110110100", 53 => "110110101", 54 => "110110110", 55 => "110110111", 
    56 => "110111000", 57 => "110111001", 58 => "110111010", 59 => "110111011", 
    60 => "110111100", 61 => "110111101", 62 => "110111110", 63 => "110111111", 
    64 => "111000000", 65 => "111000001", 66 => "111000010", 67 => "111000011", 
    68 => "111000100", 69 => "111000101", 70 => "111000110", 71 => "111000111", 
    72 => "111001000", 73 => "111001001", 74 => "111001010", 75 => "111001011", 
    76 => "111001100", 77 => "111001101", 78 => "111001110", 79 => "111001111", 
    80 => "111010000", 81 => "111010001", 82 => "111010010", 83 => "111010011", 
    84 => "111010100", 85 => "111010101", 86 => "111010110", 87 => "111010111", 
    88 => "111011000", 89 => "111011001", 90 => "111011010", 91 => "111011011", 
    92 => "111011100", 93 => "111011101", 94 => "111011110", 95 => "111011111", 
    96 => "111100000", 97 => "111100001", 98 => "111100010", 99 => "111100011", 
    100 => "111100100", 101 => "111100101", 102 => "111100110", 103 => "111100111", 
    104 => "111101000", 105 => "111101001", 106 => "111101010", 107 => "111101011", 
    108 => "111101100", 109 => "111101101", 110 => "111101110", 111 => "111101111", 
    112 => "111110000", 113 => "111110001", 114 => "111110010", 115 => "111110011", 
    116 => "111110100", 117 => "111110101", 118 => "111110110", 119 => "111110111", 
    120 => "111111000", 121 => "111111001", 122 => "111111010", 123 => "111111011", 
    124 => "111111100", 125 => "111111101", 126 => "111111110", 127 => "111111111", 
    128 => "000000001", 129 => "000000010", 130 => "000000011", 131 => "000000100", 
    132 => "000000101", 133 => "000000110", 134 => "000000111", 135 => "000001000", 
    136 => "000001001", 137 => "000001010", 138 => "000001011", 139 => "000001100", 
    140 => "000001101", 141 => "000001110", 142 => "000001111", 143 => "000010000", 
    144 => "000010001", 145 => "000010010", 146 => "000010011", 147 => "000010100", 
    148 => "000010101", 149 => "000010110", 150 => "000010111", 151 => "000011000", 
    152 => "000011001", 153 => "000011010", 154 => "000011011", 155 => "000011100", 
    156 => "000011101", 157 => "000011110", 158 => "000011111", 159 => "000100000", 
    160 => "000100001", 161 => "000100010", 162 => "000100011", 163 => "000100100", 
    164 => "000100101", 165 => "000100110", 166 => "000100111", 167 => "000101000", 
    168 => "000101001", 169 => "000101010", 170 => "000101011", 171 => "000101100", 
    172 => "000101101", 173 => "000101110", 174 => "000101111", 175 => "000110000", 
    176 => "000110001", 177 => "000110010", 178 => "000110011", 179 => "000110100", 
    180 => "000110101", 181 => "000110110", 182 => "000110111", 183 => "000111000", 
    184 => "000111001", 185 => "000111010", 186 => "000111011", 187 => "000111100", 
    188 => "000111101", 189 => "000111110", 190 => "000111111", 191 => "001000000", 
    192 => "001000001", 193 => "001000010", 194 => "001000011", 195 => "001000100", 
    196 => "001000101", 197 => "001000110", 198 => "001000111", 199 => "001001000", 
    200 => "001001001", 201 => "001001010", 202 => "001001011", 203 => "001001100", 
    204 => "001001101", 205 => "001001110", 206 => "001001111", 207 => "001010000", 
    208 => "001010001", 209 => "001010010", 210 => "001010011", 211 => "001010100", 
    212 => "001010101", 213 => "001010110", 214 => "001010111", 215 => "001011000", 
    216 => "001011001", 217 => "001011010", 218 => "001011011", 219 => "001011100", 
    220 => "001011101", 221 => "001011110", 222 => "001011111", 223 => "001100000", 
    224 => "001100001", 225 => "001100010", 226 => "001100011", 227 => "001100100", 
    228 => "001100101", 229 => "001100110", 230 => "001100111", 231 => "001101000", 
    232 => "001101001", 233 => "001101010", 234 => "001101011", 235 => "001101100", 
    236 => "001101101", 237 => "001101110", 238 => "001101111", 239 => "001110000", 
    240 => "001110001", 241 => "001110010", 242 => "001110011", 243 => "001110100", 
    244 => "001110101", 245 => "001110110", 246 => "001110111", 247 => "001111000", 
    248 => "001111001", 249 => "001111010", 250 => "001111011", 251 => "001111100", 
    252 => "001111101", 253 => "001111110", 254 => "001111111", 255 => "010000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity load_image_chunk_bkb is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of load_image_chunk_bkb is
    component load_image_chunk_bkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    load_image_chunk_bkb_rom_U :  component load_image_chunk_bkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


