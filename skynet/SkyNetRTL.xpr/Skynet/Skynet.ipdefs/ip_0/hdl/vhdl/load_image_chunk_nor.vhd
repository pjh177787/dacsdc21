-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_image_chunk_nor is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_buf_0_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_buf_0_V_ce0 : OUT STD_LOGIC;
    img_buf_0_V_we0 : OUT STD_LOGIC;
    img_buf_0_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    img_buf_1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_buf_1_V_ce0 : OUT STD_LOGIC;
    img_buf_1_V_we0 : OUT STD_LOGIC;
    img_buf_1_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    img_buf_2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_buf_2_V_ce0 : OUT STD_LOGIC;
    img_buf_2_V_we0 : OUT STD_LOGIC;
    img_buf_2_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    m_axi_image_in_raw_pad_burst_AWVALID : OUT STD_LOGIC;
    m_axi_image_in_raw_pad_burst_AWREADY : IN STD_LOGIC;
    m_axi_image_in_raw_pad_burst_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_raw_pad_burst_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_raw_pad_burst_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_raw_pad_burst_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_raw_pad_burst_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_raw_pad_burst_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_raw_pad_burst_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_raw_pad_burst_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_raw_pad_burst_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_raw_pad_burst_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_raw_pad_burst_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_raw_pad_burst_WVALID : OUT STD_LOGIC;
    m_axi_image_in_raw_pad_burst_WREADY : IN STD_LOGIC;
    m_axi_image_in_raw_pad_burst_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_raw_pad_burst_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_raw_pad_burst_WLAST : OUT STD_LOGIC;
    m_axi_image_in_raw_pad_burst_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_raw_pad_burst_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_raw_pad_burst_ARVALID : OUT STD_LOGIC;
    m_axi_image_in_raw_pad_burst_ARREADY : IN STD_LOGIC;
    m_axi_image_in_raw_pad_burst_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_raw_pad_burst_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_raw_pad_burst_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_raw_pad_burst_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_raw_pad_burst_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_raw_pad_burst_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_raw_pad_burst_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_raw_pad_burst_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_raw_pad_burst_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_raw_pad_burst_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_raw_pad_burst_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_raw_pad_burst_RVALID : IN STD_LOGIC;
    m_axi_image_in_raw_pad_burst_RREADY : OUT STD_LOGIC;
    m_axi_image_in_raw_pad_burst_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_raw_pad_burst_RLAST : IN STD_LOGIC;
    m_axi_image_in_raw_pad_burst_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_raw_pad_burst_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_raw_pad_burst_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_raw_pad_burst_BVALID : IN STD_LOGIC;
    m_axi_image_in_raw_pad_burst_BREADY : OUT STD_LOGIC;
    m_axi_image_in_raw_pad_burst_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_raw_pad_burst_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_raw_pad_burst_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    image_in_raw_pad_burst_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    col : IN STD_LOGIC_VECTOR (3 downto 0);
    row : IN STD_LOGIC_VECTOR (3 downto 0);
    offset_h : IN STD_LOGIC_VECTOR (1 downto 0);
    offset_w : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of load_image_chunk_nor is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv12_E70 : STD_LOGIC_VECTOR (11 downto 0) := "111001110000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv15_284 : STD_LOGIC_VECTOR (14 downto 0) := "000001010000100";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv19_32F10 : STD_LOGIC_VECTOR (18 downto 0) := "0110010111100010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv12_54 : STD_LOGIC_VECTOR (11 downto 0) := "000001010100";
    constant ap_const_lv20_65E20 : STD_LOGIC_VECTOR (19 downto 0) := "01100101111000100000";
    constant ap_const_lv20_284 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001010000100";
    constant ap_const_lv13_54 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_norm_ch_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_norm_ch_V_ce0 : STD_LOGIC;
    signal img_norm_ch_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal image_in_raw_pad_burst_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln578_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_reg_957_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal image_in_raw_pad_burst_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal icmp_ln578_reg_957_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal empty_52_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter23 : STD_LOGIC := '0';
    signal icmp_ln587_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal empty_56_reg_1141 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter23 : STD_LOGIC := '0';
    signal icmp_ln596_reg_1106 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_267 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_in_raw_pad_bur_reg_278 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_reg_289 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_301 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten7_reg_312 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state16_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_state32_io : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter17 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter18 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter19 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter20 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter21 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter22 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter23 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter24 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter25 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal image_in_raw_pad_bur_3_reg_324 : STD_LOGIC_VECTOR (14 downto 0);
    signal i1_0_reg_336 : STD_LOGIC_VECTOR (5 downto 0);
    signal j2_0_reg_348 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten15_reg_360 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state43_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state44_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state45_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state46_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state47_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state48_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state49_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state50_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state51_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state52_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state53_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state54_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_state55_pp2_stage0_iter12 : BOOLEAN;
    signal ap_block_state56_pp2_stage0_iter13 : BOOLEAN;
    signal ap_block_state57_pp2_stage0_iter14 : BOOLEAN;
    signal ap_block_state58_pp2_stage0_iter15 : BOOLEAN;
    signal ap_block_state59_pp2_stage0_iter16 : BOOLEAN;
    signal ap_block_state59_io : BOOLEAN;
    signal ap_block_state60_pp2_stage0_iter17 : BOOLEAN;
    signal ap_block_state61_pp2_stage0_iter18 : BOOLEAN;
    signal ap_block_state62_pp2_stage0_iter19 : BOOLEAN;
    signal ap_block_state63_pp2_stage0_iter20 : BOOLEAN;
    signal ap_block_state64_pp2_stage0_iter21 : BOOLEAN;
    signal ap_block_state65_pp2_stage0_iter22 : BOOLEAN;
    signal ap_block_state66_pp2_stage0_iter23 : BOOLEAN;
    signal ap_block_state67_pp2_stage0_iter24 : BOOLEAN;
    signal ap_block_state68_pp2_stage0_iter25 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal image_in_raw_pad_bur_7_reg_372 : STD_LOGIC_VECTOR (14 downto 0);
    signal i3_0_reg_384 : STD_LOGIC_VECTOR (5 downto 0);
    signal j4_0_reg_396 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln577_fu_432_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln577_reg_914 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln577_fu_880_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln577_reg_925 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln577_fu_441_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln577_reg_930 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln577_1_fu_444_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln577_1_reg_935 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln577_1_fu_467_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln577_1_reg_940 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln577_3_fu_473_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln577_3_reg_945 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln578_fu_477_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln578_reg_950 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln578_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln578_reg_957_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_reg_957_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_reg_957_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_reg_957_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_reg_957_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_reg_957_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_reg_957_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_reg_957_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln578_fu_487_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln579_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln579_reg_966 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln579_reg_966_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln579_reg_966_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln579_reg_966_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln579_reg_966_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln579_reg_966_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln579_reg_966_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln579_reg_966_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln581_fu_505_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln581_reg_971 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln581_reg_971_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln581_reg_971_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln581_reg_971_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln581_reg_971_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln581_reg_971_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln581_reg_971_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln581_reg_971_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln581_reg_971_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln578_fu_513_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln578_reg_977 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_reg_982 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_fu_531_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln581_3_fu_572_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln581_3_reg_992 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln581_1_fu_593_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln581_1_reg_1003 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal grp_fu_888_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_reg_1009 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_reg_1009_pp0_iter10_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal image_in_raw_pad_bur_5_reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln590_fu_614_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln590_reg_1024 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln590_fu_637_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln590_reg_1029 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln587_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln587_reg_1035_pp1_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln587_fu_647_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln587_reg_1039 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln588_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln588_reg_1044 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln588_reg_1044_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln588_reg_1044_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln588_reg_1044_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln588_reg_1044_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln588_reg_1044_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln588_reg_1044_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln588_reg_1044_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln590_fu_671_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln590_reg_1049 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln590_reg_1049_pp1_iter15_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln590_reg_1049_pp1_iter16_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln590_reg_1049_pp1_iter17_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln590_reg_1049_pp1_iter18_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln590_reg_1049_pp1_iter19_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln590_reg_1049_pp1_iter20_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln590_reg_1049_pp1_iter21_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln590_reg_1049_pp1_iter22_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln590_2_fu_679_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln590_2_reg_1054 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal j_1_fu_687_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_1060 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln590_3_fu_710_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln590_3_reg_1065 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_52_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln590_1_fu_737_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln590_1_reg_1080 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter22 : STD_LOGIC := '0';
    signal img_buf_1_V_addr_reg_1086 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_buf_1_V_addr_reg_1086_pp1_iter24_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_in_raw_pad_bur_9_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln599_fu_758_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln599_fu_758_p2 : signal is "no";
    signal add_ln599_reg_1101 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal icmp_ln596_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln596_reg_1106_pp2_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln596_fu_769_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln596_reg_1110 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln597_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln597_reg_1115 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln597_reg_1115_pp2_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln597_reg_1115_pp2_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln597_reg_1115_pp2_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln597_reg_1115_pp2_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln597_reg_1115_pp2_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln597_reg_1115_pp2_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln597_reg_1115_pp2_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln599_fu_793_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln599_reg_1120 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln599_reg_1120_pp2_iter15_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln599_reg_1120_pp2_iter16_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln599_reg_1120_pp2_iter17_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln599_reg_1120_pp2_iter18_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln599_reg_1120_pp2_iter19_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln599_reg_1120_pp2_iter20_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln599_reg_1120_pp2_iter21_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln599_reg_1120_pp2_iter22_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln599_2_fu_801_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln599_2_reg_1125 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal j_2_fu_809_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_reg_1131 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln599_3_fu_832_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln599_3_reg_1136 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_56_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln599_1_fu_859_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln599_1_reg_1151 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter22 : STD_LOGIC := '0';
    signal img_buf_2_V_addr_reg_1157 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_buf_2_V_addr_reg_1157_pp2_iter24_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_in_raw_pad_bur_12_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state16 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter25 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state43 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter25 : STD_LOGIC := '0';
    signal ap_phi_mux_image_in_raw_pad_bur_phi_fu_282_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_i_0_phi_fu_293_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten7_phi_fu_316_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_image_in_raw_pad_bur_3_phi_fu_328_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_i1_0_phi_fu_340_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_j2_0_phi_fu_352_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_indvar_flatten15_phi_fu_364_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_image_in_raw_pad_bur_7_phi_fu_376_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_i3_0_phi_fu_388_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_j4_0_phi_fu_400_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln581_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_1_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln590_fu_754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_2_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln599_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln581_3_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln590_2_fu_721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln599_1_fu_843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln577_1_fu_408_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln577_fu_416_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_420_p5 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln577_4_fu_455_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln577_3_fu_447_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln577_2_fu_463_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln583_fu_493_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_fu_540_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln581_fu_537_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln581_1_fu_552_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln581_1_fu_548_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln581_2_fu_557_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln581_fu_562_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln581_2_fu_568_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_fu_587_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_619_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_628_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_653_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln592_fu_659_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln590_1_fu_693_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln590_1_fu_697_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln590_2_fu_701_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln588_fu_706_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_653_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_2_fu_731_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_896_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_775_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln601_fu_781_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln599_1_fu_815_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln599_fu_819_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln599_2_fu_823_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln597_fu_828_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_775_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_4_fu_853_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_905_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln577_fu_880_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln577_fu_880_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_888_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_888_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_888_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_896_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_896_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_896_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_905_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_905_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_905_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_653_ce : STD_LOGIC;
    signal grp_fu_775_ce : STD_LOGIC;
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_888_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_888_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_896_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_896_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_905_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_905_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln577_fu_880_p10 : STD_LOGIC_VECTOR (19 downto 0);

    component SkyNet_urem_12ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component SkyNet_mul_mul_11dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component SkyNet_mac_muladdeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component load_image_chunk_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    img_norm_ch_V_U : component load_image_chunk_bkb
    generic map (
        DataWidth => 9,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => img_norm_ch_V_address0,
        ce0 => img_norm_ch_V_ce0,
        q0 => img_norm_ch_V_q0);

    SkyNet_urem_12ns_cud_U107 : component SkyNet_urem_12ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_indvar_flatten7_phi_fu_316_p4,
        din1 => grp_fu_653_p1,
        ce => grp_fu_653_ce,
        dout => grp_fu_653_p2);

    SkyNet_urem_12ns_cud_U108 : component SkyNet_urem_12ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_indvar_flatten15_phi_fu_364_p4,
        din1 => grp_fu_775_p1,
        ce => grp_fu_775_ce,
        dout => grp_fu_775_p2);

    SkyNet_mul_mul_11dEe_U109 : component SkyNet_mul_mul_11dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln577_fu_880_p0,
        din1 => mul_ln577_fu_880_p1,
        dout => mul_ln577_fu_880_p2);

    SkyNet_mac_muladdeOg_U110 : component SkyNet_mac_muladdeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_888_p0,
        din1 => grp_fu_888_p1,
        din2 => grp_fu_888_p2,
        dout => grp_fu_888_p3);

    SkyNet_mac_muladdeOg_U111 : component SkyNet_mac_muladdeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_896_p0,
        din1 => grp_fu_896_p1,
        din2 => grp_fu_896_p2,
        dout => grp_fu_896_p3);

    SkyNet_mac_muladdeOg_U112 : component SkyNet_mac_muladdeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_905_p0,
        din1 => grp_fu_905_p1,
        din2 => grp_fu_905_p2,
        dout => grp_fu_905_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state16);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp1_iter25 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state43) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state43)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state43);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_enable_reg_pp2_iter25 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter23 = ap_const_logic_1) and (icmp_ln587_reg_1035_pp1_iter22_reg = ap_const_lv1_0))) then 
                i1_0_reg_336 <= select_ln590_1_reg_1080;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i1_0_reg_336 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i3_0_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter23 = ap_const_logic_1) and (icmp_ln596_reg_1106_pp2_iter22_reg = ap_const_lv1_0))) then 
                i3_0_reg_384 <= select_ln599_1_reg_1151;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i3_0_reg_384 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln578_reg_957_pp0_iter8_reg = ap_const_lv1_0))) then 
                i_0_reg_289 <= select_ln581_1_reg_1003;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_0_reg_289 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    image_in_raw_pad_bur_3_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter15 = ap_const_logic_1) and (icmp_ln587_reg_1035_pp1_iter14_reg = ap_const_lv1_0))) then 
                image_in_raw_pad_bur_3_reg_324 <= select_ln590_2_reg_1054;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                image_in_raw_pad_bur_3_reg_324 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    image_in_raw_pad_bur_7_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter15 = ap_const_logic_1) and (icmp_ln596_reg_1106_pp2_iter14_reg = ap_const_lv1_0))) then 
                image_in_raw_pad_bur_7_reg_372 <= select_ln599_2_reg_1125;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                image_in_raw_pad_bur_7_reg_372 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    image_in_raw_pad_bur_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln578_reg_957 = ap_const_lv1_0))) then 
                image_in_raw_pad_bur_reg_278 <= select_ln578_reg_977;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                image_in_raw_pad_bur_reg_278 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten15_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln596_reg_1106 = ap_const_lv1_0))) then 
                indvar_flatten15_reg_360 <= add_ln596_reg_1110;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                indvar_flatten15_reg_360 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln587_reg_1035 = ap_const_lv1_0))) then 
                indvar_flatten7_reg_312 <= add_ln587_reg_1039;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten7_reg_312 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln578_fu_481_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_267 <= add_ln578_fu_487_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_267 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    j2_0_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter15 = ap_const_logic_1) and (icmp_ln587_reg_1035_pp1_iter14_reg = ap_const_lv1_0))) then 
                j2_0_reg_348 <= j_1_reg_1060;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j2_0_reg_348 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j4_0_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter15 = ap_const_logic_1) and (icmp_ln596_reg_1106_pp2_iter14_reg = ap_const_lv1_0))) then 
                j4_0_reg_396 <= j_2_reg_1131;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                j4_0_reg_396 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln578_fu_481_p2 = ap_const_lv1_0))) then 
                j_0_reg_301 <= j_fu_531_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_0_reg_301 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln578_reg_957_pp0_iter8_reg = ap_const_lv1_0))) then
                add_ln203_reg_1009 <= grp_fu_888_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln203_reg_1009_pp0_iter10_reg <= add_ln203_reg_1009;
                icmp_ln578_reg_957_pp0_iter10_reg <= icmp_ln578_reg_957_pp0_iter9_reg;
                icmp_ln578_reg_957_pp0_iter2_reg <= icmp_ln578_reg_957_pp0_iter1_reg;
                icmp_ln578_reg_957_pp0_iter3_reg <= icmp_ln578_reg_957_pp0_iter2_reg;
                icmp_ln578_reg_957_pp0_iter4_reg <= icmp_ln578_reg_957_pp0_iter3_reg;
                icmp_ln578_reg_957_pp0_iter5_reg <= icmp_ln578_reg_957_pp0_iter4_reg;
                icmp_ln578_reg_957_pp0_iter6_reg <= icmp_ln578_reg_957_pp0_iter5_reg;
                icmp_ln578_reg_957_pp0_iter7_reg <= icmp_ln578_reg_957_pp0_iter6_reg;
                icmp_ln578_reg_957_pp0_iter8_reg <= icmp_ln578_reg_957_pp0_iter7_reg;
                icmp_ln578_reg_957_pp0_iter9_reg <= icmp_ln578_reg_957_pp0_iter8_reg;
                icmp_ln579_reg_966_pp0_iter2_reg <= icmp_ln579_reg_966_pp0_iter1_reg;
                icmp_ln579_reg_966_pp0_iter3_reg <= icmp_ln579_reg_966_pp0_iter2_reg;
                icmp_ln579_reg_966_pp0_iter4_reg <= icmp_ln579_reg_966_pp0_iter3_reg;
                icmp_ln579_reg_966_pp0_iter5_reg <= icmp_ln579_reg_966_pp0_iter4_reg;
                icmp_ln579_reg_966_pp0_iter6_reg <= icmp_ln579_reg_966_pp0_iter5_reg;
                icmp_ln579_reg_966_pp0_iter7_reg <= icmp_ln579_reg_966_pp0_iter6_reg;
                select_ln581_reg_971_pp0_iter2_reg <= select_ln581_reg_971_pp0_iter1_reg;
                select_ln581_reg_971_pp0_iter3_reg <= select_ln581_reg_971_pp0_iter2_reg;
                select_ln581_reg_971_pp0_iter4_reg <= select_ln581_reg_971_pp0_iter3_reg;
                select_ln581_reg_971_pp0_iter5_reg <= select_ln581_reg_971_pp0_iter4_reg;
                select_ln581_reg_971_pp0_iter6_reg <= select_ln581_reg_971_pp0_iter5_reg;
                select_ln581_reg_971_pp0_iter7_reg <= select_ln581_reg_971_pp0_iter6_reg;
                select_ln581_reg_971_pp0_iter8_reg <= select_ln581_reg_971_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    add_ln577_1_reg_940(9 downto 4) <= add_ln577_1_fu_467_p2(9 downto 4);
                mul_ln577_reg_925 <= mul_ln577_fu_880_p2;
                trunc_ln577_1_reg_935 <= trunc_ln577_1_fu_444_p1;
                trunc_ln577_reg_930 <= trunc_ln577_fu_441_p1;
                    zext_ln577_3_reg_945(9 downto 4) <= zext_ln577_3_fu_473_p1(9 downto 4);
                    zext_ln578_reg_950(29 downto 0) <= zext_ln578_fu_477_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    add_ln577_reg_914(8 downto 1) <= add_ln577_fu_432_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln578_reg_957 = ap_const_lv1_0))) then
                add_ln581_3_reg_992 <= add_ln581_3_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln587_reg_1039 <= add_ln587_fu_647_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln587_reg_1035_pp1_iter14_reg = ap_const_lv1_0))) then
                add_ln590_3_reg_1065 <= add_ln590_3_fu_710_p2;
                empty_52_reg_1070 <= empty_52_fu_715_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln590_reg_1024 <= add_ln590_fu_614_p2;
                    zext_ln590_reg_1029(1) <= zext_ln590_fu_637_p1(1);    zext_ln590_reg_1029(9 downto 4) <= zext_ln590_fu_637_p1(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln596_reg_1110 <= add_ln596_fu_769_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln596_reg_1106_pp2_iter14_reg = ap_const_lv1_0))) then
                add_ln599_3_reg_1136 <= add_ln599_3_fu_832_p2;
                empty_56_reg_1141 <= empty_56_fu_837_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                add_ln599_reg_1101 <= add_ln599_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln578_reg_957 <= icmp_ln578_fu_481_p2;
                icmp_ln578_reg_957_pp0_iter1_reg <= icmp_ln578_reg_957;
                icmp_ln579_reg_966_pp0_iter1_reg <= icmp_ln579_reg_966;
                select_ln581_reg_971_pp0_iter1_reg <= select_ln581_reg_971;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln578_fu_481_p2 = ap_const_lv1_0))) then
                icmp_ln579_reg_966 <= icmp_ln579_fu_499_p2;
                select_ln581_reg_971 <= select_ln581_fu_505_p3;
                tmp_3_reg_982 <= select_ln578_fu_513_p3(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln587_reg_1035 <= icmp_ln587_fu_641_p2;
                icmp_ln587_reg_1035_pp1_iter1_reg <= icmp_ln587_reg_1035;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln587_reg_1035_pp1_iter10_reg <= icmp_ln587_reg_1035_pp1_iter9_reg;
                icmp_ln587_reg_1035_pp1_iter11_reg <= icmp_ln587_reg_1035_pp1_iter10_reg;
                icmp_ln587_reg_1035_pp1_iter12_reg <= icmp_ln587_reg_1035_pp1_iter11_reg;
                icmp_ln587_reg_1035_pp1_iter13_reg <= icmp_ln587_reg_1035_pp1_iter12_reg;
                icmp_ln587_reg_1035_pp1_iter14_reg <= icmp_ln587_reg_1035_pp1_iter13_reg;
                icmp_ln587_reg_1035_pp1_iter15_reg <= icmp_ln587_reg_1035_pp1_iter14_reg;
                icmp_ln587_reg_1035_pp1_iter16_reg <= icmp_ln587_reg_1035_pp1_iter15_reg;
                icmp_ln587_reg_1035_pp1_iter17_reg <= icmp_ln587_reg_1035_pp1_iter16_reg;
                icmp_ln587_reg_1035_pp1_iter18_reg <= icmp_ln587_reg_1035_pp1_iter17_reg;
                icmp_ln587_reg_1035_pp1_iter19_reg <= icmp_ln587_reg_1035_pp1_iter18_reg;
                icmp_ln587_reg_1035_pp1_iter20_reg <= icmp_ln587_reg_1035_pp1_iter19_reg;
                icmp_ln587_reg_1035_pp1_iter21_reg <= icmp_ln587_reg_1035_pp1_iter20_reg;
                icmp_ln587_reg_1035_pp1_iter22_reg <= icmp_ln587_reg_1035_pp1_iter21_reg;
                icmp_ln587_reg_1035_pp1_iter23_reg <= icmp_ln587_reg_1035_pp1_iter22_reg;
                icmp_ln587_reg_1035_pp1_iter24_reg <= icmp_ln587_reg_1035_pp1_iter23_reg;
                icmp_ln587_reg_1035_pp1_iter2_reg <= icmp_ln587_reg_1035_pp1_iter1_reg;
                icmp_ln587_reg_1035_pp1_iter3_reg <= icmp_ln587_reg_1035_pp1_iter2_reg;
                icmp_ln587_reg_1035_pp1_iter4_reg <= icmp_ln587_reg_1035_pp1_iter3_reg;
                icmp_ln587_reg_1035_pp1_iter5_reg <= icmp_ln587_reg_1035_pp1_iter4_reg;
                icmp_ln587_reg_1035_pp1_iter6_reg <= icmp_ln587_reg_1035_pp1_iter5_reg;
                icmp_ln587_reg_1035_pp1_iter7_reg <= icmp_ln587_reg_1035_pp1_iter6_reg;
                icmp_ln587_reg_1035_pp1_iter8_reg <= icmp_ln587_reg_1035_pp1_iter7_reg;
                icmp_ln587_reg_1035_pp1_iter9_reg <= icmp_ln587_reg_1035_pp1_iter8_reg;
                icmp_ln588_reg_1044_pp1_iter15_reg <= icmp_ln588_reg_1044;
                icmp_ln588_reg_1044_pp1_iter16_reg <= icmp_ln588_reg_1044_pp1_iter15_reg;
                icmp_ln588_reg_1044_pp1_iter17_reg <= icmp_ln588_reg_1044_pp1_iter16_reg;
                icmp_ln588_reg_1044_pp1_iter18_reg <= icmp_ln588_reg_1044_pp1_iter17_reg;
                icmp_ln588_reg_1044_pp1_iter19_reg <= icmp_ln588_reg_1044_pp1_iter18_reg;
                icmp_ln588_reg_1044_pp1_iter20_reg <= icmp_ln588_reg_1044_pp1_iter19_reg;
                icmp_ln588_reg_1044_pp1_iter21_reg <= icmp_ln588_reg_1044_pp1_iter20_reg;
                img_buf_1_V_addr_reg_1086_pp1_iter24_reg <= img_buf_1_V_addr_reg_1086;
                select_ln590_reg_1049_pp1_iter15_reg <= select_ln590_reg_1049;
                select_ln590_reg_1049_pp1_iter16_reg <= select_ln590_reg_1049_pp1_iter15_reg;
                select_ln590_reg_1049_pp1_iter17_reg <= select_ln590_reg_1049_pp1_iter16_reg;
                select_ln590_reg_1049_pp1_iter18_reg <= select_ln590_reg_1049_pp1_iter17_reg;
                select_ln590_reg_1049_pp1_iter19_reg <= select_ln590_reg_1049_pp1_iter18_reg;
                select_ln590_reg_1049_pp1_iter20_reg <= select_ln590_reg_1049_pp1_iter19_reg;
                select_ln590_reg_1049_pp1_iter21_reg <= select_ln590_reg_1049_pp1_iter20_reg;
                select_ln590_reg_1049_pp1_iter22_reg <= select_ln590_reg_1049_pp1_iter21_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln587_reg_1035_pp1_iter13_reg = ap_const_lv1_0))) then
                icmp_ln588_reg_1044 <= icmp_ln588_fu_665_p2;
                select_ln590_reg_1049 <= select_ln590_fu_671_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln596_reg_1106 <= icmp_ln596_fu_763_p2;
                icmp_ln596_reg_1106_pp2_iter1_reg <= icmp_ln596_reg_1106;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln596_reg_1106_pp2_iter10_reg <= icmp_ln596_reg_1106_pp2_iter9_reg;
                icmp_ln596_reg_1106_pp2_iter11_reg <= icmp_ln596_reg_1106_pp2_iter10_reg;
                icmp_ln596_reg_1106_pp2_iter12_reg <= icmp_ln596_reg_1106_pp2_iter11_reg;
                icmp_ln596_reg_1106_pp2_iter13_reg <= icmp_ln596_reg_1106_pp2_iter12_reg;
                icmp_ln596_reg_1106_pp2_iter14_reg <= icmp_ln596_reg_1106_pp2_iter13_reg;
                icmp_ln596_reg_1106_pp2_iter15_reg <= icmp_ln596_reg_1106_pp2_iter14_reg;
                icmp_ln596_reg_1106_pp2_iter16_reg <= icmp_ln596_reg_1106_pp2_iter15_reg;
                icmp_ln596_reg_1106_pp2_iter17_reg <= icmp_ln596_reg_1106_pp2_iter16_reg;
                icmp_ln596_reg_1106_pp2_iter18_reg <= icmp_ln596_reg_1106_pp2_iter17_reg;
                icmp_ln596_reg_1106_pp2_iter19_reg <= icmp_ln596_reg_1106_pp2_iter18_reg;
                icmp_ln596_reg_1106_pp2_iter20_reg <= icmp_ln596_reg_1106_pp2_iter19_reg;
                icmp_ln596_reg_1106_pp2_iter21_reg <= icmp_ln596_reg_1106_pp2_iter20_reg;
                icmp_ln596_reg_1106_pp2_iter22_reg <= icmp_ln596_reg_1106_pp2_iter21_reg;
                icmp_ln596_reg_1106_pp2_iter23_reg <= icmp_ln596_reg_1106_pp2_iter22_reg;
                icmp_ln596_reg_1106_pp2_iter24_reg <= icmp_ln596_reg_1106_pp2_iter23_reg;
                icmp_ln596_reg_1106_pp2_iter2_reg <= icmp_ln596_reg_1106_pp2_iter1_reg;
                icmp_ln596_reg_1106_pp2_iter3_reg <= icmp_ln596_reg_1106_pp2_iter2_reg;
                icmp_ln596_reg_1106_pp2_iter4_reg <= icmp_ln596_reg_1106_pp2_iter3_reg;
                icmp_ln596_reg_1106_pp2_iter5_reg <= icmp_ln596_reg_1106_pp2_iter4_reg;
                icmp_ln596_reg_1106_pp2_iter6_reg <= icmp_ln596_reg_1106_pp2_iter5_reg;
                icmp_ln596_reg_1106_pp2_iter7_reg <= icmp_ln596_reg_1106_pp2_iter6_reg;
                icmp_ln596_reg_1106_pp2_iter8_reg <= icmp_ln596_reg_1106_pp2_iter7_reg;
                icmp_ln596_reg_1106_pp2_iter9_reg <= icmp_ln596_reg_1106_pp2_iter8_reg;
                icmp_ln597_reg_1115_pp2_iter15_reg <= icmp_ln597_reg_1115;
                icmp_ln597_reg_1115_pp2_iter16_reg <= icmp_ln597_reg_1115_pp2_iter15_reg;
                icmp_ln597_reg_1115_pp2_iter17_reg <= icmp_ln597_reg_1115_pp2_iter16_reg;
                icmp_ln597_reg_1115_pp2_iter18_reg <= icmp_ln597_reg_1115_pp2_iter17_reg;
                icmp_ln597_reg_1115_pp2_iter19_reg <= icmp_ln597_reg_1115_pp2_iter18_reg;
                icmp_ln597_reg_1115_pp2_iter20_reg <= icmp_ln597_reg_1115_pp2_iter19_reg;
                icmp_ln597_reg_1115_pp2_iter21_reg <= icmp_ln597_reg_1115_pp2_iter20_reg;
                img_buf_2_V_addr_reg_1157_pp2_iter24_reg <= img_buf_2_V_addr_reg_1157;
                select_ln599_reg_1120_pp2_iter15_reg <= select_ln599_reg_1120;
                select_ln599_reg_1120_pp2_iter16_reg <= select_ln599_reg_1120_pp2_iter15_reg;
                select_ln599_reg_1120_pp2_iter17_reg <= select_ln599_reg_1120_pp2_iter16_reg;
                select_ln599_reg_1120_pp2_iter18_reg <= select_ln599_reg_1120_pp2_iter17_reg;
                select_ln599_reg_1120_pp2_iter19_reg <= select_ln599_reg_1120_pp2_iter18_reg;
                select_ln599_reg_1120_pp2_iter20_reg <= select_ln599_reg_1120_pp2_iter19_reg;
                select_ln599_reg_1120_pp2_iter21_reg <= select_ln599_reg_1120_pp2_iter20_reg;
                select_ln599_reg_1120_pp2_iter22_reg <= select_ln599_reg_1120_pp2_iter21_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln596_reg_1106_pp2_iter13_reg = ap_const_lv1_0))) then
                icmp_ln597_reg_1115 <= icmp_ln597_fu_787_p2;
                select_ln599_reg_1120 <= select_ln599_fu_793_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln596_reg_1106_pp2_iter22_reg = ap_const_lv1_0))) then
                image_in_raw_pad_bur_12_reg_1162 <= m_axi_image_in_raw_pad_burst_RDATA;
                img_buf_2_V_addr_reg_1157 <= sext_ln203_2_fu_872_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln578_reg_957_pp0_iter8_reg = ap_const_lv1_0))) then
                image_in_raw_pad_bur_5_reg_1014 <= m_axi_image_in_raw_pad_burst_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln587_reg_1035_pp1_iter22_reg = ap_const_lv1_0))) then
                image_in_raw_pad_bur_9_reg_1091 <= m_axi_image_in_raw_pad_burst_RDATA;
                img_buf_1_V_addr_reg_1086 <= sext_ln203_1_fu_750_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (icmp_ln587_reg_1035_pp1_iter13_reg = ap_const_lv1_0))) then
                j_1_reg_1060 <= j_1_fu_687_p2;
                select_ln590_2_reg_1054 <= select_ln590_2_fu_679_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter14 = ap_const_logic_1) and (icmp_ln596_reg_1106_pp2_iter13_reg = ap_const_lv1_0))) then
                j_2_reg_1131 <= j_2_fu_809_p2;
                select_ln599_2_reg_1125 <= select_ln599_2_fu_801_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln578_fu_481_p2 = ap_const_lv1_0))) then
                select_ln578_reg_977 <= select_ln578_fu_513_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln578_reg_957_pp0_iter7_reg = ap_const_lv1_0))) then
                select_ln581_1_reg_1003 <= select_ln581_1_fu_593_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter22 = ap_const_logic_1) and (icmp_ln587_reg_1035_pp1_iter21_reg = ap_const_lv1_0))) then
                select_ln590_1_reg_1080 <= select_ln590_1_fu_737_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter22 = ap_const_logic_1) and (icmp_ln596_reg_1106_pp2_iter21_reg = ap_const_lv1_0))) then
                select_ln599_1_reg_1151 <= select_ln599_1_fu_859_p3;
            end if;
        end if;
    end process;
    add_ln577_reg_914(0) <= '0';
    add_ln577_1_reg_940(3 downto 0) <= "0000";
    zext_ln577_3_reg_945(3 downto 0) <= "0000";
    zext_ln577_3_reg_945(17 downto 10) <= "00000000";
    zext_ln578_reg_950(30) <= '0';
    zext_ln590_reg_1029(0) <= '0';
    zext_ln590_reg_1029(3 downto 2) <= "00";
    zext_ln590_reg_1029(14 downto 10) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln578_fu_481_p2, ap_enable_reg_pp0_iter0, icmp_ln587_fu_641_p2, ap_enable_reg_pp1_iter0, icmp_ln596_fu_763_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter25, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter24, ap_enable_reg_pp2_iter25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln578_fu_481_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln578_fu_481_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln587_fu_641_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln587_fu_641_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln596_fu_763_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp2_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter25 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter25 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln596_fu_763_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln577_1_fu_467_p2 <= std_logic_vector(unsigned(shl_ln577_3_fu_447_p3) + unsigned(zext_ln577_2_fu_463_p1));
    add_ln577_fu_432_p2 <= std_logic_vector(unsigned(zext_ln577_fu_416_p1) + unsigned(tmp1_fu_420_p5));
    add_ln578_fu_487_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_267) + unsigned(ap_const_lv12_1));
    add_ln581_1_fu_552_p2 <= std_logic_vector(unsigned(zext_ln581_fu_537_p1) + unsigned(trunc_ln577_1_reg_935));
    add_ln581_2_fu_557_p2 <= std_logic_vector(unsigned(zext_ln577_3_reg_945) + unsigned(add_ln581_1_fu_552_p2));
    add_ln581_3_fu_572_p2 <= std_logic_vector(unsigned(zext_ln581_2_fu_568_p1) + unsigned(zext_ln578_reg_950));
    add_ln581_fu_562_p2 <= std_logic_vector(unsigned(zext_ln581_1_fu_548_p1) + unsigned(add_ln581_2_fu_557_p2));
    add_ln583_fu_493_p2 <= std_logic_vector(unsigned(ap_phi_mux_image_in_raw_pad_bur_phi_fu_282_p4) + unsigned(ap_const_lv15_284));
    add_ln587_fu_647_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten7_phi_fu_316_p4) + unsigned(ap_const_lv12_1));
    add_ln590_1_fu_693_p2 <= std_logic_vector(unsigned(select_ln590_2_reg_1054) + unsigned(zext_ln590_reg_1029));
    add_ln590_2_fu_701_p2 <= std_logic_vector(unsigned(zext_ln590_1_fu_697_p1) + unsigned(add_ln590_reg_1024));
    add_ln590_3_fu_710_p2 <= std_logic_vector(unsigned(zext_ln578_reg_950) + unsigned(zext_ln588_fu_706_p1));
    add_ln590_fu_614_p2 <= std_logic_vector(unsigned(trunc_ln577_reg_930) + unsigned(ap_const_lv19_32F10));
    add_ln592_fu_659_p2 <= std_logic_vector(unsigned(ap_phi_mux_image_in_raw_pad_bur_3_phi_fu_328_p4) + unsigned(ap_const_lv15_284));
    add_ln596_fu_769_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten15_phi_fu_364_p4) + unsigned(ap_const_lv12_1));
    add_ln599_1_fu_815_p2 <= std_logic_vector(unsigned(select_ln599_2_reg_1125) + unsigned(zext_ln590_reg_1029));
    add_ln599_2_fu_823_p2 <= std_logic_vector(unsigned(zext_ln599_fu_819_p1) + unsigned(add_ln599_reg_1101));
    add_ln599_3_fu_832_p2 <= std_logic_vector(unsigned(zext_ln578_reg_950) + unsigned(zext_ln597_fu_828_p1));
    add_ln599_fu_758_p2 <= std_logic_vector(unsigned(mul_ln577_reg_925) + unsigned(ap_const_lv20_65E20));
    add_ln601_fu_781_p2 <= std_logic_vector(unsigned(ap_phi_mux_image_in_raw_pad_bur_7_phi_fu_376_p4) + unsigned(ap_const_lv15_284));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state42 <= ap_CS_fsm(5);
    ap_CS_fsm_state69 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_image_in_raw_pad_burst_RVALID, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, icmp_ln578_reg_957_pp0_iter8_reg, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_image_in_raw_pad_burst_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln578_reg_957_pp0_iter8_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_image_in_raw_pad_burst_RVALID, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, icmp_ln578_reg_957_pp0_iter8_reg, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_image_in_raw_pad_burst_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln578_reg_957_pp0_iter8_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(m_axi_image_in_raw_pad_burst_RVALID, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter23, icmp_ln587_reg_1035_pp1_iter22_reg, ap_block_state32_io)
    begin
                ap_block_pp1_stage0_11001 <= (((m_axi_image_in_raw_pad_burst_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter23 = ap_const_logic_1) and (icmp_ln587_reg_1035_pp1_iter22_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state32_io)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(m_axi_image_in_raw_pad_burst_RVALID, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter23, icmp_ln587_reg_1035_pp1_iter22_reg, ap_block_state32_io)
    begin
                ap_block_pp1_stage0_subdone <= (((m_axi_image_in_raw_pad_burst_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter23 = ap_const_logic_1) and (icmp_ln587_reg_1035_pp1_iter22_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state32_io)));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(m_axi_image_in_raw_pad_burst_RVALID, ap_enable_reg_pp2_iter16, ap_enable_reg_pp2_iter23, icmp_ln596_reg_1106_pp2_iter22_reg, ap_block_state59_io)
    begin
                ap_block_pp2_stage0_11001 <= (((m_axi_image_in_raw_pad_burst_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter23 = ap_const_logic_1) and (icmp_ln596_reg_1106_pp2_iter22_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp2_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state59_io)));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(m_axi_image_in_raw_pad_burst_RVALID, ap_enable_reg_pp2_iter16, ap_enable_reg_pp2_iter23, icmp_ln596_reg_1106_pp2_iter22_reg, ap_block_state59_io)
    begin
                ap_block_pp2_stage0_subdone <= (((m_axi_image_in_raw_pad_burst_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter23 = ap_const_logic_1) and (icmp_ln596_reg_1106_pp2_iter22_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp2_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state59_io)));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter9_assign_proc : process(m_axi_image_in_raw_pad_burst_RVALID, icmp_ln578_reg_957_pp0_iter8_reg)
    begin
                ap_block_state12_pp0_stage0_iter9 <= ((m_axi_image_in_raw_pad_burst_RVALID = ap_const_logic_0) and (icmp_ln578_reg_957_pp0_iter8_reg = ap_const_lv1_0));
    end process;

        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_io_assign_proc : process(m_axi_image_in_raw_pad_burst_ARREADY, empty_52_reg_1070)
    begin
                ap_block_state32_io <= ((m_axi_image_in_raw_pad_burst_ARREADY = ap_const_logic_0) and (empty_52_reg_1070 = ap_const_lv1_1));
    end process;

        ap_block_state32_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_pp1_stage0_iter23_assign_proc : process(m_axi_image_in_raw_pad_burst_RVALID, icmp_ln587_reg_1035_pp1_iter22_reg)
    begin
                ap_block_state39_pp1_stage0_iter23 <= ((m_axi_image_in_raw_pad_burst_RVALID = ap_const_logic_0) and (icmp_ln587_reg_1035_pp1_iter22_reg = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp2_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp2_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp2_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp2_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state59_io_assign_proc : process(m_axi_image_in_raw_pad_burst_ARREADY, empty_56_reg_1141)
    begin
                ap_block_state59_io <= ((m_axi_image_in_raw_pad_burst_ARREADY = ap_const_logic_0) and (empty_56_reg_1141 = ap_const_lv1_1));
    end process;

        ap_block_state59_pp2_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_image_in_raw_pad_burst_ARREADY, icmp_ln578_reg_957_pp0_iter1_reg)
    begin
                ap_block_state5_io <= ((m_axi_image_in_raw_pad_burst_ARREADY = ap_const_logic_0) and (icmp_ln578_reg_957_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp2_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp2_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp2_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp2_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp2_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp2_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state66_pp2_stage0_iter23_assign_proc : process(m_axi_image_in_raw_pad_burst_RVALID, icmp_ln596_reg_1106_pp2_iter22_reg)
    begin
                ap_block_state66_pp2_stage0_iter23 <= ((m_axi_image_in_raw_pad_burst_RVALID = ap_const_logic_0) and (icmp_ln596_reg_1106_pp2_iter22_reg = ap_const_lv1_0));
    end process;

        ap_block_state67_pp2_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp2_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln578_fu_481_p2)
    begin
        if ((icmp_ln578_fu_481_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state16_assign_proc : process(icmp_ln587_fu_641_p2)
    begin
        if ((icmp_ln587_fu_641_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state43_assign_proc : process(icmp_ln596_fu_763_p2)
    begin
        if ((icmp_ln596_fu_763_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state43 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state69)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state69) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter23, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter22, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter19, ap_enable_reg_pp1_iter20, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter25)
    begin
        if (((ap_enable_reg_pp1_iter25 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_enable_reg_pp1_iter20 = ap_const_logic_0) and (ap_enable_reg_pp1_iter19 = ap_const_logic_0) and (ap_enable_reg_pp1_iter18 = ap_const_logic_0) and (ap_enable_reg_pp1_iter17 = ap_const_logic_0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter23 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter16, ap_enable_reg_pp2_iter23, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter14, ap_enable_reg_pp2_iter22, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter13, ap_enable_reg_pp2_iter15, ap_enable_reg_pp2_iter17, ap_enable_reg_pp2_iter18, ap_enable_reg_pp2_iter19, ap_enable_reg_pp2_iter20, ap_enable_reg_pp2_iter21, ap_enable_reg_pp2_iter24, ap_enable_reg_pp2_iter25)
    begin
        if (((ap_enable_reg_pp2_iter25 = ap_const_logic_0) and (ap_enable_reg_pp2_iter24 = ap_const_logic_0) and (ap_enable_reg_pp2_iter21 = ap_const_logic_0) and (ap_enable_reg_pp2_iter20 = ap_const_logic_0) and (ap_enable_reg_pp2_iter19 = ap_const_logic_0) and (ap_enable_reg_pp2_iter18 = ap_const_logic_0) and (ap_enable_reg_pp2_iter17 = ap_const_logic_0) and (ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter22 = ap_const_logic_0) and (ap_enable_reg_pp2_iter14 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter23 = ap_const_logic_0) and (ap_enable_reg_pp2_iter16 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_0_phi_fu_340_p4_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter23, icmp_ln587_reg_1035_pp1_iter22_reg, i1_0_reg_336, select_ln590_1_reg_1080)
    begin
        if (((ap_enable_reg_pp1_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln587_reg_1035_pp1_iter22_reg = ap_const_lv1_0))) then 
            ap_phi_mux_i1_0_phi_fu_340_p4 <= select_ln590_1_reg_1080;
        else 
            ap_phi_mux_i1_0_phi_fu_340_p4 <= i1_0_reg_336;
        end if; 
    end process;


    ap_phi_mux_i3_0_phi_fu_388_p4_assign_proc : process(ap_block_pp2_stage0, ap_enable_reg_pp2_iter23, icmp_ln596_reg_1106_pp2_iter22_reg, i3_0_reg_384, select_ln599_1_reg_1151)
    begin
        if (((ap_enable_reg_pp2_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln596_reg_1106_pp2_iter22_reg = ap_const_lv1_0))) then 
            ap_phi_mux_i3_0_phi_fu_388_p4 <= select_ln599_1_reg_1151;
        else 
            ap_phi_mux_i3_0_phi_fu_388_p4 <= i3_0_reg_384;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_293_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, icmp_ln578_reg_957_pp0_iter8_reg, i_0_reg_289, select_ln581_1_reg_1003)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln578_reg_957_pp0_iter8_reg = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_293_p4 <= select_ln581_1_reg_1003;
        else 
            ap_phi_mux_i_0_phi_fu_293_p4 <= i_0_reg_289;
        end if; 
    end process;


    ap_phi_mux_image_in_raw_pad_bur_3_phi_fu_328_p4_assign_proc : process(ap_block_pp1_stage0, image_in_raw_pad_bur_3_reg_324, icmp_ln587_reg_1035_pp1_iter14_reg, select_ln590_2_reg_1054, ap_enable_reg_pp1_iter15)
    begin
        if (((ap_enable_reg_pp1_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln587_reg_1035_pp1_iter14_reg = ap_const_lv1_0))) then 
            ap_phi_mux_image_in_raw_pad_bur_3_phi_fu_328_p4 <= select_ln590_2_reg_1054;
        else 
            ap_phi_mux_image_in_raw_pad_bur_3_phi_fu_328_p4 <= image_in_raw_pad_bur_3_reg_324;
        end if; 
    end process;


    ap_phi_mux_image_in_raw_pad_bur_7_phi_fu_376_p4_assign_proc : process(ap_block_pp2_stage0, image_in_raw_pad_bur_7_reg_372, icmp_ln596_reg_1106_pp2_iter14_reg, select_ln599_2_reg_1125, ap_enable_reg_pp2_iter15)
    begin
        if (((ap_enable_reg_pp2_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln596_reg_1106_pp2_iter14_reg = ap_const_lv1_0))) then 
            ap_phi_mux_image_in_raw_pad_bur_7_phi_fu_376_p4 <= select_ln599_2_reg_1125;
        else 
            ap_phi_mux_image_in_raw_pad_bur_7_phi_fu_376_p4 <= image_in_raw_pad_bur_7_reg_372;
        end if; 
    end process;


    ap_phi_mux_image_in_raw_pad_bur_phi_fu_282_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln578_reg_957, image_in_raw_pad_bur_reg_278, ap_CS_fsm_pp0_stage0, select_ln578_reg_977, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln578_reg_957 = ap_const_lv1_0))) then 
            ap_phi_mux_image_in_raw_pad_bur_phi_fu_282_p4 <= select_ln578_reg_977;
        else 
            ap_phi_mux_image_in_raw_pad_bur_phi_fu_282_p4 <= image_in_raw_pad_bur_reg_278;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten15_phi_fu_364_p4_assign_proc : process(ap_block_pp2_stage0, icmp_ln596_reg_1106, indvar_flatten15_reg_360, ap_CS_fsm_pp2_stage0, add_ln596_reg_1110, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln596_reg_1106 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten15_phi_fu_364_p4 <= add_ln596_reg_1110;
        else 
            ap_phi_mux_indvar_flatten15_phi_fu_364_p4 <= indvar_flatten15_reg_360;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten7_phi_fu_316_p4_assign_proc : process(ap_block_pp1_stage0, icmp_ln587_reg_1035, indvar_flatten7_reg_312, ap_CS_fsm_pp1_stage0, add_ln587_reg_1039, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln587_reg_1035 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten7_phi_fu_316_p4 <= add_ln587_reg_1039;
        else 
            ap_phi_mux_indvar_flatten7_phi_fu_316_p4 <= indvar_flatten7_reg_312;
        end if; 
    end process;


    ap_phi_mux_j2_0_phi_fu_352_p4_assign_proc : process(ap_block_pp1_stage0, j2_0_reg_348, icmp_ln587_reg_1035_pp1_iter14_reg, j_1_reg_1060, ap_enable_reg_pp1_iter15)
    begin
        if (((ap_enable_reg_pp1_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln587_reg_1035_pp1_iter14_reg = ap_const_lv1_0))) then 
            ap_phi_mux_j2_0_phi_fu_352_p4 <= j_1_reg_1060;
        else 
            ap_phi_mux_j2_0_phi_fu_352_p4 <= j2_0_reg_348;
        end if; 
    end process;


    ap_phi_mux_j4_0_phi_fu_400_p4_assign_proc : process(ap_block_pp2_stage0, j4_0_reg_396, icmp_ln596_reg_1106_pp2_iter14_reg, j_2_reg_1131, ap_enable_reg_pp2_iter15)
    begin
        if (((ap_enable_reg_pp2_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln596_reg_1106_pp2_iter14_reg = ap_const_lv1_0))) then 
            ap_phi_mux_j4_0_phi_fu_400_p4 <= j_2_reg_1131;
        else 
            ap_phi_mux_j4_0_phi_fu_400_p4 <= j4_0_reg_396;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_52_fu_715_p2 <= "1" when (grp_fu_653_p2 = ap_const_lv12_0) else "0";
    empty_56_fu_837_p2 <= "1" when (grp_fu_775_p2 = ap_const_lv12_0) else "0";

    grp_fu_653_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_653_ce <= ap_const_logic_1;
        else 
            grp_fu_653_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_653_p1 <= ap_const_lv12_54(8 - 1 downto 0);

    grp_fu_775_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_775_ce <= ap_const_logic_1;
        else 
            grp_fu_775_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_775_p1 <= ap_const_lv12_54(8 - 1 downto 0);
    grp_fu_888_p0 <= grp_fu_888_p00(6 - 1 downto 0);
    grp_fu_888_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln581_1_reg_1003),13));
    grp_fu_888_p1 <= ap_const_lv13_54(8 - 1 downto 0);
    grp_fu_888_p2 <= grp_fu_888_p20(7 - 1 downto 0);
    grp_fu_888_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln581_reg_971_pp0_iter8_reg),13));
    grp_fu_896_p0 <= grp_fu_896_p00(6 - 1 downto 0);
    grp_fu_896_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln590_1_reg_1080),13));
    grp_fu_896_p1 <= ap_const_lv13_54(8 - 1 downto 0);
    grp_fu_896_p2 <= grp_fu_896_p20(7 - 1 downto 0);
    grp_fu_896_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln590_reg_1049_pp1_iter22_reg),13));
    grp_fu_905_p0 <= grp_fu_905_p00(6 - 1 downto 0);
    grp_fu_905_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln599_1_reg_1151),13));
    grp_fu_905_p1 <= ap_const_lv13_54(8 - 1 downto 0);
    grp_fu_905_p2 <= grp_fu_905_p20(7 - 1 downto 0);
    grp_fu_905_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln599_reg_1120_pp2_iter22_reg),13));
    i_2_fu_731_p2 <= std_logic_vector(unsigned(ap_phi_mux_i1_0_phi_fu_340_p4) + unsigned(ap_const_lv6_1));
    i_4_fu_853_p2 <= std_logic_vector(unsigned(ap_phi_mux_i3_0_phi_fu_388_p4) + unsigned(ap_const_lv6_1));
    i_fu_587_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_293_p4) + unsigned(ap_const_lv6_1));
    icmp_ln578_fu_481_p2 <= "1" when (indvar_flatten_reg_267 = ap_const_lv12_E70) else "0";
    icmp_ln579_fu_499_p2 <= "1" when (j_0_reg_301 = ap_const_lv7_54) else "0";
    icmp_ln587_fu_641_p2 <= "1" when (ap_phi_mux_indvar_flatten7_phi_fu_316_p4 = ap_const_lv12_E70) else "0";
    icmp_ln588_fu_665_p2 <= "1" when (ap_phi_mux_j2_0_phi_fu_352_p4 = ap_const_lv7_54) else "0";
    icmp_ln596_fu_763_p2 <= "1" when (ap_phi_mux_indvar_flatten15_phi_fu_364_p4 = ap_const_lv12_E70) else "0";
    icmp_ln597_fu_787_p2 <= "1" when (ap_phi_mux_j4_0_phi_fu_400_p4 = ap_const_lv7_54) else "0";

    image_in_raw_pad_burst_blk_n_AR_assign_proc : process(m_axi_image_in_raw_pad_burst_ARREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln578_reg_957_pp0_iter1_reg, ap_enable_reg_pp1_iter16, ap_block_pp1_stage0, empty_52_reg_1070, ap_enable_reg_pp2_iter16, ap_block_pp2_stage0, empty_56_reg_1141)
    begin
        if ((((ap_enable_reg_pp2_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (empty_56_reg_1141 = ap_const_lv1_1)) or ((ap_enable_reg_pp1_iter16 = ap_const_logic_1) and (empty_52_reg_1070 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln578_reg_957_pp0_iter1_reg = ap_const_lv1_0)))) then 
            image_in_raw_pad_burst_blk_n_AR <= m_axi_image_in_raw_pad_burst_ARREADY;
        else 
            image_in_raw_pad_burst_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    image_in_raw_pad_burst_blk_n_R_assign_proc : process(m_axi_image_in_raw_pad_burst_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, icmp_ln578_reg_957_pp0_iter8_reg, ap_block_pp1_stage0, ap_enable_reg_pp1_iter23, icmp_ln587_reg_1035_pp1_iter22_reg, ap_block_pp2_stage0, ap_enable_reg_pp2_iter23, icmp_ln596_reg_1106_pp2_iter22_reg)
    begin
        if ((((ap_enable_reg_pp2_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln596_reg_1106_pp2_iter22_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln587_reg_1035_pp1_iter22_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln578_reg_957_pp0_iter8_reg = ap_const_lv1_0)))) then 
            image_in_raw_pad_burst_blk_n_R <= m_axi_image_in_raw_pad_burst_RVALID;
        else 
            image_in_raw_pad_burst_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    img_buf_0_V_address0 <= sext_ln203_fu_610_p1(12 - 1 downto 0);

    img_buf_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            img_buf_0_V_ce0 <= ap_const_logic_1;
        else 
            img_buf_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    img_buf_0_V_d0 <= img_norm_ch_V_q0;

    img_buf_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln578_reg_957_pp0_iter10_reg, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln578_reg_957_pp0_iter10_reg = ap_const_lv1_0))) then 
            img_buf_0_V_we0 <= ap_const_logic_1;
        else 
            img_buf_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    img_buf_1_V_address0 <= img_buf_1_V_addr_reg_1086_pp1_iter24_reg;

    img_buf_1_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter25)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1))) then 
            img_buf_1_V_ce0 <= ap_const_logic_1;
        else 
            img_buf_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    img_buf_1_V_d0 <= img_norm_ch_V_q0;

    img_buf_1_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln587_reg_1035_pp1_iter24_reg, ap_enable_reg_pp1_iter25)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1) and (icmp_ln587_reg_1035_pp1_iter24_reg = ap_const_lv1_0))) then 
            img_buf_1_V_we0 <= ap_const_logic_1;
        else 
            img_buf_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    img_buf_2_V_address0 <= img_buf_2_V_addr_reg_1157_pp2_iter24_reg;

    img_buf_2_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter25)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter25 = ap_const_logic_1))) then 
            img_buf_2_V_ce0 <= ap_const_logic_1;
        else 
            img_buf_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    img_buf_2_V_d0 <= img_norm_ch_V_q0;

    img_buf_2_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln596_reg_1106_pp2_iter24_reg, ap_enable_reg_pp2_iter25)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter25 = ap_const_logic_1) and (icmp_ln596_reg_1106_pp2_iter24_reg = ap_const_lv1_0))) then 
            img_buf_2_V_we0 <= ap_const_logic_1;
        else 
            img_buf_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    img_norm_ch_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_enable_reg_pp0_iter10, ap_enable_reg_pp1_iter24, ap_enable_reg_pp2_iter24, sext_ln581_fu_606_p1, sext_ln590_fu_754_p1, sext_ln599_fu_876_p1)
    begin
        if (((ap_enable_reg_pp2_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            img_norm_ch_V_address0 <= sext_ln599_fu_876_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            img_norm_ch_V_address0 <= sext_ln590_fu_754_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_norm_ch_V_address0 <= sext_ln581_fu_606_p1(8 - 1 downto 0);
        else 
            img_norm_ch_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    img_norm_ch_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10, ap_enable_reg_pp1_iter24, ap_enable_reg_pp2_iter24)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter24 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter24 = ap_const_logic_1)))) then 
            img_norm_ch_V_ce0 <= ap_const_logic_1;
        else 
            img_norm_ch_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_687_p2 <= std_logic_vector(unsigned(select_ln590_fu_671_p3) + unsigned(ap_const_lv7_1));
    j_2_fu_809_p2 <= std_logic_vector(unsigned(select_ln599_fu_793_p3) + unsigned(ap_const_lv7_1));
    j_fu_531_p2 <= std_logic_vector(unsigned(select_ln581_fu_505_p3) + unsigned(ap_const_lv7_1));

    m_axi_image_in_raw_pad_burst_ARADDR_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln578_reg_957_pp0_iter1_reg, ap_enable_reg_pp1_iter16, empty_52_reg_1070, ap_enable_reg_pp2_iter16, empty_56_reg_1141, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001, zext_ln581_3_fu_577_p1, zext_ln590_2_fu_721_p1, zext_ln599_1_fu_843_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter16 = ap_const_logic_1) and (empty_56_reg_1141 = ap_const_lv1_1))) then 
            m_axi_image_in_raw_pad_burst_ARADDR <= zext_ln599_1_fu_843_p1(32 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter16 = ap_const_logic_1) and (empty_52_reg_1070 = ap_const_lv1_1))) then 
            m_axi_image_in_raw_pad_burst_ARADDR <= zext_ln590_2_fu_721_p1(32 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln578_reg_957_pp0_iter1_reg = ap_const_lv1_0))) then 
            m_axi_image_in_raw_pad_burst_ARADDR <= zext_ln581_3_fu_577_p1(32 - 1 downto 0);
        else 
            m_axi_image_in_raw_pad_burst_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_image_in_raw_pad_burst_ARBURST <= ap_const_lv2_0;
    m_axi_image_in_raw_pad_burst_ARCACHE <= ap_const_lv4_0;
    m_axi_image_in_raw_pad_burst_ARID <= ap_const_lv1_0;

    m_axi_image_in_raw_pad_burst_ARLEN_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln578_reg_957_pp0_iter1_reg, ap_enable_reg_pp1_iter16, empty_52_reg_1070, ap_enable_reg_pp2_iter16, empty_56_reg_1141, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter16 = ap_const_logic_1) and (empty_56_reg_1141 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter16 = ap_const_logic_1) and (empty_52_reg_1070 = ap_const_lv1_1)))) then 
            m_axi_image_in_raw_pad_burst_ARLEN <= ap_const_lv32_54;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln578_reg_957_pp0_iter1_reg = ap_const_lv1_0))) then 
            m_axi_image_in_raw_pad_burst_ARLEN <= ap_const_lv32_1;
        else 
            m_axi_image_in_raw_pad_burst_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_image_in_raw_pad_burst_ARLOCK <= ap_const_lv2_0;
    m_axi_image_in_raw_pad_burst_ARPROT <= ap_const_lv3_0;
    m_axi_image_in_raw_pad_burst_ARQOS <= ap_const_lv4_0;
    m_axi_image_in_raw_pad_burst_ARREGION <= ap_const_lv4_0;
    m_axi_image_in_raw_pad_burst_ARSIZE <= ap_const_lv3_0;
    m_axi_image_in_raw_pad_burst_ARUSER <= ap_const_lv1_0;

    m_axi_image_in_raw_pad_burst_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln578_reg_957_pp0_iter1_reg, ap_enable_reg_pp1_iter16, empty_52_reg_1070, ap_enable_reg_pp2_iter16, empty_56_reg_1141, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter16 = ap_const_logic_1) and (empty_56_reg_1141 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter16 = ap_const_logic_1) and (empty_52_reg_1070 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln578_reg_957_pp0_iter1_reg = ap_const_lv1_0)))) then 
            m_axi_image_in_raw_pad_burst_ARVALID <= ap_const_logic_1;
        else 
            m_axi_image_in_raw_pad_burst_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_image_in_raw_pad_burst_AWADDR <= ap_const_lv32_0;
    m_axi_image_in_raw_pad_burst_AWBURST <= ap_const_lv2_0;
    m_axi_image_in_raw_pad_burst_AWCACHE <= ap_const_lv4_0;
    m_axi_image_in_raw_pad_burst_AWID <= ap_const_lv1_0;
    m_axi_image_in_raw_pad_burst_AWLEN <= ap_const_lv32_0;
    m_axi_image_in_raw_pad_burst_AWLOCK <= ap_const_lv2_0;
    m_axi_image_in_raw_pad_burst_AWPROT <= ap_const_lv3_0;
    m_axi_image_in_raw_pad_burst_AWQOS <= ap_const_lv4_0;
    m_axi_image_in_raw_pad_burst_AWREGION <= ap_const_lv4_0;
    m_axi_image_in_raw_pad_burst_AWSIZE <= ap_const_lv3_0;
    m_axi_image_in_raw_pad_burst_AWUSER <= ap_const_lv1_0;
    m_axi_image_in_raw_pad_burst_AWVALID <= ap_const_logic_0;
    m_axi_image_in_raw_pad_burst_BREADY <= ap_const_logic_0;

    m_axi_image_in_raw_pad_burst_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln578_reg_957_pp0_iter8_reg, ap_enable_reg_pp1_iter23, icmp_ln587_reg_1035_pp1_iter22_reg, ap_enable_reg_pp2_iter23, icmp_ln596_reg_1106_pp2_iter22_reg, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter23 = ap_const_logic_1) and (icmp_ln596_reg_1106_pp2_iter22_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter23 = ap_const_logic_1) and (icmp_ln587_reg_1035_pp1_iter22_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln578_reg_957_pp0_iter8_reg = ap_const_lv1_0)))) then 
            m_axi_image_in_raw_pad_burst_RREADY <= ap_const_logic_1;
        else 
            m_axi_image_in_raw_pad_burst_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_image_in_raw_pad_burst_WDATA <= ap_const_lv32_0;
    m_axi_image_in_raw_pad_burst_WID <= ap_const_lv1_0;
    m_axi_image_in_raw_pad_burst_WLAST <= ap_const_logic_0;
    m_axi_image_in_raw_pad_burst_WSTRB <= ap_const_lv4_0;
    m_axi_image_in_raw_pad_burst_WUSER <= ap_const_lv1_0;
    m_axi_image_in_raw_pad_burst_WVALID <= ap_const_logic_0;
    mul_ln577_fu_880_p0 <= ap_const_lv20_284(11 - 1 downto 0);
    mul_ln577_fu_880_p1 <= mul_ln577_fu_880_p10(9 - 1 downto 0);
    mul_ln577_fu_880_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln577_reg_914),20));
    select_ln578_fu_513_p3 <= 
        add_ln583_fu_493_p2 when (icmp_ln579_fu_499_p2(0) = '1') else 
        ap_phi_mux_image_in_raw_pad_bur_phi_fu_282_p4;
    select_ln581_1_fu_593_p3 <= 
        i_fu_587_p2 when (icmp_ln579_reg_966_pp0_iter7_reg(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_293_p4;
    select_ln581_fu_505_p3 <= 
        ap_const_lv7_0 when (icmp_ln579_fu_499_p2(0) = '1') else 
        j_0_reg_301;
    select_ln590_1_fu_737_p3 <= 
        i_2_fu_731_p2 when (icmp_ln588_reg_1044_pp1_iter21_reg(0) = '1') else 
        ap_phi_mux_i1_0_phi_fu_340_p4;
    select_ln590_2_fu_679_p3 <= 
        add_ln592_fu_659_p2 when (icmp_ln588_fu_665_p2(0) = '1') else 
        ap_phi_mux_image_in_raw_pad_bur_3_phi_fu_328_p4;
    select_ln590_fu_671_p3 <= 
        ap_const_lv7_0 when (icmp_ln588_fu_665_p2(0) = '1') else 
        ap_phi_mux_j2_0_phi_fu_352_p4;
    select_ln599_1_fu_859_p3 <= 
        i_4_fu_853_p2 when (icmp_ln597_reg_1115_pp2_iter21_reg(0) = '1') else 
        ap_phi_mux_i3_0_phi_fu_388_p4;
    select_ln599_2_fu_801_p3 <= 
        add_ln601_fu_781_p2 when (icmp_ln597_fu_787_p2(0) = '1') else 
        ap_phi_mux_image_in_raw_pad_bur_7_phi_fu_376_p4;
    select_ln599_fu_793_p3 <= 
        ap_const_lv7_0 when (icmp_ln597_fu_787_p2(0) = '1') else 
        ap_phi_mux_j4_0_phi_fu_400_p4;
        sext_ln203_1_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_896_p3),64));

        sext_ln203_2_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_905_p3),64));

        sext_ln203_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_reg_1009_pp0_iter10_reg),64));

        sext_ln581_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(image_in_raw_pad_bur_5_reg_1014),64));

        sext_ln590_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(image_in_raw_pad_bur_9_reg_1091),64));

        sext_ln599_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(image_in_raw_pad_bur_12_reg_1162),64));

    shl_ln577_1_fu_408_p3 <= (col & ap_const_lv3_0);
    shl_ln577_3_fu_447_p3 <= (row & ap_const_lv6_0);
    shl_ln577_4_fu_455_p3 <= (row & ap_const_lv4_0);
    tmp1_fu_420_p5 <= (((col & ap_const_lv2_0) & offset_h) & ap_const_lv1_0);
    tmp2_fu_540_p4 <= ((tmp_3_reg_982 & offset_w) & ap_const_lv1_0);
    tmp_1_fu_619_p4 <= add_ln577_1_reg_940(9 downto 2);
    tmp_2_fu_628_p4 <= ((tmp_1_fu_619_p4 & offset_w) & ap_const_lv1_0);
    trunc_ln577_1_fu_444_p1 <= mul_ln577_fu_880_p2(18 - 1 downto 0);
    trunc_ln577_fu_441_p1 <= mul_ln577_fu_880_p2(19 - 1 downto 0);
    zext_ln577_2_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln577_4_fu_455_p3),10));
    zext_ln577_3_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln577_1_fu_467_p2),18));
    zext_ln577_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln577_1_fu_408_p3),9));
    zext_ln578_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_raw_pad_burst_offset),31));
    zext_ln581_1_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_540_p4),18));
    zext_ln581_2_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln581_fu_562_p2),31));
    zext_ln581_3_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln581_3_reg_992),64));
    zext_ln581_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln581_reg_971),18));
    zext_ln588_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln590_2_fu_701_p2),31));
    zext_ln590_1_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln590_1_fu_693_p2),19));
    zext_ln590_2_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln590_3_reg_1065),64));
    zext_ln590_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_628_p4),15));
    zext_ln597_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln599_2_fu_823_p2),31));
    zext_ln599_1_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln599_3_reg_1136),64));
    zext_ln599_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln599_1_fu_815_p2),20));
end behav;
