-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_weight_1x1_from is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dest_V_offset_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_AWVALID : OUT STD_LOGIC;
    m_axi_src_V_AWREADY : IN STD_LOGIC;
    m_axi_src_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_WVALID : OUT STD_LOGIC;
    m_axi_src_V_WREADY : IN STD_LOGIC;
    m_axi_src_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_src_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_src_V_WLAST : OUT STD_LOGIC;
    m_axi_src_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_ARVALID : OUT STD_LOGIC;
    m_axi_src_V_ARREADY : IN STD_LOGIC;
    m_axi_src_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_RVALID : IN STD_LOGIC;
    m_axi_src_V_RREADY : OUT STD_LOGIC;
    m_axi_src_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_src_V_RLAST : IN STD_LOGIC;
    m_axi_src_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_BVALID : IN STD_LOGIC;
    m_axi_src_V_BREADY : OUT STD_LOGIC;
    m_axi_src_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    src_V_offset1 : IN STD_LOGIC_VECTOR (8 downto 0);
    weight_buf_1x1_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_0_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_0_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_0_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_1_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_1_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_1_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_2_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_2_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_2_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_3_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_3_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_3_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_4_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_4_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_4_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_5_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_5_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_5_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_6_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_6_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_6_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_7_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_7_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_7_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_8_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_8_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_8_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_9_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_9_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_9_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_10_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_10_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_10_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_11_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_11_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_11_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_12_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_12_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_12_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_13_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_13_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_13_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_14_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_14_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_14_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_15_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_15_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_15_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_15_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_16_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_16_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_16_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_16_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_17_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_17_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_17_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_17_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_18_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_18_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_18_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_18_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_19_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_19_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_19_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_19_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_20_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_20_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_20_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_20_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_21_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_21_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_21_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_21_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_22_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_22_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_22_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_22_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_23_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_23_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_23_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_23_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_24_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_24_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_24_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_24_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_25_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_25_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_25_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_25_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_26_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_26_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_26_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_26_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_27_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_27_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_27_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_27_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_28_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_28_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_28_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_28_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_29_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_29_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_29_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_29_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_30_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_30_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_30_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_30_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_buf_1x1_V_31_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_1x1_V_31_ce0 : OUT STD_LOGIC;
    weight_buf_1x1_V_31_we0 : OUT STD_LOGIC;
    weight_buf_1x1_V_31_d0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of load_weight_1x1_from is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101010";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111010";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001010";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011010";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101010";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111010";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001010";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011010";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101010";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111010";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001010";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011010";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101010";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111010";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001010";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011010";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101010";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111010";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001010";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011010";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101010";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal src_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln376_reg_1136 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_0_reg_698 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln647_fu_726_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln647_reg_1120 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_7_fu_742_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_reg_1131 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln376_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln376_reg_1136_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_fu_756_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ci_reg_1140 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln339_fu_766_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_reg_1145 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln647_fu_771_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln647_reg_1150 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_1_reg_1155 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_2_reg_1160 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_3_reg_1165 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_4_reg_1170 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_5_reg_1175 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_6_reg_1180 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_7_reg_1185 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_8_reg_1190 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_9_reg_1195 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_s_reg_1200 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_10_reg_1205 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_11_reg_1210 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_12_reg_1215 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_13_reg_1220 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_14_reg_1225 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_15_reg_1230 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_16_reg_1235 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_17_reg_1240 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_18_reg_1245 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_19_reg_1250 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_20_reg_1255 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_21_reg_1260 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_22_reg_1265 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_23_reg_1270 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_24_reg_1275 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_25_reg_1280 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_26_reg_1285 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_27_reg_1290 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_28_reg_1295 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_29_reg_1300 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_36_30_reg_1305 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_ci_0_phi_fu_702_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln339_8_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_3_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_710_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln376_fu_718_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln647_fu_722_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln339_fu_762_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ci_0_reg_698_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln376_reg_1136 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ci_0_reg_698 <= ci_reg_1140;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                ci_0_reg_698 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln376_reg_1136 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln339_reg_1145 <= add_ln339_fu_766_p2;
                p_Result_36_10_reg_1205 <= m_axi_src_V_RDATA(186 downto 176);
                p_Result_36_11_reg_1210 <= m_axi_src_V_RDATA(202 downto 192);
                p_Result_36_12_reg_1215 <= m_axi_src_V_RDATA(218 downto 208);
                p_Result_36_13_reg_1220 <= m_axi_src_V_RDATA(234 downto 224);
                p_Result_36_14_reg_1225 <= m_axi_src_V_RDATA(250 downto 240);
                p_Result_36_15_reg_1230 <= m_axi_src_V_RDATA(266 downto 256);
                p_Result_36_16_reg_1235 <= m_axi_src_V_RDATA(282 downto 272);
                p_Result_36_17_reg_1240 <= m_axi_src_V_RDATA(298 downto 288);
                p_Result_36_18_reg_1245 <= m_axi_src_V_RDATA(314 downto 304);
                p_Result_36_19_reg_1250 <= m_axi_src_V_RDATA(330 downto 320);
                p_Result_36_1_reg_1155 <= m_axi_src_V_RDATA(26 downto 16);
                p_Result_36_20_reg_1255 <= m_axi_src_V_RDATA(346 downto 336);
                p_Result_36_21_reg_1260 <= m_axi_src_V_RDATA(362 downto 352);
                p_Result_36_22_reg_1265 <= m_axi_src_V_RDATA(378 downto 368);
                p_Result_36_23_reg_1270 <= m_axi_src_V_RDATA(394 downto 384);
                p_Result_36_24_reg_1275 <= m_axi_src_V_RDATA(410 downto 400);
                p_Result_36_25_reg_1280 <= m_axi_src_V_RDATA(426 downto 416);
                p_Result_36_26_reg_1285 <= m_axi_src_V_RDATA(442 downto 432);
                p_Result_36_27_reg_1290 <= m_axi_src_V_RDATA(458 downto 448);
                p_Result_36_28_reg_1295 <= m_axi_src_V_RDATA(474 downto 464);
                p_Result_36_29_reg_1300 <= m_axi_src_V_RDATA(490 downto 480);
                p_Result_36_2_reg_1160 <= m_axi_src_V_RDATA(42 downto 32);
                p_Result_36_30_reg_1305 <= m_axi_src_V_RDATA(506 downto 496);
                p_Result_36_3_reg_1165 <= m_axi_src_V_RDATA(58 downto 48);
                p_Result_36_4_reg_1170 <= m_axi_src_V_RDATA(74 downto 64);
                p_Result_36_5_reg_1175 <= m_axi_src_V_RDATA(90 downto 80);
                p_Result_36_6_reg_1180 <= m_axi_src_V_RDATA(106 downto 96);
                p_Result_36_7_reg_1185 <= m_axi_src_V_RDATA(122 downto 112);
                p_Result_36_8_reg_1190 <= m_axi_src_V_RDATA(138 downto 128);
                p_Result_36_9_reg_1195 <= m_axi_src_V_RDATA(154 downto 144);
                p_Result_36_s_reg_1200 <= m_axi_src_V_RDATA(170 downto 160);
                trunc_ln647_reg_1150 <= trunc_ln647_fu_771_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln647_reg_1120 <= add_ln647_fu_726_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ci_reg_1140 <= ci_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln376_reg_1136 <= icmp_ln376_fu_750_p2;
                icmp_ln376_reg_1136_pp0_iter1_reg <= icmp_ln376_reg_1136;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    tmp_7_reg_1131(8 downto 5) <= tmp_7_fu_742_p3(8 downto 5);
            end if;
        end if;
    end process;
    tmp_7_reg_1131(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_src_V_ARREADY, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, icmp_ln376_fu_750_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_src_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln376_fu_750_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln376_fu_750_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln339_fu_766_p2 <= std_logic_vector(unsigned(zext_ln339_fu_762_p1) + unsigned(tmp_7_reg_1131));
    add_ln647_fu_726_p2 <= std_logic_vector(unsigned(zext_ln376_fu_718_p1) + unsigned(zext_ln647_fu_722_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_src_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln376_reg_1136)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln376_reg_1136 = ap_const_lv1_0) and (m_axi_src_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_src_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln376_reg_1136)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln376_reg_1136 = ap_const_lv1_0) and (m_axi_src_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(m_axi_src_V_RVALID, icmp_ln376_reg_1136)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((icmp_ln376_reg_1136 = ap_const_lv1_0) and (m_axi_src_V_RVALID = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln376_fu_750_p2)
    begin
        if ((icmp_ln376_fu_750_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ci_0_phi_fu_702_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln376_reg_1136, ci_0_reg_698, ci_reg_1140)
    begin
        if (((icmp_ln376_reg_1136 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ci_0_phi_fu_702_p4 <= ci_reg_1140;
        else 
            ap_phi_mux_ci_0_phi_fu_702_p4 <= ci_0_reg_698;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ci_fu_756_p2 <= std_logic_vector(unsigned(ap_phi_mux_ci_0_phi_fu_702_p4) + unsigned(ap_const_lv6_1));
    icmp_ln376_fu_750_p2 <= "1" when (ap_phi_mux_ci_0_phi_fu_702_p4 = ap_const_lv6_20) else "0";
    m_axi_src_V_ARADDR <= zext_ln647_3_fu_732_p1(32 - 1 downto 0);
    m_axi_src_V_ARBURST <= ap_const_lv2_0;
    m_axi_src_V_ARCACHE <= ap_const_lv4_0;
    m_axi_src_V_ARID <= ap_const_lv1_0;
    m_axi_src_V_ARLEN <= ap_const_lv32_20;
    m_axi_src_V_ARLOCK <= ap_const_lv2_0;
    m_axi_src_V_ARPROT <= ap_const_lv3_0;
    m_axi_src_V_ARQOS <= ap_const_lv4_0;
    m_axi_src_V_ARREGION <= ap_const_lv4_0;
    m_axi_src_V_ARSIZE <= ap_const_lv3_0;
    m_axi_src_V_ARUSER <= ap_const_lv1_0;

    m_axi_src_V_ARVALID_assign_proc : process(m_axi_src_V_ARREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_src_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_src_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_src_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_V_AWADDR <= ap_const_lv32_0;
    m_axi_src_V_AWBURST <= ap_const_lv2_0;
    m_axi_src_V_AWCACHE <= ap_const_lv4_0;
    m_axi_src_V_AWID <= ap_const_lv1_0;
    m_axi_src_V_AWLEN <= ap_const_lv32_0;
    m_axi_src_V_AWLOCK <= ap_const_lv2_0;
    m_axi_src_V_AWPROT <= ap_const_lv3_0;
    m_axi_src_V_AWQOS <= ap_const_lv4_0;
    m_axi_src_V_AWREGION <= ap_const_lv4_0;
    m_axi_src_V_AWSIZE <= ap_const_lv3_0;
    m_axi_src_V_AWUSER <= ap_const_lv1_0;
    m_axi_src_V_AWVALID <= ap_const_logic_0;
    m_axi_src_V_BREADY <= ap_const_logic_0;

    m_axi_src_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln376_reg_1136, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln376_reg_1136 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_src_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_src_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_src_V_WID <= ap_const_lv1_0;
    m_axi_src_V_WLAST <= ap_const_logic_0;
    m_axi_src_V_WSTRB <= ap_const_lv64_0;
    m_axi_src_V_WUSER <= ap_const_lv1_0;
    m_axi_src_V_WVALID <= ap_const_logic_0;

    src_V_blk_n_AR_assign_proc : process(m_axi_src_V_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_V_blk_n_AR <= m_axi_src_V_ARREADY;
        else 
            src_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    src_V_blk_n_R_assign_proc : process(m_axi_src_V_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln376_reg_1136)
    begin
        if (((icmp_ln376_reg_1136 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_V_blk_n_R <= m_axi_src_V_RVALID;
        else 
            src_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    tmp_6_fu_710_p3 <= (src_V_offset1 & ap_const_lv5_0);
    tmp_7_fu_742_p3 <= (dest_V_offset_offset & ap_const_lv5_0);
    trunc_ln647_fu_771_p1 <= m_axi_src_V_RDATA(11 - 1 downto 0);
    weight_buf_1x1_V_0_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_0_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_0_d0 <= trunc_ln647_reg_1150;

    weight_buf_1x1_V_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_0_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_10_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_10_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_10_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_10_d0 <= p_Result_36_s_reg_1200;

    weight_buf_1x1_V_10_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_10_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_11_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_11_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_11_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_11_d0 <= p_Result_36_10_reg_1205;

    weight_buf_1x1_V_11_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_11_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_12_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_12_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_12_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_12_d0 <= p_Result_36_11_reg_1210;

    weight_buf_1x1_V_12_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_12_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_13_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_13_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_13_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_13_d0 <= p_Result_36_12_reg_1215;

    weight_buf_1x1_V_13_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_13_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_14_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_14_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_14_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_14_d0 <= p_Result_36_13_reg_1220;

    weight_buf_1x1_V_14_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_14_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_15_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_15_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_15_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_15_d0 <= p_Result_36_14_reg_1225;

    weight_buf_1x1_V_15_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_15_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_16_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_16_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_16_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_16_d0 <= p_Result_36_15_reg_1230;

    weight_buf_1x1_V_16_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_16_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_17_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_17_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_17_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_17_d0 <= p_Result_36_16_reg_1235;

    weight_buf_1x1_V_17_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_17_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_17_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_18_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_18_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_18_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_18_d0 <= p_Result_36_17_reg_1240;

    weight_buf_1x1_V_18_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_18_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_18_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_19_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_19_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_19_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_19_d0 <= p_Result_36_18_reg_1245;

    weight_buf_1x1_V_19_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_19_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_19_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_1_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_1_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_1_d0 <= p_Result_36_1_reg_1155;

    weight_buf_1x1_V_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_1_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_20_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_20_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_20_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_20_d0 <= p_Result_36_19_reg_1250;

    weight_buf_1x1_V_20_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_20_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_20_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_21_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_21_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_21_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_21_d0 <= p_Result_36_20_reg_1255;

    weight_buf_1x1_V_21_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_21_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_21_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_22_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_22_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_22_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_22_d0 <= p_Result_36_21_reg_1260;

    weight_buf_1x1_V_22_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_22_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_22_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_23_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_23_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_23_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_23_d0 <= p_Result_36_22_reg_1265;

    weight_buf_1x1_V_23_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_23_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_23_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_24_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_24_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_24_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_24_d0 <= p_Result_36_23_reg_1270;

    weight_buf_1x1_V_24_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_24_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_24_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_25_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_25_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_25_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_25_d0 <= p_Result_36_24_reg_1275;

    weight_buf_1x1_V_25_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_25_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_25_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_26_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_26_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_26_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_26_d0 <= p_Result_36_25_reg_1280;

    weight_buf_1x1_V_26_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_26_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_26_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_27_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_27_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_27_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_27_d0 <= p_Result_36_26_reg_1285;

    weight_buf_1x1_V_27_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_27_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_27_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_28_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_28_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_28_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_28_d0 <= p_Result_36_27_reg_1290;

    weight_buf_1x1_V_28_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_28_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_28_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_29_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_29_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_29_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_29_d0 <= p_Result_36_28_reg_1295;

    weight_buf_1x1_V_29_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_29_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_29_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_2_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_2_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_2_d0 <= p_Result_36_2_reg_1160;

    weight_buf_1x1_V_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_2_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_30_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_30_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_30_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_30_d0 <= p_Result_36_29_reg_1300;

    weight_buf_1x1_V_30_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_30_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_30_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_31_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_31_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_31_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_31_d0 <= p_Result_36_30_reg_1305;

    weight_buf_1x1_V_31_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_31_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_31_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_3_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_3_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_3_d0 <= p_Result_36_3_reg_1165;

    weight_buf_1x1_V_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_3_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_4_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_4_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_4_d0 <= p_Result_36_4_reg_1170;

    weight_buf_1x1_V_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_4_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_5_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_5_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_5_d0 <= p_Result_36_5_reg_1175;

    weight_buf_1x1_V_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_5_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_6_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_6_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_6_d0 <= p_Result_36_6_reg_1180;

    weight_buf_1x1_V_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_6_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_7_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_7_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_7_d0 <= p_Result_36_7_reg_1185;

    weight_buf_1x1_V_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_7_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_8_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_8_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_8_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_8_d0 <= p_Result_36_8_reg_1190;

    weight_buf_1x1_V_8_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_8_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_9_address0 <= zext_ln339_8_fu_1085_p1(7 - 1 downto 0);

    weight_buf_1x1_V_9_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_9_ce0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_1x1_V_9_d0 <= p_Result_36_9_reg_1195;

    weight_buf_1x1_V_9_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_1136_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln376_reg_1136_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_buf_1x1_V_9_we0 <= ap_const_logic_1;
        else 
            weight_buf_1x1_V_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln339_8_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln339_reg_1145),64));
    zext_ln339_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_0_reg_698),9));
    zext_ln376_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_V_offset),27));
    zext_ln647_3_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln647_reg_1120),64));
    zext_ln647_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_710_p3),27));
end behav;
