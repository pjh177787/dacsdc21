-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_dw1_pool_from_D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_AWVALID : OUT STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_AWREADY : IN STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_dw1_pool_burst_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_dw1_pool_burst_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_dw1_pool_burst_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_dw1_pool_burst_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_dw1_pool_burst_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_dw1_pool_burst_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_dw1_pool_burst_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_dw1_pool_burst_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_dw1_pool_burst_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_dw1_pool_burst_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_dw1_pool_burst_V_WVALID : OUT STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_WREADY : IN STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_ddr_dw1_pool_burst_V_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_dw1_pool_burst_V_WLAST : OUT STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_dw1_pool_burst_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARVALID : OUT STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_ARREADY : IN STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_dw1_pool_burst_V_RVALID : IN STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_RREADY : OUT STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_ddr_dw1_pool_burst_V_RLAST : IN STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_dw1_pool_burst_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_dw1_pool_burst_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_dw1_pool_burst_V_BVALID : IN STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_BREADY : OUT STD_LOGIC;
    m_axi_ddr_dw1_pool_burst_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_dw1_pool_burst_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_dw1_pool_burst_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ddr_dw1_pool_burst_V_offset : IN STD_LOGIC_VECTOR (26 downto 0);
    buf_0_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_0_V_ce0 : OUT STD_LOGIC;
    buf_0_V_we0 : OUT STD_LOGIC;
    buf_0_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_1_V_ce0 : OUT STD_LOGIC;
    buf_1_V_we0 : OUT STD_LOGIC;
    buf_1_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_2_V_ce0 : OUT STD_LOGIC;
    buf_2_V_we0 : OUT STD_LOGIC;
    buf_2_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_3_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_3_V_ce0 : OUT STD_LOGIC;
    buf_3_V_we0 : OUT STD_LOGIC;
    buf_3_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_4_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_4_V_ce0 : OUT STD_LOGIC;
    buf_4_V_we0 : OUT STD_LOGIC;
    buf_4_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_5_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_5_V_ce0 : OUT STD_LOGIC;
    buf_5_V_we0 : OUT STD_LOGIC;
    buf_5_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_6_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_6_V_ce0 : OUT STD_LOGIC;
    buf_6_V_we0 : OUT STD_LOGIC;
    buf_6_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_7_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_7_V_ce0 : OUT STD_LOGIC;
    buf_7_V_we0 : OUT STD_LOGIC;
    buf_7_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_8_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_8_V_ce0 : OUT STD_LOGIC;
    buf_8_V_we0 : OUT STD_LOGIC;
    buf_8_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_9_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_9_V_ce0 : OUT STD_LOGIC;
    buf_9_V_we0 : OUT STD_LOGIC;
    buf_9_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_10_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_10_V_ce0 : OUT STD_LOGIC;
    buf_10_V_we0 : OUT STD_LOGIC;
    buf_10_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_11_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_11_V_ce0 : OUT STD_LOGIC;
    buf_11_V_we0 : OUT STD_LOGIC;
    buf_11_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_12_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_12_V_ce0 : OUT STD_LOGIC;
    buf_12_V_we0 : OUT STD_LOGIC;
    buf_12_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_13_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_13_V_ce0 : OUT STD_LOGIC;
    buf_13_V_we0 : OUT STD_LOGIC;
    buf_13_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_14_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_14_V_ce0 : OUT STD_LOGIC;
    buf_14_V_we0 : OUT STD_LOGIC;
    buf_14_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_15_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_15_V_ce0 : OUT STD_LOGIC;
    buf_15_V_we0 : OUT STD_LOGIC;
    buf_15_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_16_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_16_V_ce0 : OUT STD_LOGIC;
    buf_16_V_we0 : OUT STD_LOGIC;
    buf_16_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_17_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_17_V_ce0 : OUT STD_LOGIC;
    buf_17_V_we0 : OUT STD_LOGIC;
    buf_17_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_18_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_18_V_ce0 : OUT STD_LOGIC;
    buf_18_V_we0 : OUT STD_LOGIC;
    buf_18_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_19_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_19_V_ce0 : OUT STD_LOGIC;
    buf_19_V_we0 : OUT STD_LOGIC;
    buf_19_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_20_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_20_V_ce0 : OUT STD_LOGIC;
    buf_20_V_we0 : OUT STD_LOGIC;
    buf_20_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_21_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_21_V_ce0 : OUT STD_LOGIC;
    buf_21_V_we0 : OUT STD_LOGIC;
    buf_21_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_22_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_22_V_ce0 : OUT STD_LOGIC;
    buf_22_V_we0 : OUT STD_LOGIC;
    buf_22_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_23_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_23_V_ce0 : OUT STD_LOGIC;
    buf_23_V_we0 : OUT STD_LOGIC;
    buf_23_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_24_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_24_V_ce0 : OUT STD_LOGIC;
    buf_24_V_we0 : OUT STD_LOGIC;
    buf_24_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_25_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_25_V_ce0 : OUT STD_LOGIC;
    buf_25_V_we0 : OUT STD_LOGIC;
    buf_25_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_26_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_26_V_ce0 : OUT STD_LOGIC;
    buf_26_V_we0 : OUT STD_LOGIC;
    buf_26_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_27_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_27_V_ce0 : OUT STD_LOGIC;
    buf_27_V_we0 : OUT STD_LOGIC;
    buf_27_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_28_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_28_V_ce0 : OUT STD_LOGIC;
    buf_28_V_we0 : OUT STD_LOGIC;
    buf_28_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_29_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_29_V_ce0 : OUT STD_LOGIC;
    buf_29_V_we0 : OUT STD_LOGIC;
    buf_29_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_30_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_30_V_ce0 : OUT STD_LOGIC;
    buf_30_V_we0 : OUT STD_LOGIC;
    buf_30_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buf_31_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buf_31_V_ce0 : OUT STD_LOGIC;
    buf_31_V_we0 : OUT STD_LOGIC;
    buf_31_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ch_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    col : IN STD_LOGIC_VECTOR (2 downto 0);
    row : IN STD_LOGIC_VECTOR (2 downto 0);
    offset_h : IN STD_LOGIC_VECTOR (0 downto 0);
    offset_w : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of load_dw1_pool_from_D is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv17_CF90 : STD_LOGIC_VECTOR (16 downto 0) := "01100111110010000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv12_D74 : STD_LOGIC_VECTOR (11 downto 0) := "110101110100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_52 : STD_LOGIC_VECTOR (11 downto 0) := "000001010010";
    constant ap_const_lv14_144 : STD_LOGIC_VECTOR (13 downto 0) := "00000101000100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_52 : STD_LOGIC_VECTOR (6 downto 0) := "1010010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100111";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv17_144 : STD_LOGIC_VECTOR (16 downto 0) := "00000000101000100";
    constant ap_const_lv13_54 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ddr_dw1_pool_burst_V_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_62_reg_1539 : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_dw1_pool_burst_V_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal icmp_ln497_reg_1498 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_756 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ddr_dw1_pool_burst_p_reg_768 : STD_LOGIC_VECTOR (13 downto 0);
    signal h_0_reg_780 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_0_reg_792 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1467_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln647_reg_1483 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln647_s_fu_864_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln647_s_reg_1488 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln497_fu_872_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln497_reg_1493 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_ln497_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln497_reg_1498_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln497_2_fu_882_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln497_2_reg_1502 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln497_fu_912_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln497_reg_1507 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln497_1_fu_920_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln497_1_reg_1512 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal select_ln497_2_fu_928_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln497_2_reg_1518 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_fu_936_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal w_reg_1524 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1475_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_reg_1529 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal add_ln203_reg_1529_pp0_iter16_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_reg_1529_pp0_iter17_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_reg_1529_pp0_iter18_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_reg_1529_pp0_iter19_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_reg_1529_pp0_iter20_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_reg_1529_pp0_iter21_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_reg_1529_pp0_iter22_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_reg_1529_pp0_iter23_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln647_4_fu_969_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln647_4_reg_1534 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_62_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_fu_990_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_reg_1549 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i1_reg_1554 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i4_reg_1559 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i7_reg_1564 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i10_reg_1569 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i13_reg_1574 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i16_reg_1579 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i19_reg_1584 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i22_reg_1589 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i25_reg_1594 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i28_reg_1599 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i_reg_1604 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i31_reg_1609 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i32_reg_1614 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i33_reg_1619 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i34_reg_1624 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i35_reg_1629 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i36_reg_1634 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i37_reg_1639 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i38_reg_1644 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i39_reg_1649 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i40_reg_1654 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i41_reg_1659 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i42_reg_1664 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i43_reg_1669 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i44_reg_1674 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i45_reg_1679 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i46_reg_1684 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i47_reg_1689 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i48_reg_1694 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i49_reg_1699 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i50_reg_1704 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_760_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_ddr_dw1_pool_burst_p_phi_fu_772_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_h_0_phi_fu_784_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_w_0_phi_fu_796_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln203_fu_1304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_fu_980_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln495_fu_812_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln_fu_816_p6 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln495_2_fu_834_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_fu_846_p5 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln495_1_fu_842_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln495_fu_858_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_888_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln498_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_900_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln507_fu_894_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln497_1_fu_945_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln497_fu_948_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln497_fu_948_p2 : signal is "no";
    signal zext_ln497_2_fu_953_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln497_1_fu_957_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln498_fu_962_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_888_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1467_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1467_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1467_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1475_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1475_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1475_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_888_ce : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1467_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1475_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1475_p20 : STD_LOGIC_VECTOR (12 downto 0);

    component SkyNet_urem_12ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component SkyNet_mac_muladdocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component SkyNet_mac_muladdeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    SkyNet_urem_12ns_cud_U1021 : component SkyNet_urem_12ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_indvar_flatten_phi_fu_760_p4,
        din1 => grp_fu_888_p1,
        ce => grp_fu_888_ce,
        dout => grp_fu_888_p2);

    SkyNet_mac_muladdocq_U1022 : component SkyNet_mac_muladdocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 7,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_1467_p0,
        din1 => grp_fu_1467_p1,
        din2 => grp_fu_1467_p2,
        dout => grp_fu_1467_p3);

    SkyNet_mac_muladdeOg_U1023 : component SkyNet_mac_muladdeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_1475_p0,
        din1 => grp_fu_1475_p1,
        din2 => grp_fu_1475_p2,
        dout => grp_fu_1475_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ddr_dw1_pool_burst_p_reg_768_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln497_reg_1498_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
                ddr_dw1_pool_burst_p_reg_768 <= select_ln497_2_reg_1518;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ddr_dw1_pool_burst_p_reg_768 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    h_0_reg_780_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln497_reg_1498_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
                h_0_reg_780 <= select_ln497_1_reg_1512;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_0_reg_780 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_756_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln497_reg_1498 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_756 <= add_ln497_2_reg_1502;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_756 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    w_0_reg_792_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln497_reg_1498_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
                w_0_reg_792 <= w_reg_1524;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_0_reg_792 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln497_reg_1498_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then
                add_ln203_reg_1529 <= grp_fu_1475_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln203_reg_1529_pp0_iter16_reg <= add_ln203_reg_1529;
                add_ln203_reg_1529_pp0_iter17_reg <= add_ln203_reg_1529_pp0_iter16_reg;
                add_ln203_reg_1529_pp0_iter18_reg <= add_ln203_reg_1529_pp0_iter17_reg;
                add_ln203_reg_1529_pp0_iter19_reg <= add_ln203_reg_1529_pp0_iter18_reg;
                add_ln203_reg_1529_pp0_iter20_reg <= add_ln203_reg_1529_pp0_iter19_reg;
                add_ln203_reg_1529_pp0_iter21_reg <= add_ln203_reg_1529_pp0_iter20_reg;
                add_ln203_reg_1529_pp0_iter22_reg <= add_ln203_reg_1529_pp0_iter21_reg;
                add_ln203_reg_1529_pp0_iter23_reg <= add_ln203_reg_1529_pp0_iter22_reg;
                icmp_ln497_reg_1498_pp0_iter10_reg <= icmp_ln497_reg_1498_pp0_iter9_reg;
                icmp_ln497_reg_1498_pp0_iter11_reg <= icmp_ln497_reg_1498_pp0_iter10_reg;
                icmp_ln497_reg_1498_pp0_iter12_reg <= icmp_ln497_reg_1498_pp0_iter11_reg;
                icmp_ln497_reg_1498_pp0_iter13_reg <= icmp_ln497_reg_1498_pp0_iter12_reg;
                icmp_ln497_reg_1498_pp0_iter14_reg <= icmp_ln497_reg_1498_pp0_iter13_reg;
                icmp_ln497_reg_1498_pp0_iter15_reg <= icmp_ln497_reg_1498_pp0_iter14_reg;
                icmp_ln497_reg_1498_pp0_iter16_reg <= icmp_ln497_reg_1498_pp0_iter15_reg;
                icmp_ln497_reg_1498_pp0_iter17_reg <= icmp_ln497_reg_1498_pp0_iter16_reg;
                icmp_ln497_reg_1498_pp0_iter18_reg <= icmp_ln497_reg_1498_pp0_iter17_reg;
                icmp_ln497_reg_1498_pp0_iter19_reg <= icmp_ln497_reg_1498_pp0_iter18_reg;
                icmp_ln497_reg_1498_pp0_iter20_reg <= icmp_ln497_reg_1498_pp0_iter19_reg;
                icmp_ln497_reg_1498_pp0_iter21_reg <= icmp_ln497_reg_1498_pp0_iter20_reg;
                icmp_ln497_reg_1498_pp0_iter22_reg <= icmp_ln497_reg_1498_pp0_iter21_reg;
                icmp_ln497_reg_1498_pp0_iter23_reg <= icmp_ln497_reg_1498_pp0_iter22_reg;
                icmp_ln497_reg_1498_pp0_iter2_reg <= icmp_ln497_reg_1498_pp0_iter1_reg;
                icmp_ln497_reg_1498_pp0_iter3_reg <= icmp_ln497_reg_1498_pp0_iter2_reg;
                icmp_ln497_reg_1498_pp0_iter4_reg <= icmp_ln497_reg_1498_pp0_iter3_reg;
                icmp_ln497_reg_1498_pp0_iter5_reg <= icmp_ln497_reg_1498_pp0_iter4_reg;
                icmp_ln497_reg_1498_pp0_iter6_reg <= icmp_ln497_reg_1498_pp0_iter5_reg;
                icmp_ln497_reg_1498_pp0_iter7_reg <= icmp_ln497_reg_1498_pp0_iter6_reg;
                icmp_ln497_reg_1498_pp0_iter8_reg <= icmp_ln497_reg_1498_pp0_iter7_reg;
                icmp_ln497_reg_1498_pp0_iter9_reg <= icmp_ln497_reg_1498_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln497_2_reg_1502 <= add_ln497_2_fu_882_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln497_reg_1498_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln647_4_reg_1534 <= add_ln647_4_fu_969_p2;
                empty_62_reg_1539 <= empty_62_fu_974_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln647_reg_1483 <= grp_fu_1467_p3;
                    add_ln647_s_reg_1488(8 downto 1) <= add_ln647_s_fu_864_p3(8 downto 1);
                    zext_ln497_reg_1493(26 downto 0) <= zext_ln497_fu_872_p1(26 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln497_reg_1498 <= icmp_ln497_fu_876_p2;
                icmp_ln497_reg_1498_pp0_iter1_reg <= icmp_ln497_reg_1498;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln497_reg_1498_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_i10_reg_1569 <= m_axi_ddr_dw1_pool_burst_V_RDATA(39 downto 32);
                p_Result_i13_reg_1574 <= m_axi_ddr_dw1_pool_burst_V_RDATA(47 downto 40);
                p_Result_i16_reg_1579 <= m_axi_ddr_dw1_pool_burst_V_RDATA(55 downto 48);
                p_Result_i19_reg_1584 <= m_axi_ddr_dw1_pool_burst_V_RDATA(63 downto 56);
                p_Result_i1_reg_1554 <= m_axi_ddr_dw1_pool_burst_V_RDATA(15 downto 8);
                p_Result_i22_reg_1589 <= m_axi_ddr_dw1_pool_burst_V_RDATA(71 downto 64);
                p_Result_i25_reg_1594 <= m_axi_ddr_dw1_pool_burst_V_RDATA(79 downto 72);
                p_Result_i28_reg_1599 <= m_axi_ddr_dw1_pool_burst_V_RDATA(87 downto 80);
                p_Result_i31_reg_1609 <= m_axi_ddr_dw1_pool_burst_V_RDATA(103 downto 96);
                p_Result_i32_reg_1614 <= m_axi_ddr_dw1_pool_burst_V_RDATA(111 downto 104);
                p_Result_i33_reg_1619 <= m_axi_ddr_dw1_pool_burst_V_RDATA(119 downto 112);
                p_Result_i34_reg_1624 <= m_axi_ddr_dw1_pool_burst_V_RDATA(127 downto 120);
                p_Result_i35_reg_1629 <= m_axi_ddr_dw1_pool_burst_V_RDATA(135 downto 128);
                p_Result_i36_reg_1634 <= m_axi_ddr_dw1_pool_burst_V_RDATA(143 downto 136);
                p_Result_i37_reg_1639 <= m_axi_ddr_dw1_pool_burst_V_RDATA(151 downto 144);
                p_Result_i38_reg_1644 <= m_axi_ddr_dw1_pool_burst_V_RDATA(159 downto 152);
                p_Result_i39_reg_1649 <= m_axi_ddr_dw1_pool_burst_V_RDATA(167 downto 160);
                p_Result_i40_reg_1654 <= m_axi_ddr_dw1_pool_burst_V_RDATA(175 downto 168);
                p_Result_i41_reg_1659 <= m_axi_ddr_dw1_pool_burst_V_RDATA(183 downto 176);
                p_Result_i42_reg_1664 <= m_axi_ddr_dw1_pool_burst_V_RDATA(191 downto 184);
                p_Result_i43_reg_1669 <= m_axi_ddr_dw1_pool_burst_V_RDATA(199 downto 192);
                p_Result_i44_reg_1674 <= m_axi_ddr_dw1_pool_burst_V_RDATA(207 downto 200);
                p_Result_i45_reg_1679 <= m_axi_ddr_dw1_pool_burst_V_RDATA(215 downto 208);
                p_Result_i46_reg_1684 <= m_axi_ddr_dw1_pool_burst_V_RDATA(223 downto 216);
                p_Result_i47_reg_1689 <= m_axi_ddr_dw1_pool_burst_V_RDATA(231 downto 224);
                p_Result_i48_reg_1694 <= m_axi_ddr_dw1_pool_burst_V_RDATA(239 downto 232);
                p_Result_i49_reg_1699 <= m_axi_ddr_dw1_pool_burst_V_RDATA(247 downto 240);
                p_Result_i4_reg_1559 <= m_axi_ddr_dw1_pool_burst_V_RDATA(23 downto 16);
                p_Result_i50_reg_1704 <= m_axi_ddr_dw1_pool_burst_V_RDATA(255 downto 248);
                p_Result_i7_reg_1564 <= m_axi_ddr_dw1_pool_burst_V_RDATA(31 downto 24);
                p_Result_i_reg_1604 <= m_axi_ddr_dw1_pool_burst_V_RDATA(95 downto 88);
                trunc_ln647_reg_1549 <= trunc_ln647_fu_990_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln497_reg_1498_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then
                select_ln497_1_reg_1512 <= select_ln497_1_fu_920_p3;
                select_ln497_2_reg_1518 <= select_ln497_2_fu_928_p3;
                w_reg_1524 <= w_fu_936_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln497_reg_1498_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln497_reg_1507 <= select_ln497_fu_912_p3;
            end if;
        end if;
    end process;
    add_ln647_s_reg_1488(0) <= '0';
    add_ln647_s_reg_1488(19 downto 9) <= "10000000000";
    zext_ln497_reg_1493(27) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter23, icmp_ln497_fu_876_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter24)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln497_fu_876_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln497_fu_876_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln495_fu_858_p2 <= std_logic_vector(unsigned(tmp2_fu_846_p5) + unsigned(zext_ln495_1_fu_842_p1));
    add_ln497_1_fu_957_p2 <= std_logic_vector(unsigned(zext_ln497_2_fu_953_p1) + unsigned(add_ln647_s_reg_1488));
    add_ln497_2_fu_882_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_760_p4) + unsigned(ap_const_lv12_1));
    add_ln497_fu_948_p2 <= std_logic_vector(unsigned(zext_ln497_1_fu_945_p1) + unsigned(add_ln647_reg_1483));
    add_ln507_fu_894_p2 <= std_logic_vector(unsigned(ap_phi_mux_ddr_dw1_pool_burst_p_phi_fu_772_p4) + unsigned(ap_const_lv14_144));
    add_ln647_4_fu_969_p2 <= std_logic_vector(unsigned(zext_ln497_reg_1493) + unsigned(zext_ln498_fu_962_p1));
    add_ln647_s_fu_864_p3 <= (ap_const_lv11_400 & add_ln495_fu_858_p2);
    add_ln_fu_816_p6 <= ((((trunc_ln495_fu_812_p1 & trunc_ln495_fu_812_p1) & ap_const_lv1_0) & offset_h) & ap_const_lv1_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state27 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_ddr_dw1_pool_burst_V_RVALID, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter23, icmp_ln497_reg_1498_pp0_iter22_reg, ap_block_state18_io)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln497_reg_1498_pp0_iter22_reg = ap_const_lv1_0) and (m_axi_ddr_dw1_pool_burst_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state18_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_ddr_dw1_pool_burst_V_RVALID, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter23, icmp_ln497_reg_1498_pp0_iter22_reg, ap_block_state18_io)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln497_reg_1498_pp0_iter22_reg = ap_const_lv1_0) and (m_axi_ddr_dw1_pool_burst_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state18_io)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(m_axi_ddr_dw1_pool_burst_V_ARREADY, empty_62_reg_1539)
    begin
                ap_block_state18_io <= ((empty_62_reg_1539 = ap_const_lv1_1) and (m_axi_ddr_dw1_pool_burst_V_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_pp0_stage0_iter23_assign_proc : process(m_axi_ddr_dw1_pool_burst_V_RVALID, icmp_ln497_reg_1498_pp0_iter22_reg)
    begin
                ap_block_state25_pp0_stage0_iter23 <= ((icmp_ln497_reg_1498_pp0_iter22_reg = ap_const_lv1_0) and (m_axi_ddr_dw1_pool_burst_V_RVALID = ap_const_logic_0));
    end process;

        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln497_fu_876_p2)
    begin
        if ((icmp_ln497_fu_876_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ddr_dw1_pool_burst_p_phi_fu_772_p4_assign_proc : process(ap_block_pp0_stage0, ddr_dw1_pool_burst_p_reg_768, icmp_ln497_reg_1498_pp0_iter14_reg, select_ln497_2_reg_1518, ap_enable_reg_pp0_iter15)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            ap_phi_mux_ddr_dw1_pool_burst_p_phi_fu_772_p4 <= select_ln497_2_reg_1518;
        else 
            ap_phi_mux_ddr_dw1_pool_burst_p_phi_fu_772_p4 <= ddr_dw1_pool_burst_p_reg_768;
        end if; 
    end process;


    ap_phi_mux_h_0_phi_fu_784_p4_assign_proc : process(ap_block_pp0_stage0, h_0_reg_780, icmp_ln497_reg_1498_pp0_iter14_reg, select_ln497_1_reg_1512, ap_enable_reg_pp0_iter15)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            ap_phi_mux_h_0_phi_fu_784_p4 <= select_ln497_1_reg_1512;
        else 
            ap_phi_mux_h_0_phi_fu_784_p4 <= h_0_reg_780;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_760_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln497_reg_1498, indvar_flatten_reg_756, ap_CS_fsm_pp0_stage0, add_ln497_2_reg_1502, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln497_reg_1498 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_760_p4 <= add_ln497_2_reg_1502;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_760_p4 <= indvar_flatten_reg_756;
        end if; 
    end process;


    ap_phi_mux_w_0_phi_fu_796_p4_assign_proc : process(ap_block_pp0_stage0, w_0_reg_792, icmp_ln497_reg_1498_pp0_iter14_reg, w_reg_1524, ap_enable_reg_pp0_iter15)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            ap_phi_mux_w_0_phi_fu_796_p4 <= w_reg_1524;
        else 
            ap_phi_mux_w_0_phi_fu_796_p4 <= w_0_reg_792;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_0_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_0_V_ce0 <= ap_const_logic_1;
        else 
            buf_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_0_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln647_reg_1549),9));

    buf_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_0_V_we0 <= ap_const_logic_1;
        else 
            buf_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_10_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_10_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_10_V_ce0 <= ap_const_logic_1;
        else 
            buf_10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_10_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i28_reg_1599),9));

    buf_10_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_10_V_we0 <= ap_const_logic_1;
        else 
            buf_10_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_11_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_11_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_11_V_ce0 <= ap_const_logic_1;
        else 
            buf_11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_11_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_reg_1604),9));

    buf_11_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_11_V_we0 <= ap_const_logic_1;
        else 
            buf_11_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_12_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_12_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_12_V_ce0 <= ap_const_logic_1;
        else 
            buf_12_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_12_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i31_reg_1609),9));

    buf_12_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_12_V_we0 <= ap_const_logic_1;
        else 
            buf_12_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_13_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_13_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_13_V_ce0 <= ap_const_logic_1;
        else 
            buf_13_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_13_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i32_reg_1614),9));

    buf_13_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_13_V_we0 <= ap_const_logic_1;
        else 
            buf_13_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_14_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_14_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_14_V_ce0 <= ap_const_logic_1;
        else 
            buf_14_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_14_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i33_reg_1619),9));

    buf_14_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_14_V_we0 <= ap_const_logic_1;
        else 
            buf_14_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_15_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_15_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_15_V_ce0 <= ap_const_logic_1;
        else 
            buf_15_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_15_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i34_reg_1624),9));

    buf_15_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_15_V_we0 <= ap_const_logic_1;
        else 
            buf_15_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_16_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_16_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_16_V_ce0 <= ap_const_logic_1;
        else 
            buf_16_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_16_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i35_reg_1629),9));

    buf_16_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_16_V_we0 <= ap_const_logic_1;
        else 
            buf_16_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_17_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_17_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_17_V_ce0 <= ap_const_logic_1;
        else 
            buf_17_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_17_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i36_reg_1634),9));

    buf_17_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_17_V_we0 <= ap_const_logic_1;
        else 
            buf_17_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_18_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_18_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_18_V_ce0 <= ap_const_logic_1;
        else 
            buf_18_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_18_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i37_reg_1639),9));

    buf_18_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_18_V_we0 <= ap_const_logic_1;
        else 
            buf_18_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_19_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_19_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_19_V_ce0 <= ap_const_logic_1;
        else 
            buf_19_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_19_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i38_reg_1644),9));

    buf_19_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_19_V_we0 <= ap_const_logic_1;
        else 
            buf_19_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_1_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_1_V_ce0 <= ap_const_logic_1;
        else 
            buf_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i1_reg_1554),9));

    buf_1_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_1_V_we0 <= ap_const_logic_1;
        else 
            buf_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_20_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_20_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_20_V_ce0 <= ap_const_logic_1;
        else 
            buf_20_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_20_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i39_reg_1649),9));

    buf_20_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_20_V_we0 <= ap_const_logic_1;
        else 
            buf_20_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_21_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_21_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_21_V_ce0 <= ap_const_logic_1;
        else 
            buf_21_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_21_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i40_reg_1654),9));

    buf_21_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_21_V_we0 <= ap_const_logic_1;
        else 
            buf_21_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_22_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_22_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_22_V_ce0 <= ap_const_logic_1;
        else 
            buf_22_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_22_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i41_reg_1659),9));

    buf_22_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_22_V_we0 <= ap_const_logic_1;
        else 
            buf_22_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_23_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_23_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_23_V_ce0 <= ap_const_logic_1;
        else 
            buf_23_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_23_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i42_reg_1664),9));

    buf_23_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_23_V_we0 <= ap_const_logic_1;
        else 
            buf_23_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_24_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_24_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_24_V_ce0 <= ap_const_logic_1;
        else 
            buf_24_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_24_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i43_reg_1669),9));

    buf_24_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_24_V_we0 <= ap_const_logic_1;
        else 
            buf_24_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_25_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_25_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_25_V_ce0 <= ap_const_logic_1;
        else 
            buf_25_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_25_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i44_reg_1674),9));

    buf_25_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_25_V_we0 <= ap_const_logic_1;
        else 
            buf_25_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_26_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_26_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_26_V_ce0 <= ap_const_logic_1;
        else 
            buf_26_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_26_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i45_reg_1679),9));

    buf_26_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_26_V_we0 <= ap_const_logic_1;
        else 
            buf_26_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_27_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_27_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_27_V_ce0 <= ap_const_logic_1;
        else 
            buf_27_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_27_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i46_reg_1684),9));

    buf_27_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_27_V_we0 <= ap_const_logic_1;
        else 
            buf_27_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_28_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_28_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_28_V_ce0 <= ap_const_logic_1;
        else 
            buf_28_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_28_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i47_reg_1689),9));

    buf_28_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_28_V_we0 <= ap_const_logic_1;
        else 
            buf_28_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_29_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_29_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_29_V_ce0 <= ap_const_logic_1;
        else 
            buf_29_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_29_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i48_reg_1694),9));

    buf_29_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_29_V_we0 <= ap_const_logic_1;
        else 
            buf_29_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_2_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_2_V_ce0 <= ap_const_logic_1;
        else 
            buf_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i4_reg_1559),9));

    buf_2_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_2_V_we0 <= ap_const_logic_1;
        else 
            buf_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_30_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_30_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_30_V_ce0 <= ap_const_logic_1;
        else 
            buf_30_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_30_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i49_reg_1699),9));

    buf_30_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_30_V_we0 <= ap_const_logic_1;
        else 
            buf_30_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_31_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_31_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_31_V_ce0 <= ap_const_logic_1;
        else 
            buf_31_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_31_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i50_reg_1704),9));

    buf_31_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_31_V_we0 <= ap_const_logic_1;
        else 
            buf_31_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_3_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_3_V_ce0 <= ap_const_logic_1;
        else 
            buf_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i7_reg_1564),9));

    buf_3_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_3_V_we0 <= ap_const_logic_1;
        else 
            buf_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_4_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_4_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_4_V_ce0 <= ap_const_logic_1;
        else 
            buf_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_4_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i10_reg_1569),9));

    buf_4_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_4_V_we0 <= ap_const_logic_1;
        else 
            buf_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_5_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_5_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_5_V_ce0 <= ap_const_logic_1;
        else 
            buf_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_5_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i13_reg_1574),9));

    buf_5_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_5_V_we0 <= ap_const_logic_1;
        else 
            buf_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_6_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_6_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_6_V_ce0 <= ap_const_logic_1;
        else 
            buf_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_6_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i16_reg_1579),9));

    buf_6_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_6_V_we0 <= ap_const_logic_1;
        else 
            buf_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_7_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_7_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_7_V_ce0 <= ap_const_logic_1;
        else 
            buf_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_7_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i19_reg_1584),9));

    buf_7_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_7_V_we0 <= ap_const_logic_1;
        else 
            buf_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_8_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_8_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_8_V_ce0 <= ap_const_logic_1;
        else 
            buf_8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_8_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i22_reg_1589),9));

    buf_8_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_8_V_we0 <= ap_const_logic_1;
        else 
            buf_8_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_9_V_address0 <= sext_ln203_fu_1304_p1(12 - 1 downto 0);

    buf_9_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_9_V_ce0 <= ap_const_logic_1;
        else 
            buf_9_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_9_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i25_reg_1594),9));

    buf_9_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln497_reg_1498_pp0_iter23_reg, ap_enable_reg_pp0_iter24)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))) then 
            buf_9_V_we0 <= ap_const_logic_1;
        else 
            buf_9_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ddr_dw1_pool_burst_V_blk_n_AR_assign_proc : process(m_axi_ddr_dw1_pool_burst_V_ARREADY, ap_enable_reg_pp0_iter16, ap_block_pp0_stage0, empty_62_reg_1539)
    begin
        if (((empty_62_reg_1539 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            ddr_dw1_pool_burst_V_blk_n_AR <= m_axi_ddr_dw1_pool_burst_V_ARREADY;
        else 
            ddr_dw1_pool_burst_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    ddr_dw1_pool_burst_V_blk_n_R_assign_proc : process(m_axi_ddr_dw1_pool_burst_V_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter23, icmp_ln497_reg_1498_pp0_iter22_reg)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            ddr_dw1_pool_burst_V_blk_n_R <= m_axi_ddr_dw1_pool_burst_V_RVALID;
        else 
            ddr_dw1_pool_burst_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    empty_62_fu_974_p2 <= "1" when (grp_fu_888_p2 = ap_const_lv12_0) else "0";
    grp_fu_1467_p0 <= ap_const_lv17_144(10 - 1 downto 0);
    grp_fu_1467_p1 <= grp_fu_1467_p10(7 - 1 downto 0);
    grp_fu_1467_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_816_p6),17));
    grp_fu_1467_p2 <= 
        ap_const_lv17_CF90 when (ch_offset(0) = '1') else 
        ap_const_lv17_0;
    grp_fu_1475_p0 <= grp_fu_1475_p00(6 - 1 downto 0);
    grp_fu_1475_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln497_1_reg_1512),13));
    grp_fu_1475_p1 <= ap_const_lv13_54(8 - 1 downto 0);
    grp_fu_1475_p2 <= grp_fu_1475_p20(7 - 1 downto 0);
    grp_fu_1475_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln497_reg_1507),13));

    grp_fu_888_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_888_ce <= ap_const_logic_1;
        else 
            grp_fu_888_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_888_p1 <= ap_const_lv12_52(8 - 1 downto 0);
    h_fu_900_p2 <= std_logic_vector(unsigned(ap_phi_mux_h_0_phi_fu_784_p4) + unsigned(ap_const_lv6_1));
    icmp_ln497_fu_876_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_760_p4 = ap_const_lv12_D74) else "0";
    icmp_ln498_fu_906_p2 <= "1" when (ap_phi_mux_w_0_phi_fu_796_p4 = ap_const_lv7_52) else "0";
    m_axi_ddr_dw1_pool_burst_V_ARADDR <= zext_ln647_fu_980_p1(32 - 1 downto 0);
    m_axi_ddr_dw1_pool_burst_V_ARBURST <= ap_const_lv2_0;
    m_axi_ddr_dw1_pool_burst_V_ARCACHE <= ap_const_lv4_0;
    m_axi_ddr_dw1_pool_burst_V_ARID <= ap_const_lv1_0;
    m_axi_ddr_dw1_pool_burst_V_ARLEN <= ap_const_lv32_52;
    m_axi_ddr_dw1_pool_burst_V_ARLOCK <= ap_const_lv2_0;
    m_axi_ddr_dw1_pool_burst_V_ARPROT <= ap_const_lv3_0;
    m_axi_ddr_dw1_pool_burst_V_ARQOS <= ap_const_lv4_0;
    m_axi_ddr_dw1_pool_burst_V_ARREGION <= ap_const_lv4_0;
    m_axi_ddr_dw1_pool_burst_V_ARSIZE <= ap_const_lv3_0;
    m_axi_ddr_dw1_pool_burst_V_ARUSER <= ap_const_lv1_0;

    m_axi_ddr_dw1_pool_burst_V_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter16, empty_62_reg_1539, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_62_reg_1539 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            m_axi_ddr_dw1_pool_burst_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_ddr_dw1_pool_burst_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ddr_dw1_pool_burst_V_AWADDR <= ap_const_lv32_0;
    m_axi_ddr_dw1_pool_burst_V_AWBURST <= ap_const_lv2_0;
    m_axi_ddr_dw1_pool_burst_V_AWCACHE <= ap_const_lv4_0;
    m_axi_ddr_dw1_pool_burst_V_AWID <= ap_const_lv1_0;
    m_axi_ddr_dw1_pool_burst_V_AWLEN <= ap_const_lv32_0;
    m_axi_ddr_dw1_pool_burst_V_AWLOCK <= ap_const_lv2_0;
    m_axi_ddr_dw1_pool_burst_V_AWPROT <= ap_const_lv3_0;
    m_axi_ddr_dw1_pool_burst_V_AWQOS <= ap_const_lv4_0;
    m_axi_ddr_dw1_pool_burst_V_AWREGION <= ap_const_lv4_0;
    m_axi_ddr_dw1_pool_burst_V_AWSIZE <= ap_const_lv3_0;
    m_axi_ddr_dw1_pool_burst_V_AWUSER <= ap_const_lv1_0;
    m_axi_ddr_dw1_pool_burst_V_AWVALID <= ap_const_logic_0;
    m_axi_ddr_dw1_pool_burst_V_BREADY <= ap_const_logic_0;

    m_axi_ddr_dw1_pool_burst_V_RREADY_assign_proc : process(ap_enable_reg_pp0_iter23, icmp_ln497_reg_1498_pp0_iter22_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln497_reg_1498_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            m_axi_ddr_dw1_pool_burst_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_ddr_dw1_pool_burst_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ddr_dw1_pool_burst_V_WDATA <= ap_const_lv256_lc_1;
    m_axi_ddr_dw1_pool_burst_V_WID <= ap_const_lv1_0;
    m_axi_ddr_dw1_pool_burst_V_WLAST <= ap_const_logic_0;
    m_axi_ddr_dw1_pool_burst_V_WSTRB <= ap_const_lv32_0;
    m_axi_ddr_dw1_pool_burst_V_WUSER <= ap_const_lv1_0;
    m_axi_ddr_dw1_pool_burst_V_WVALID <= ap_const_logic_0;
    select_ln497_1_fu_920_p3 <= 
        h_fu_900_p2 when (icmp_ln498_fu_906_p2(0) = '1') else 
        ap_phi_mux_h_0_phi_fu_784_p4;
    select_ln497_2_fu_928_p3 <= 
        add_ln507_fu_894_p2 when (icmp_ln498_fu_906_p2(0) = '1') else 
        ap_phi_mux_ddr_dw1_pool_burst_p_phi_fu_772_p4;
    select_ln497_fu_912_p3 <= 
        ap_const_lv7_0 when (icmp_ln498_fu_906_p2(0) = '1') else 
        ap_phi_mux_w_0_phi_fu_796_p4;
        sext_ln203_fu_1304_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_reg_1529_pp0_iter23_reg),64));

    shl_ln495_2_fu_834_p3 <= (row & ap_const_lv4_0);
    tmp2_fu_846_p5 <= (((row & ap_const_lv4_0) & offset_w) & ap_const_lv1_0);
    trunc_ln495_fu_812_p1 <= col(2 - 1 downto 0);
    trunc_ln647_fu_990_p1 <= m_axi_ddr_dw1_pool_burst_V_RDATA(8 - 1 downto 0);
    w_fu_936_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(select_ln497_fu_912_p3));
    zext_ln495_1_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln495_2_fu_834_p3),9));
    zext_ln497_1_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln497_2_reg_1518),17));
    zext_ln497_2_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln497_fu_948_p2),20));
    zext_ln497_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ddr_dw1_pool_burst_V_offset),28));
    zext_ln498_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln497_1_fu_957_p2),28));
    zext_ln647_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln647_4_reg_1534),64));
end behav;
