-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MAC_16_16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    w1_V : IN STD_LOGIC_VECTOR (10 downto 0);
    b1_V : IN STD_LOGIC_VECTOR (8 downto 0);
    w2_V : IN STD_LOGIC_VECTOR (10 downto 0);
    b2_V : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of MAC_16_16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal b2_V_read_reg_85 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w2_V_read_reg_90 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_51_fu_71_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_51_reg_95 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_77_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_V_fu_64_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_int_reg : STD_LOGIC_VECTOR (23 downto 0);

    component SkyNet_mul_mul_9sfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component SkyNet_mac_muladdg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    SkyNet_mul_mul_9sfYi_U126 : component SkyNet_mul_mul_9sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => b1_V,
        din1 => w1_V,
        dout => r_V_51_fu_71_p2);

    SkyNet_mac_muladdg8j_U127 : component SkyNet_mac_muladdg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        din2_WIDTH => 20,
        dout_WIDTH => 20)
    port map (
        din0 => b2_V_read_reg_85,
        din1 => w2_V_read_reg_90,
        din2 => r_V_51_reg_95,
        dout => grp_fu_77_p3);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                    ap_return_int_reg(23 downto 4) <= tmp_V_fu_64_p3(23 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                b2_V_read_reg_85 <= b2_V;
                r_V_51_reg_95 <= r_V_51_fu_71_p2;
                w2_V_read_reg_90 <= w2_V;
            end if;
        end if;
    end process;
    ap_return_int_reg(3 downto 0) <= "0000";
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(tmp_V_fu_64_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= tmp_V_fu_64_p3;
        end if; 
    end process;

    tmp_V_fu_64_p3 <= (grp_fu_77_p3 & ap_const_lv4_0);
end behav;
