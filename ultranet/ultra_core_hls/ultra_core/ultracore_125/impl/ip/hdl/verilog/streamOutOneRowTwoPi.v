// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module streamOutOneRowTwoPi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write,
        row_buffer_0_V_address0,
        row_buffer_0_V_ce0,
        row_buffer_0_V_q0,
        row_buffer_1_V_address0,
        row_buffer_1_V_ce0,
        row_buffer_1_V_q0,
        skip_flag,
        rowBufferIdx_V
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;
output  [9:0] row_buffer_0_V_address0;
output   row_buffer_0_V_ce0;
input  [7:0] row_buffer_0_V_q0;
output  [9:0] row_buffer_1_V_address0;
output   row_buffer_1_V_ce0;
input  [7:0] row_buffer_1_V_q0;
input   skip_flag;
input  [0:0] rowBufferIdx_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_V_write;
reg row_buffer_0_V_ce0;
reg row_buffer_1_V_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln56_reg_361;
reg   [0:0] icmp_ln56_reg_361_pp0_iter1_reg;
reg   [12:0] indvar_flatten11_reg_131;
reg   [4:0] w_0_reg_142;
reg   [9:0] indvar_flatten_reg_153;
reg   [4:0] s_0_reg_164;
wire   [0:0] skip_flag_read_read_fu_92_p2;
wire   [0:0] icmp_ln56_fu_175_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [12:0] add_ln56_fu_181_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln56_fu_199_p3;
reg   [4:0] select_ln56_reg_370;
wire   [9:0] add_ln321_1_fu_311_p2;
reg   [9:0] add_ln321_1_reg_375;
wire   [4:0] s_fu_317_p2;
wire   [9:0] select_ln57_fu_329_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [4:0] ap_phi_mux_w_0_phi_fu_146_p4;
wire   [63:0] zext_ln321_14_fu_337_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln57_fu_193_p2;
wire   [4:0] w_fu_187_p2;
wire   [3:0] tmp_6_fu_207_p4;
wire   [7:0] zext_ln66_1_mid2_v_fu_217_p3;
wire   [0:0] trunc_ln321_fu_229_p1;
wire   [8:0] tmp_8_fu_233_p4;
wire   [6:0] tmp_s_fu_246_p4;
wire   [9:0] zext_ln321_12_fu_255_p1;
wire   [9:0] zext_ln321_fu_242_p1;
wire   [0:0] icmp_ln58_fu_271_p2;
wire   [0:0] xor_ln56_fu_265_p2;
wire   [0:0] and_ln56_fu_277_p2;
wire   [0:0] or_ln58_fu_283_p2;
wire   [4:0] select_ln58_fu_289_p3;
wire   [8:0] zext_ln58_fu_297_p1;
wire   [8:0] zext_ln56_fu_225_p1;
wire   [8:0] add_ln66_fu_301_p2;
wire   [9:0] add_ln321_fu_259_p2;
wire   [9:0] zext_ln321_13_fu_307_p1;
wire   [9:0] add_ln57_fu_323_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (skip_flag_read_read_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten11_reg_131 <= 13'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln56_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten11_reg_131 <= add_ln56_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (skip_flag_read_read_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_153 <= 10'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln56_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_153 <= select_ln57_fu_329_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (skip_flag_read_read_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        s_0_reg_164 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln56_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_0_reg_164 <= s_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (skip_flag_read_read_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_0_reg_142 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln56_reg_361 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        w_0_reg_142 <= select_ln56_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln56_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln321_1_reg_375 <= add_ln321_1_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln56_reg_361 <= icmp_ln56_fu_175_p2;
        icmp_ln56_reg_361_pp0_iter1_reg <= icmp_ln56_reg_361;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln56_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln56_reg_370 <= select_ln56_fu_199_p3;
    end
end

always @ (*) begin
    if ((icmp_ln56_fu_175_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_reg_361 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_w_0_phi_fu_146_p4 = select_ln56_reg_370;
    end else begin
        ap_phi_mux_w_0_phi_fu_146_p4 = w_0_reg_142;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_reg_361_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln56_reg_361_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        row_buffer_0_V_ce0 = 1'b1;
    end else begin
        row_buffer_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        row_buffer_1_V_ce0 = 1'b1;
    end else begin
        row_buffer_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (skip_flag_read_read_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_92_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln56_fu_175_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln56_fu_175_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln321_1_fu_311_p2 = (add_ln321_fu_259_p2 + zext_ln321_13_fu_307_p1);

assign add_ln321_fu_259_p2 = (zext_ln321_12_fu_255_p1 + zext_ln321_fu_242_p1);

assign add_ln56_fu_181_p2 = (indvar_flatten11_reg_131 + 13'd1);

assign add_ln57_fu_323_p2 = (10'd1 + indvar_flatten_reg_153);

assign add_ln66_fu_301_p2 = (zext_ln58_fu_297_p1 + zext_ln56_fu_225_p1);

assign and_ln56_fu_277_p2 = (xor_ln56_fu_265_p2 & icmp_ln58_fu_271_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln56_reg_361_pp0_iter1_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln56_reg_361_pp0_iter1_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln56_reg_361_pp0_iter1_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln56_reg_361_pp0_iter1_reg == 1'd0) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln56_fu_175_p2 = ((indvar_flatten11_reg_131 == 13'd5760) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_193_p2 = ((indvar_flatten_reg_153 == 10'd288) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_271_p2 = ((s_0_reg_164 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln58_fu_283_p2 = (icmp_ln57_fu_193_p2 | and_ln56_fu_277_p2);

assign out_V_V_din = {{row_buffer_1_V_q0}, {row_buffer_0_V_q0}};

assign row_buffer_0_V_address0 = zext_ln321_14_fu_337_p1;

assign row_buffer_1_V_address0 = zext_ln321_14_fu_337_p1;

assign s_fu_317_p2 = (5'd1 + select_ln58_fu_289_p3);

assign select_ln56_fu_199_p3 = ((icmp_ln57_fu_193_p2[0:0] === 1'b1) ? w_fu_187_p2 : ap_phi_mux_w_0_phi_fu_146_p4);

assign select_ln57_fu_329_p3 = ((icmp_ln57_fu_193_p2[0:0] === 1'b1) ? 10'd1 : add_ln57_fu_323_p2);

assign select_ln58_fu_289_p3 = ((or_ln58_fu_283_p2[0:0] === 1'b1) ? 5'd0 : s_0_reg_164);

assign skip_flag_read_read_fu_92_p2 = skip_flag;

assign tmp_6_fu_207_p4 = {{select_ln56_fu_199_p3[4:1]}};

assign tmp_8_fu_233_p4 = {{{trunc_ln321_fu_229_p1}, {rowBufferIdx_V}}, {7'd0}};

assign tmp_s_fu_246_p4 = {{{trunc_ln321_fu_229_p1}, {rowBufferIdx_V}}, {5'd0}};

assign trunc_ln321_fu_229_p1 = select_ln56_fu_199_p3[0:0];

assign w_fu_187_p2 = (5'd1 + ap_phi_mux_w_0_phi_fu_146_p4);

assign xor_ln56_fu_265_p2 = (icmp_ln57_fu_193_p2 ^ 1'd1);

assign zext_ln321_12_fu_255_p1 = tmp_s_fu_246_p4;

assign zext_ln321_13_fu_307_p1 = add_ln66_fu_301_p2;

assign zext_ln321_14_fu_337_p1 = add_ln321_1_reg_375;

assign zext_ln321_fu_242_p1 = tmp_8_fu_233_p4;

assign zext_ln56_fu_225_p1 = zext_ln66_1_mid2_v_fu_217_p3;

assign zext_ln58_fu_297_p1 = select_ln58_fu_289_p3;

assign zext_ln66_1_mid2_v_fu_217_p3 = {{tmp_6_fu_207_p4}, {4'd0}};

endmodule //streamOutOneRowTwoPi
