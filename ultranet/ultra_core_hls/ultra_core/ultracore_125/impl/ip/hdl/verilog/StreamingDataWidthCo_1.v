// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module StreamingDataWidthCo_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write,
        numReps_dout,
        numReps_empty_n,
        numReps_read,
        numReps_out_din,
        numReps_out_full_n,
        numReps_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [191:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [23:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;
input  [31:0] numReps_dout;
input   numReps_empty_n;
output   numReps_read;
output  [31:0] numReps_out_din;
input   numReps_out_full_n;
output   numReps_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;
reg numReps_read;
reg numReps_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln193_reg_196;
reg   [0:0] icmp_ln196_reg_205;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln193_reg_196_pp0_iter1_reg;
reg    numReps_blk_n;
reg    numReps_out_blk_n;
reg   [167:0] p_025_0_i_reg_81;
reg   [31:0] o_0_i_reg_93;
reg   [31:0] t_0_i_reg_104;
reg  signed [31:0] numReps_read_reg_186;
reg    ap_block_state1;
wire   [31:0] grp_fu_124_p2;
reg   [31:0] totalIters_reg_191;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln193_fu_129_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_predicate_op27_read_state5;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] t_fu_134_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln196_fu_140_p2;
reg   [0:0] icmp_ln196_reg_205_pp0_iter1_reg;
wire   [31:0] select_ln207_fu_158_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [191:0] ap_phi_mux_p_Val2_s_phi_fu_118_p4;
wire   [191:0] ap_phi_reg_pp0_iter0_p_Val2_s_reg_115;
reg   [191:0] ap_phi_reg_pp0_iter1_p_Val2_s_reg_115;
reg   [191:0] ap_phi_reg_pp0_iter2_p_Val2_s_reg_115;
wire   [191:0] zext_ln193_fu_166_p1;
reg    ap_block_pp0_stage0_01001;
wire   [18:0] grp_fu_124_p1;
wire    ap_CS_fsm_state2;
wire   [31:0] o_fu_146_p2;
wire   [0:0] icmp_ln207_fu_152_p2;
wire    ap_CS_fsm_state7;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_173;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ultra_net_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
ultra_net_mul_32scud_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(numReps_read_reg_186),
    .din1(grp_fu_124_p1),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_173)) begin
        if (((icmp_ln196_reg_205 == 1'd1) & (icmp_ln193_reg_196 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_Val2_s_reg_115 <= in_V_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_Val2_s_reg_115 <= ap_phi_reg_pp0_iter1_p_Val2_s_reg_115;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        o_0_i_reg_93 <= select_ln207_fu_158_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        o_0_i_reg_93 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_reg_196_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_025_0_i_reg_81 <= {{ap_phi_mux_p_Val2_s_phi_fu_118_p4[191:24]}};
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_025_0_i_reg_81 <= 168'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_0_i_reg_104 <= t_fu_134_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        t_0_i_reg_104 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_p_Val2_s_reg_115 <= ap_phi_reg_pp0_iter0_p_Val2_s_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln193_reg_196 <= icmp_ln193_fu_129_p2;
        icmp_ln193_reg_196_pp0_iter1_reg <= icmp_ln193_reg_196;
        icmp_ln196_reg_205_pp0_iter1_reg <= icmp_ln196_reg_205;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln196_reg_205 <= icmp_ln196_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((numReps_out_full_n == 1'b0) | (numReps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numReps_read_reg_186 <= numReps_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        totalIters_reg_191 <= grp_fu_124_p2;
    end
end

always @ (*) begin
    if ((icmp_ln193_fu_129_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_reg_196_pp0_iter1_reg == 1'd0) & (icmp_ln196_reg_205_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_p_Val2_s_phi_fu_118_p4 = zext_ln193_fu_166_p1;
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_118_p4 = ap_phi_reg_pp0_iter2_p_Val2_s_reg_115;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_205 == 1'd1) & (icmp_ln193_reg_196 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op27_read_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numReps_blk_n = numReps_empty_n;
    end else begin
        numReps_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numReps_out_blk_n = numReps_out_full_n;
    end else begin
        numReps_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((numReps_out_full_n == 1'b0) | (numReps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numReps_out_write = 1'b1;
    end else begin
        numReps_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((numReps_out_full_n == 1'b0) | (numReps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numReps_read = 1'b1;
    end else begin
        numReps_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_reg_196_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln193_reg_196_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((numReps_out_full_n == 1'b0) | (numReps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln193_fu_129_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln193_fu_129_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln193_reg_196_pp0_iter1_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op27_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln193_reg_196_pp0_iter1_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op27_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln193_reg_196_pp0_iter1_reg == 1'd0) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op27_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((numReps_out_full_n == 1'b0) | (numReps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((in_V_V_empty_n == 1'b0) & (ap_predicate_op27_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((icmp_ln193_reg_196_pp0_iter1_reg == 1'd0) & (out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_173 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_Val2_s_reg_115 = 'bx;

always @ (*) begin
    ap_predicate_op27_read_state5 = ((icmp_ln196_reg_205 == 1'd1) & (icmp_ln193_reg_196 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign grp_fu_124_p1 = 32'd230400;

assign icmp_ln193_fu_129_p2 = ((t_0_i_reg_104 == totalIters_reg_191) ? 1'b1 : 1'b0);

assign icmp_ln196_fu_140_p2 = ((o_0_i_reg_93 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln207_fu_152_p2 = ((o_fu_146_p2 == 32'd8) ? 1'b1 : 1'b0);

assign numReps_out_din = numReps_dout;

assign o_fu_146_p2 = (32'd1 + o_0_i_reg_93);

assign out_V_V_din = ap_phi_mux_p_Val2_s_phi_fu_118_p4[23:0];

assign select_ln207_fu_158_p3 = ((icmp_ln207_fu_152_p2[0:0] === 1'b1) ? 32'd0 : o_fu_146_p2);

assign start_out = real_start;

assign t_fu_134_p2 = (t_0_i_reg_104 + 32'd1);

assign zext_ln193_fu_166_p1 = p_025_0_i_reg_81;

endmodule //StreamingDataWidthCo_1
