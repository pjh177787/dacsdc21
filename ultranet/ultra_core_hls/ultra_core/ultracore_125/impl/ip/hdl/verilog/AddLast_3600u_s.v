// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddLast_3600u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST,
        out_r_TKEEP,
        reps_dout,
        reps_empty_n,
        reps_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [63:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;
output  [7:0] out_r_TKEEP;
input  [31:0] reps_dout;
input   reps_empty_n;
output   reps_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_read;
reg out_r_TVALID;
reg[0:0] out_r_TLAST;
reg reps_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln21_fu_98_p2;
reg    out_r_TDATA_blk_n;
reg    reps_blk_n;
reg  signed [31:0] reps_read_reg_109;
reg    ap_block_state1;
wire   [31:0] grp_fu_88_p2;
reg   [31:0] mul_ln21_reg_114;
wire    ap_CS_fsm_state3;
wire   [31:0] add_ln21_fu_93_p2;
reg   [31:0] add_ln21_reg_119;
wire    ap_CS_fsm_state4;
wire   [31:0] i_fu_103_p2;
reg    ap_block_state5;
reg    ap_block_state5_io;
reg   [31:0] i_0_i_reg_77;
wire   [12:0] grp_fu_88_p1;
wire    ap_CS_fsm_state2;
reg   [4:0] ap_NS_fsm;
reg    ap_condition_104;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

ultra_net_mul_32sdXL #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 32 ))
ultra_net_mul_32sdXL_U751(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reps_read_reg_109),
    .din1(grp_fu_88_p1),
    .ce(1'b1),
    .dout(grp_fu_88_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0))) & (icmp_ln21_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0))) & (icmp_ln21_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_i_reg_77 <= i_fu_103_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_reg_77 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln21_reg_119 <= add_ln21_fu_93_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln21_reg_114 <= grp_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((reps_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_read_reg_109 <= reps_dout;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0))) & (icmp_ln21_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0))) & (icmp_ln21_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln21_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state5_io) | ((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0))) & (icmp_ln21_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b1 == ap_block_state5_io) | ((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0))) & (icmp_ln21_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln21_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        out_r_TDATA_blk_n = out_r_TREADY;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_104)) begin
        if ((icmp_ln21_fu_98_p2 == 1'd1)) begin
            out_r_TLAST = 1'd1;
        end else if ((icmp_ln21_fu_98_p2 == 1'd0)) begin
            out_r_TLAST = 1'd0;
        end else begin
            out_r_TLAST = 'bx;
        end
    end else begin
        out_r_TLAST = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state5_io) | ((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0))) & (icmp_ln21_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b1 == ap_block_state5_io) | ((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0))) & (icmp_ln21_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        out_r_TVALID = 1'b1;
    end else begin
        out_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_blk_n = reps_empty_n;
    end else begin
        reps_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((reps_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_read = 1'b1;
    end else begin
        reps_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((reps_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0))) & (icmp_ln21_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state5_io) | ((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0))) & (icmp_ln21_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_93_p2 = ($signed(mul_ln21_reg_114) + $signed(32'd4294967295));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((reps_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state5 = (((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_io = (((icmp_ln21_fu_98_p2 == 1'd1) & (out_r_TREADY == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (out_r_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_104 = (~(((icmp_ln21_fu_98_p2 == 1'd1) & (in_V_V_empty_n == 1'b0)) | ((icmp_ln21_fu_98_p2 == 1'd0) & (in_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state5));
end

assign grp_fu_88_p1 = 32'd3600;

assign i_fu_103_p2 = (i_0_i_reg_77 + 32'd1);

assign icmp_ln21_fu_98_p2 = ((i_0_i_reg_77 == add_ln21_reg_119) ? 1'b1 : 1'b0);

assign out_r_TDATA = in_V_V_dout;

assign out_r_TKEEP = 8'd255;

endmodule //AddLast_3600u_s
