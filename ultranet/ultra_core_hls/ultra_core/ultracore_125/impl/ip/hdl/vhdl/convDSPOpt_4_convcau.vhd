-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convcau_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convcau_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11101100100111100011000011101100", 
    1 => "01010100110010110011001010111110", 
    2 => "11110100000101010011010000000010", 
    3 => "00010010000000001111111000010000", 
    4 => "11011100110010101101111011110000", 
    5 => "00110100000110110000111000101100", 
    6 => "11110100110011011111001011000000", 
    7 => "10110001111000111110110010111101", 
    8 => "11100110000110011011100101101111", 
    9 => "00000000010000101100001001001011", 
    10 => "11010000101111101110001010100111", 
    11 => "11000001101000010101111010011110", 
    12 => "00001110000111000011110011111011", 
    13 => "00001010110110111101000110110011", 
    14 => "11110011000001101111000011111111", 
    15 => "00001110000100111111000000000010", 
    16 => "11110000110011100010110011011101", 
    17 => "11001100111110100000001000000100", 
    18 => "11010000101111111101111111101110", 
    19 => "00101101111011100001101111110001", 
    20 => "11110000000011010010001011000011", 
    21 => "11100000111011010000001000010000", 
    22 => "00010100111001101110001100010100", 
    23 => "11111110111100110001000111110001", 
    24 => "00011001100100101110001110110011", 
    25 => "11101010111000000010101000011110", 
    26 => "11101101111000000000010000001111", 
    27 => "00101101000011111101111000101110", 
    28 => "11011110110101011110000110011111", 
    29 => "11111010110011110000101111011011", 
    30 => "11111100001011100101111100001111", 
    31 => "11111011110011111101111000011011", 
    32 => "00010001000101000100000010100010", 
    33 => "11001110001011110101010110100011", 
    34 => "11010000000100010001111111011101", 
    35 => "11100000111011000100000011011011", 
    36 => "00001111110101101101001100000001", 
    37 => "11100000110101100010110111100001", 
    38 => "00001111111100011011111110111101", 
    39 => "10110010110001001101000111001111", 
    40 => "00100001111001000000010110110011", 
    41 => "11110001111100101111000111001110", 
    42 => "00000001111000010000111100011110", 
    43 => "11110010111101001100010011101111", 
    44 => "00000010110101000100000011000011", 
    45 => "10101101000011111011110011000000", 
    46 => "11110000110000010011110000100011", 
    47 => "01000010000000010000001000111110", 
    48 => "11101110111100100001111010100001", 
    49 => "00101110000111001110001011110101", 
    50 => "11100000000100000001110111011101", 
    51 => "00011010000011011011111100101110", 
    52 => "11010011100100100000001010101110", 
    53 => "00101010000000000100110011001111", 
    54 => "10110010000100110000110000100000", 
    55 => "00011111001000011011111000100001", 
    56 => "11010110100111110011000010101110", 
    57 => "10111101001010100100110000011110", 
    58 => "10110010001000100001001001000000", 
    59 => "00010010101111100010101111111001", 
    60 => "11110010110110010100000100000101", 
    61 => "11000000001011101100111000111110", 
    62 => "00001110001011010101111111000100", 
    63 => "11110001001100110001111101000011", 
    64 => "00001110000010110100110110011111", 
    65 => "00100000001000101001000111100000", 
    66 => "11100001111100100111000110110101", 
    67 => "11010011101000110010000100001111", 
    68 => "00001110010001011110001111110010", 
    69 => "00010001011100011111111010110111", 
    70 => "00000100111000010001000111000010", 
    71 => "00111110001100010101000111110010", 
    72 => "11110001001100000100001110110010", 
    73 => "11110100000100011001010011100011", 
    74 => "00010110110001110011111100110001", 
    75 => "00000000000101101111011100110001", 
    76 => "00011010011100001111111111011011", 
    77 => "00011111110000001110011111111001", 
    78 => "00101001000100000001001000001110", 
    79 => "11100001111000010011111100010111", 
    80 => "00101011011101101110000111100001", 
    81 => "00100000110111110001000010101011", 
    82 => "01001011011101110100010110010011", 
    83 => "10110101000101101101010011111111", 
    84 => "00101110110100101101000000001110", 
    85 => "00011111000111111010111011111110", 
    86 => "00011111110110100011001100101110", 
    87 => "00001101110010110000111100011101", 
    88 => "00010001000000001110111000001111", 
    89 => "00000000010111101101111101000100", 
    90 => "11110011111000100101001101001111", 
    91 => "11110001111011010001111100011111", 
    92 => "00010000111010110000101100011110", 
    93 => "11001111000101010000101100001111", 
    94 => "00010011000100000010001111110001", 
    95 => "11001101111011110011010111111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convcau is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convcau is
    component convDSPOpt_4_convcau_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convcau_rom_U :  component convDSPOpt_4_convcau_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


