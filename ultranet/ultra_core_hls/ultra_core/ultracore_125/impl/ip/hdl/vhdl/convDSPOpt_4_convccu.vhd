-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convccu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convccu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00100000101111100000000101011110", 
    1 => "00100010001100001101110001000010", 
    2 => "01001011001100101111001111110001", 
    3 => "00000000001100110101111100011001", 
    4 => "01000011110001000000000111110001", 
    5 => "00010100001011110100110011001111", 
    6 => "01001110000000100000000011011111", 
    7 => "00010010000000000010001011011100", 
    8 => "11111101111000110011111100011101", 
    9 => "00110001000111111110000011101101", 
    10 => "00100001001011100000110110110000", 
    11 => "11010010111011101110111011000000", 
    12 => "11111101000111110001111100001100", 
    13 => "11011100111011001100111111010011", 
    14 => "11000001000001101111000111111100", 
    15 => "00010000111101011111111100100010", 
    16 => "11100000000011111100000000000000", 
    17 => "11011110110011100000111000101100", 
    18 => "10011100110000011110110011001011", 
    19 => "00011111000011111111101111111110", 
    20 => "11010011000000100010000100000100", 
    21 => "00100010110100010011111100101111", 
    22 => "11011111111101100000000000001100", 
    23 => "11110100111001011101000000010011", 
    24 => "00111011001111110011011101000010", 
    25 => "00011011110000101111111100100100", 
    26 => "11001111011011111111000000110011", 
    27 => "00001100001000110010101000000110", 
    28 => "00101101001111001111001110010010", 
    29 => "11111100101100000000110101011110", 
    30 => "11001101000100010000000101100011", 
    31 => "11001011001000110100100111110101", 
    32 => "11110010000011110011110110010000", 
    33 => "00001100110000010001000100101101", 
    34 => "11011110000001010010010101000001", 
    35 => "11000000110000100101101011110001", 
    36 => "00111110101111110010010011100010", 
    37 => "11001110101100101001101000101111", 
    38 => "11100000000011010000101100101100", 
    39 => "10011101010100001100000011101010", 
    40 => "01000011111011010000010000010001", 
    41 => "11101110000100110000101111011110", 
    42 => "11100000000011101100111000101110", 
    43 => "10100000011011011100001000000111", 
    44 => "11011011101010100001110101000000", 
    45 => "10100000011100110101111111010010", 
    46 => "11010010101111000000110011100100", 
    47 => "10110100001011100011001111110100", 
    48 => "11011110000000100110011110010101", 
    49 => "00010111010000011100110110010100", 
    50 => "00101111011110111110011101110100", 
    51 => "00101110010011000100011011010100", 
    52 => "00100001011000000001010111100010", 
    53 => "11110100000011111110001010011110", 
    54 => "00000010000000010001000100101110", 
    55 => "00010001010100101110111000010010", 
    56 => "11001101001111000011001100101111", 
    57 => "00000001111111111111000011101001", 
    58 => "11000011110000000011110100000100", 
    59 => "11100110000111101111000000011110", 
    60 => "00001111110111010010101110111110", 
    61 => "01001111011010011100111100100000", 
    62 => "11010001001000000010000011100101", 
    63 => "11000010001011100101110000000000", 
    64 => "00010010000111110010000010010000", 
    65 => "11111101110111110010110001001101", 
    66 => "11000000000111100000000110010011", 
    67 => "10110001110111110101000111101101", 
    68 => "11110010001100101111001010110010", 
    69 => "11001111111111110001100100010011", 
    70 => "10111101110011010011100110010011", 
    71 => "00100001000011010011011000011111", 
    72 => "10110001101101011011001111111111", 
    73 => "00001110111000100000101000100000", 
    74 => "11101110111100000000000000000000", 
    75 => "11100000001000011110110100001111", 
    76 => "10110101100100101110000000010100", 
    77 => "11011110111000110010110001000010", 
    78 => "11101110110111000000111011110001", 
    79 => "11101111001100011001110100011100", 
    80 => "11011101100100011101110100000001", 
    81 => "00110000000100011100110101110001", 
    82 => "11110011110100000001000000000000", 
    83 => "11110001001001011100000100101010", 
    84 => "11111100100101001011111100001110", 
    85 => "00011101001011110000101011000000", 
    86 => "00011100111010110100000111111110", 
    87 => "00001011111111001101111100100000", 
    88 => "11100010101100001100001111011010", 
    89 => "00101110001111010001001111000111", 
    90 => "11100010000100000001001000111010", 
    91 => "11001100111011100011010010110001", 
    92 => "00101110011110011011111100110010", 
    93 => "10011101000011000111011101001111", 
    94 => "11110001100100011010011000001111", 
    95 => "10010100110101110011101110011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convccu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convccu is
    component convDSPOpt_4_convccu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convccu_rom_U :  component convDSPOpt_4_convccu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


