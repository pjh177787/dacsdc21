-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1x1DSP2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    reps_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    reps_empty_n : IN STD_LOGIC;
    reps_read : OUT STD_LOGIC );
end;


architecture behav of conv1x1DSP2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv45_0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv45_1680 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001011010000000";
    constant ap_const_lv45_1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_const_lv14_1680 : STD_LOGIC_VECTOR (13 downto 0) := "01011010000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv10_120 : STD_LOGIC_VECTOR (9 downto 0) := "0100100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv13_DD : STD_LOGIC_VECTOR (12 downto 0) := "0000011011101";
    constant ap_const_lv10_366 : STD_LOGIC_VECTOR (9 downto 0) := "1101100110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_8_bias_new_V_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_8_bias_new_V_0_ce0 : STD_LOGIC;
    signal conv_8_bias_new_V_0_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv_8_bias_new_V_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_8_bias_new_V_0_ce1 : STD_LOGIC;
    signal conv_8_bias_new_V_0_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv_8_bias_new_V_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_8_bias_new_V_1_ce0 : STD_LOGIC;
    signal conv_8_bias_new_V_1_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_8_bias_new_V_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_8_bias_new_V_1_ce1 : STD_LOGIC;
    signal conv_8_bias_new_V_1_q1 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_8_w_new_V_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_8_w_new_V_0_ce0 : STD_LOGIC;
    signal conv_8_w_new_V_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_8_w_new_V_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_8_w_new_V_1_ce0 : STD_LOGIC;
    signal conv_8_w_new_V_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln213_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_776_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln244_reg_981 : STD_LOGIC_VECTOR (0 downto 0);
    signal reps_blk_n : STD_LOGIC;
    signal indvar_flatten83_reg_219 : STD_LOGIC_VECTOR (44 downto 0);
    signal indvar_flatten37_reg_230 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_reg_241 : STD_LOGIC_VECTOR (9 downto 0);
    signal peIdx_0_i_reg_252 : STD_LOGIC_VECTOR (4 downto 0);
    signal simdIdx_0_i_reg_263 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln213_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal bound46_reg_771 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln213_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln213_reg_776_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_776_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_776_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_776_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_776_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_776_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln213_1_fu_322_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln214_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln214_fu_340_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_348_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_798 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln215_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln215_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln215_reg_813_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln215_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln215_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln215_reg_820_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal peIdx_fu_421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal peIdx_reg_827 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_4_fu_438_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_4_reg_833 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_4_reg_833_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_4_reg_833_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_4_reg_833_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_4_reg_833_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_4_reg_833_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_8_fu_446_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal simdIdx_fu_454_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_9_fu_466_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_8_bias_new_V_0_1_reg_855 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal conv_8_bias_new_V_1_1_reg_860 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_6_fu_530_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln215_6_reg_885 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln215_6_reg_885_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln215_6_reg_885_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln215_6_reg_885_pp0_iter6_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln215_6_reg_885_pp0_iter7_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln215_7_fu_537_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_7_reg_890 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_7_reg_890_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_7_reg_890_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_7_reg_890_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_7_reg_890_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln235_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln235_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal outPartialArr_0_V_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outPartialArr_0_V_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln68_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln68_reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal outPartialArr_0_V_2_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal outPartialArr_0_V_2_reg_971 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_reg_976 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln244_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter2_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal grp_simd_mac_DSP2_fu_274_invec_0_V_read : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_simd_mac_DSP2_fu_274_invec_1_V_read : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_simd_mac_DSP2_fu_274_invec_2_V_read : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_simd_mac_DSP2_fu_274_invec_3_V_read : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_simd_mac_DSP2_fu_274_w0vec_0_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_simd_mac_DSP2_fu_274_w0vec_1_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_simd_mac_DSP2_fu_274_w0vec_2_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_simd_mac_DSP2_fu_274_w0vec_3_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_simd_mac_DSP2_fu_274_w1vec_0_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_simd_mac_DSP2_fu_274_w1vec_1_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_simd_mac_DSP2_fu_274_w1vec_2_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_simd_mac_DSP2_fu_274_w1vec_3_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_simd_mac_DSP2_fu_274_ap_return_0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_simd_mac_DSP2_fu_274_ap_return_1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_simd_mac_DSP2_fu_274_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter0_ignore_call56 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1_ignore_call56 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2_ignore_call56 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3_ignore_call56 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4_ignore_call56 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5_ignore_call56 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter6_ignore_call56 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter7_ignore_call56 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter8_ignore_call56 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp101 : BOOLEAN;
    signal zext_ln247_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln247_1_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln224_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal outPartialArr_1_V_2_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal outPartialArr_1_V_fu_713_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_outPartialArr_1_V_2_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outPartialArr_V_0_3_s_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln235_fu_708_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_outPartialArr_V_0_3_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln213_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln213_1_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln214_fu_334_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln216_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln214_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln214_1_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln215_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln214_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln215_1_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_fu_396_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln215_2_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln215_3_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln215_5_fu_460_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln224_mid1_fu_480_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln215_1_fu_474_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln215_5_fu_487_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln216_fu_503_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_fu_494_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln224_fu_506_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_2_fu_518_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln215_3_fu_524_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln215_fu_702_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln215_80_fu_705_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_1_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_fu_728_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_311_p10 : STD_LOGIC_VECTOR (44 downto 0);

    component simd_mac_DSP2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        invec_0_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        invec_1_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        invec_2_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        invec_3_V_read : IN STD_LOGIC_VECTOR (3 downto 0);
        w0vec_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        w0vec_1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        w0vec_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        w0vec_3_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        w1vec_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        w1vec_1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        w1vec_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        w1vec_3_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component ultra_net_mul_14ndVL IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component conv1x1DSP2_conv_dRK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component conv1x1DSP2_conv_dSL IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv1x1DSP2_conv_dTL IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1x1DSP2_conv_dUL IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_8_bias_new_V_0_U : component conv1x1DSP2_conv_dRK
    generic map (
        DataWidth => 13,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_8_bias_new_V_0_address0,
        ce0 => conv_8_bias_new_V_0_ce0,
        q0 => conv_8_bias_new_V_0_q0,
        address1 => conv_8_bias_new_V_0_address1,
        ce1 => conv_8_bias_new_V_0_ce1,
        q1 => conv_8_bias_new_V_0_q1);

    conv_8_bias_new_V_1_U : component conv1x1DSP2_conv_dSL
    generic map (
        DataWidth => 10,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_8_bias_new_V_1_address0,
        ce0 => conv_8_bias_new_V_1_ce0,
        q0 => conv_8_bias_new_V_1_q0,
        address1 => conv_8_bias_new_V_1_address1,
        ce1 => conv_8_bias_new_V_1_ce1,
        q1 => conv_8_bias_new_V_1_q1);

    conv_8_w_new_V_0_U : component conv1x1DSP2_conv_dTL
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_8_w_new_V_0_address0,
        ce0 => conv_8_w_new_V_0_ce0,
        q0 => conv_8_w_new_V_0_q0);

    conv_8_w_new_V_1_U : component conv1x1DSP2_conv_dUL
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_8_w_new_V_1_address0,
        ce0 => conv_8_w_new_V_1_ce0,
        q0 => conv_8_w_new_V_1_q0);

    grp_simd_mac_DSP2_fu_274 : component simd_mac_DSP2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        invec_0_V_read => grp_simd_mac_DSP2_fu_274_invec_0_V_read,
        invec_1_V_read => grp_simd_mac_DSP2_fu_274_invec_1_V_read,
        invec_2_V_read => grp_simd_mac_DSP2_fu_274_invec_2_V_read,
        invec_3_V_read => grp_simd_mac_DSP2_fu_274_invec_3_V_read,
        w0vec_0_V_read => grp_simd_mac_DSP2_fu_274_w0vec_0_V_read,
        w0vec_1_V_read => grp_simd_mac_DSP2_fu_274_w0vec_1_V_read,
        w0vec_2_V_read => grp_simd_mac_DSP2_fu_274_w0vec_2_V_read,
        w0vec_3_V_read => grp_simd_mac_DSP2_fu_274_w0vec_3_V_read,
        w1vec_0_V_read => grp_simd_mac_DSP2_fu_274_w1vec_0_V_read,
        w1vec_1_V_read => grp_simd_mac_DSP2_fu_274_w1vec_1_V_read,
        w1vec_2_V_read => grp_simd_mac_DSP2_fu_274_w1vec_2_V_read,
        w1vec_3_V_read => grp_simd_mac_DSP2_fu_274_w1vec_3_V_read,
        ap_return_0 => grp_simd_mac_DSP2_fu_274_ap_return_0,
        ap_return_1 => grp_simd_mac_DSP2_fu_274_ap_return_1,
        ap_ce => grp_simd_mac_DSP2_fu_274_ap_ce);

    ultra_net_mul_14ndVL_U735 : component ultra_net_mul_14ndVL
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 14,
        din1_WIDTH => 32,
        dout_WIDTH => 45)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_311_p0,
        din1 => grp_fu_311_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_311_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln213_fu_317_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter2_state6)) then 
                        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten37_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_fu_317_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten37_reg_230 <= select_ln214_fu_340_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten37_reg_230 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten83_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_fu_317_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten83_reg_219 <= add_ln213_1_fu_322_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten83_reg_219 <= ap_const_lv45_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_reg_776 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_241 <= select_ln215_9_fu_466_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_241 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    peIdx_0_i_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_reg_776 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                peIdx_0_i_reg_252 <= select_ln215_8_fu_446_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                peIdx_0_i_reg_252 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    simdIdx_0_i_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_reg_776 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                simdIdx_0_i_reg_263 <= simdIdx_fu_454_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                simdIdx_0_i_reg_263 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((reps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    add_ln213_reg_761(31 downto 1) <= add_ln213_fu_302_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_reg_776_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln700_reg_976 <= add_ln700_fu_691_p2;
                icmp_ln235_reg_955 <= icmp_ln235_fu_664_p2;
                icmp_ln244_reg_981 <= icmp_ln244_fu_697_p2;
                outPartialArr_0_V_2_reg_971 <= outPartialArr_0_V_2_fu_685_p2;
                outPartialArr_0_V_reg_961 <= outPartialArr_0_V_fu_677_p1;
                sext_ln68_reg_966 <= sext_ln68_fu_681_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_reg_776 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln215_reg_820 <= and_ln215_fu_415_p2;
                or_ln215_reg_813 <= or_ln215_fu_391_p2;
                peIdx_reg_827 <= peIdx_fu_421_p2;
                select_ln215_4_reg_833 <= select_ln215_4_fu_438_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln215_reg_820_pp0_iter2_reg <= and_ln215_reg_820;
                icmp_ln213_reg_776_pp0_iter2_reg <= icmp_ln213_reg_776_pp0_iter1_reg;
                icmp_ln213_reg_776_pp0_iter3_reg <= icmp_ln213_reg_776_pp0_iter2_reg;
                icmp_ln213_reg_776_pp0_iter4_reg <= icmp_ln213_reg_776_pp0_iter3_reg;
                icmp_ln213_reg_776_pp0_iter5_reg <= icmp_ln213_reg_776_pp0_iter4_reg;
                icmp_ln213_reg_776_pp0_iter6_reg <= icmp_ln213_reg_776_pp0_iter5_reg;
                icmp_ln213_reg_776_pp0_iter7_reg <= icmp_ln213_reg_776_pp0_iter6_reg;
                or_ln215_reg_813_pp0_iter2_reg <= or_ln215_reg_813;
                select_ln215_4_reg_833_pp0_iter2_reg <= select_ln215_4_reg_833;
                select_ln215_4_reg_833_pp0_iter3_reg <= select_ln215_4_reg_833_pp0_iter2_reg;
                select_ln215_4_reg_833_pp0_iter4_reg <= select_ln215_4_reg_833_pp0_iter3_reg;
                select_ln215_4_reg_833_pp0_iter5_reg <= select_ln215_4_reg_833_pp0_iter4_reg;
                select_ln215_4_reg_833_pp0_iter6_reg <= select_ln215_4_reg_833_pp0_iter5_reg;
                select_ln215_6_reg_885_pp0_iter4_reg <= select_ln215_6_reg_885;
                select_ln215_6_reg_885_pp0_iter5_reg <= select_ln215_6_reg_885_pp0_iter4_reg;
                select_ln215_6_reg_885_pp0_iter6_reg <= select_ln215_6_reg_885_pp0_iter5_reg;
                select_ln215_6_reg_885_pp0_iter7_reg <= select_ln215_6_reg_885_pp0_iter6_reg;
                select_ln215_7_reg_890_pp0_iter4_reg <= select_ln215_7_reg_890;
                select_ln215_7_reg_890_pp0_iter5_reg <= select_ln215_7_reg_890_pp0_iter4_reg;
                select_ln215_7_reg_890_pp0_iter6_reg <= select_ln215_7_reg_890_pp0_iter5_reg;
                select_ln215_7_reg_890_pp0_iter7_reg <= select_ln215_7_reg_890_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound46_reg_771 <= grp_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_8_bias_new_V_0_1_reg_855 <= conv_8_bias_new_V_0_q0;
                conv_8_bias_new_V_1_1_reg_860 <= conv_8_bias_new_V_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln213_reg_776 <= icmp_ln213_fu_317_p2;
                icmp_ln213_reg_776_pp0_iter1_reg <= icmp_ln213_reg_776;
                    shl_ln_reg_798(8 downto 4) <= shl_ln_fu_348_p3(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln214_reg_785 <= icmp_ln214_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_reg_776_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                outPartialArr_1_V_2_fu_116 <= outPartialArr_1_V_fu_713_p3;
                outPartialArr_V_0_3_s_fu_120 <= select_ln235_fu_708_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln213_reg_776_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln215_6_reg_885 <= select_ln215_6_fu_530_p3;
                select_ln215_7_reg_890 <= select_ln215_7_fu_537_p3;
            end if;
        end if;
    end process;
    add_ln213_reg_761(0) <= '0';
    shl_ln_reg_798(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, reps_empty_n, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((reps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln213_1_fu_322_p2 <= std_logic_vector(unsigned(indvar_flatten83_reg_219) + unsigned(ap_const_lv45_1));
    add_ln213_fu_302_p2 <= std_logic_vector(unsigned(shl_ln213_fu_290_p2) + unsigned(shl_ln213_1_fu_296_p2));
    add_ln214_fu_334_p2 <= std_logic_vector(unsigned(indvar_flatten37_reg_230) + unsigned(ap_const_lv14_1));
    add_ln215_1_fu_734_p2 <= std_logic_vector(unsigned(outPartialArr_1_V_fu_713_p3) + unsigned(sext_ln215_80_fu_705_p1));
    add_ln215_5_fu_460_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_241) + unsigned(ap_const_lv10_1));
    add_ln215_fu_728_p2 <= std_logic_vector(unsigned(select_ln235_fu_708_p3) + unsigned(sext_ln215_fu_702_p1));
    add_ln224_fu_506_p2 <= std_logic_vector(unsigned(zext_ln216_fu_503_p1) + unsigned(zext_ln215_fu_494_p1));
    add_ln700_fu_691_p2 <= std_logic_vector(signed(sext_ln68_fu_681_p1) + signed(ap_sig_allocacmp_outPartialArr_1_V_2_1));
    and_ln214_1_fu_385_p2 <= (xor_ln214_fu_362_p2 and icmp_ln215_fu_379_p2);
    and_ln214_fu_373_p2 <= (xor_ln214_fu_362_p2 and icmp_ln216_fu_367_p2);
    and_ln215_fu_415_p2 <= (or_ln215_1_fu_410_p2 and and_ln214_fu_373_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter3, icmp_ln213_reg_776_pp0_iter2_reg, ap_enable_reg_pp0_iter8, icmp_ln244_reg_981)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln244_reg_981 = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((icmp_ln213_reg_776_pp0_iter2_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter3, icmp_ln213_reg_776_pp0_iter2_reg, ap_enable_reg_pp0_iter8, icmp_ln244_reg_981)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln244_reg_981 = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((icmp_ln213_reg_776_pp0_iter2_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp101_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter3, icmp_ln213_reg_776_pp0_iter2_reg, ap_enable_reg_pp0_iter8, icmp_ln244_reg_981)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp101 <= (((icmp_ln244_reg_981 = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((icmp_ln213_reg_776_pp0_iter2_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter3, icmp_ln213_reg_776_pp0_iter2_reg, ap_enable_reg_pp0_iter8, icmp_ln244_reg_981)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln244_reg_981 = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((icmp_ln213_reg_776_pp0_iter2_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, reps_empty_n)
    begin
                ap_block_state1 <= ((reps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter6_ignore_call56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter7_ignore_call56 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter8_assign_proc : process(out_V_V_full_n, icmp_ln244_reg_981)
    begin
                ap_block_state12_pp0_stage0_iter8 <= ((icmp_ln244_reg_981 = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state12_pp0_stage0_iter8_ignore_call56_assign_proc : process(out_V_V_full_n, icmp_ln244_reg_981)
    begin
                ap_block_state12_pp0_stage0_iter8_ignore_call56 <= ((icmp_ln244_reg_981 = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0_ignore_call56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1_ignore_call56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2_ignore_call56 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter3_assign_proc : process(in_V_V_empty_n, icmp_ln213_reg_776_pp0_iter2_reg)
    begin
                ap_block_state7_pp0_stage0_iter3 <= ((icmp_ln213_reg_776_pp0_iter2_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage0_iter3_ignore_call56_assign_proc : process(in_V_V_empty_n, icmp_ln213_reg_776_pp0_iter2_reg)
    begin
                ap_block_state7_pp0_stage0_iter3_ignore_call56 <= ((icmp_ln213_reg_776_pp0_iter2_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter4_ignore_call56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5_ignore_call56 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter2_state6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter2_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter2_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_outPartialArr_1_V_2_1_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln213_reg_776_pp0_iter7_reg, outPartialArr_1_V_2_fu_116, outPartialArr_1_V_fu_713_p3)
    begin
        if (((icmp_ln213_reg_776_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            ap_sig_allocacmp_outPartialArr_1_V_2_1 <= outPartialArr_1_V_fu_713_p3;
        else 
            ap_sig_allocacmp_outPartialArr_1_V_2_1 <= outPartialArr_1_V_2_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_outPartialArr_V_0_3_1_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln213_reg_776_pp0_iter7_reg, outPartialArr_V_0_3_s_fu_120, select_ln235_fu_708_p3)
    begin
        if (((icmp_ln213_reg_776_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            ap_sig_allocacmp_outPartialArr_V_0_3_1 <= select_ln235_fu_708_p3;
        else 
            ap_sig_allocacmp_outPartialArr_V_0_3_1 <= outPartialArr_V_0_3_s_fu_120;
        end if; 
    end process;

    conv_8_bias_new_V_0_address0 <= zext_ln247_fu_356_p1(5 - 1 downto 0);
    conv_8_bias_new_V_0_address1 <= zext_ln247_1_fu_498_p1(5 - 1 downto 0);

    conv_8_bias_new_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_8_bias_new_V_0_ce0 <= ap_const_logic_1;
        else 
            conv_8_bias_new_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_8_bias_new_V_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_8_bias_new_V_0_ce1 <= ap_const_logic_1;
        else 
            conv_8_bias_new_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_8_bias_new_V_1_address0 <= zext_ln247_fu_356_p1(5 - 1 downto 0);
    conv_8_bias_new_V_1_address1 <= zext_ln247_1_fu_498_p1(5 - 1 downto 0);

    conv_8_bias_new_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_8_bias_new_V_1_ce0 <= ap_const_logic_1;
        else 
            conv_8_bias_new_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_8_bias_new_V_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_8_bias_new_V_1_ce1 <= ap_const_logic_1;
        else 
            conv_8_bias_new_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_8_w_new_V_0_address0 <= zext_ln224_fu_512_p1(9 - 1 downto 0);

    conv_8_w_new_V_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_8_w_new_V_0_ce0 <= ap_const_logic_1;
        else 
            conv_8_w_new_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_8_w_new_V_1_address0 <= zext_ln224_fu_512_p1(9 - 1 downto 0);

    conv_8_w_new_V_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_8_w_new_V_1_ce0 <= ap_const_logic_1;
        else 
            conv_8_w_new_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_311_p0 <= ap_const_lv45_1680(14 - 1 downto 0);
    grp_fu_311_p1 <= grp_fu_311_p10(32 - 1 downto 0);
    grp_fu_311_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln213_reg_761),45));

    grp_simd_mac_DSP2_fu_274_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp101)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp101) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_simd_mac_DSP2_fu_274_ap_ce <= ap_const_logic_1;
        else 
            grp_simd_mac_DSP2_fu_274_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_simd_mac_DSP2_fu_274_invec_0_V_read <= in_V_V_dout(4 - 1 downto 0);
    grp_simd_mac_DSP2_fu_274_invec_1_V_read <= in_V_V_dout(7 downto 4);
    grp_simd_mac_DSP2_fu_274_invec_2_V_read <= in_V_V_dout(11 downto 8);
    grp_simd_mac_DSP2_fu_274_invec_3_V_read <= in_V_V_dout(15 downto 12);
    grp_simd_mac_DSP2_fu_274_w0vec_0_V_read <= conv_8_w_new_V_0_q0(8 - 1 downto 0);
    grp_simd_mac_DSP2_fu_274_w0vec_1_V_read <= conv_8_w_new_V_0_q0(15 downto 8);
    grp_simd_mac_DSP2_fu_274_w0vec_2_V_read <= conv_8_w_new_V_0_q0(23 downto 16);
    grp_simd_mac_DSP2_fu_274_w0vec_3_V_read <= conv_8_w_new_V_0_q0(31 downto 24);
    grp_simd_mac_DSP2_fu_274_w1vec_0_V_read <= conv_8_w_new_V_1_q0(8 - 1 downto 0);
    grp_simd_mac_DSP2_fu_274_w1vec_1_V_read <= conv_8_w_new_V_1_q0(15 downto 8);
    grp_simd_mac_DSP2_fu_274_w1vec_2_V_read <= conv_8_w_new_V_1_q0(23 downto 16);
    grp_simd_mac_DSP2_fu_274_w1vec_3_V_read <= conv_8_w_new_V_1_q0(31 downto 24);
    icmp_ln213_fu_317_p2 <= "1" when (indvar_flatten83_reg_219 = bound46_reg_771) else "0";
    icmp_ln214_fu_328_p2 <= "1" when (indvar_flatten37_reg_230 = ap_const_lv14_1680) else "0";
    icmp_ln215_fu_379_p2 <= "1" when (indvar_flatten_reg_241 = ap_const_lv10_120) else "0";
    icmp_ln216_fu_367_p2 <= "1" when (simdIdx_0_i_reg_263 = ap_const_lv5_10) else "0";
    icmp_ln235_fu_664_p2 <= "1" when (select_ln215_4_reg_833_pp0_iter6_reg = ap_const_lv5_0) else "0";
    icmp_ln244_fu_697_p2 <= "1" when (select_ln215_4_reg_833_pp0_iter6_reg = ap_const_lv5_F) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln213_reg_776_pp0_iter2_reg)
    begin
        if (((icmp_ln213_reg_776_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln213_reg_776_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln213_reg_776_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln215_1_fu_410_p2 <= (xor_ln215_fu_404_p2 or icmp_ln214_reg_785);
    or_ln215_2_fu_427_p2 <= (and_ln215_fu_415_p2 or and_ln214_1_fu_385_p2);
    or_ln215_3_fu_433_p2 <= (or_ln215_2_fu_427_p2 or icmp_ln214_reg_785);
    or_ln215_fu_391_p2 <= (icmp_ln214_reg_785 or and_ln214_1_fu_385_p2);
    outPartialArr_0_V_2_fu_685_p2 <= std_logic_vector(signed(outPartialArr_0_V_fu_677_p1) + signed(ap_sig_allocacmp_outPartialArr_V_0_3_1));
        outPartialArr_0_V_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_simd_mac_DSP2_fu_274_ap_return_0),32));

    outPartialArr_1_V_fu_713_p3 <= 
        sext_ln68_reg_966 when (icmp_ln235_reg_955(0) = '1') else 
        add_ln700_reg_976;

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln244_reg_981)
    begin
        if (((icmp_ln244_reg_981 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (add_ln215_1_fu_734_p2 & add_ln215_fu_728_p2);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln244_reg_981, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln244_reg_981 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    peIdx_fu_421_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln215_fu_396_p3));

    reps_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_blk_n <= reps_empty_n;
        else 
            reps_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    reps_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n)
    begin
        if ((not(((reps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_read <= ap_const_logic_1;
        else 
            reps_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln214_fu_340_p3 <= 
        ap_const_lv14_1 when (icmp_ln214_fu_328_p2(0) = '1') else 
        add_ln214_fu_334_p2;
    select_ln215_1_fu_474_p3 <= 
        ap_const_lv9_0 when (or_ln215_reg_813(0) = '1') else 
        shl_ln_reg_798;
    select_ln215_2_fu_518_p3 <= 
        ap_const_lv13_DD when (or_ln215_reg_813_pp0_iter2_reg(0) = '1') else 
        conv_8_bias_new_V_0_1_reg_855;
    select_ln215_3_fu_524_p3 <= 
        ap_const_lv10_366 when (or_ln215_reg_813_pp0_iter2_reg(0) = '1') else 
        conv_8_bias_new_V_1_1_reg_860;
    select_ln215_4_fu_438_p3 <= 
        ap_const_lv5_0 when (or_ln215_3_fu_433_p2(0) = '1') else 
        simdIdx_0_i_reg_263;
    select_ln215_5_fu_487_p3 <= 
        shl_ln224_mid1_fu_480_p3 when (and_ln215_reg_820(0) = '1') else 
        select_ln215_1_fu_474_p3;
    select_ln215_6_fu_530_p3 <= 
        conv_8_bias_new_V_0_q1 when (and_ln215_reg_820_pp0_iter2_reg(0) = '1') else 
        select_ln215_2_fu_518_p3;
    select_ln215_7_fu_537_p3 <= 
        conv_8_bias_new_V_1_q1 when (and_ln215_reg_820_pp0_iter2_reg(0) = '1') else 
        select_ln215_3_fu_524_p3;
    select_ln215_8_fu_446_p3 <= 
        peIdx_fu_421_p2 when (and_ln215_fu_415_p2(0) = '1') else 
        select_ln215_fu_396_p3;
    select_ln215_9_fu_466_p3 <= 
        ap_const_lv10_1 when (or_ln215_fu_391_p2(0) = '1') else 
        add_ln215_5_fu_460_p2;
    select_ln215_fu_396_p3 <= 
        ap_const_lv5_0 when (or_ln215_fu_391_p2(0) = '1') else 
        peIdx_0_i_reg_252;
    select_ln235_fu_708_p3 <= 
        outPartialArr_0_V_reg_961 when (icmp_ln235_reg_955(0) = '1') else 
        outPartialArr_0_V_2_reg_971;
        sext_ln215_80_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln215_7_reg_890_pp0_iter7_reg),32));

        sext_ln215_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln215_6_reg_885_pp0_iter7_reg),32));

        sext_ln68_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_simd_mac_DSP2_fu_274_ap_return_1),32));

    shl_ln213_1_fu_296_p2 <= std_logic_vector(shift_left(unsigned(reps_dout),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln213_fu_290_p2 <= std_logic_vector(shift_left(unsigned(reps_dout),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln224_mid1_fu_480_p3 <= (peIdx_reg_827 & ap_const_lv4_0);
    shl_ln_fu_348_p3 <= (peIdx_0_i_reg_252 & ap_const_lv4_0);
    simdIdx_fu_454_p2 <= std_logic_vector(unsigned(select_ln215_4_fu_438_p3) + unsigned(ap_const_lv5_1));
    xor_ln214_fu_362_p2 <= (icmp_ln214_reg_785 xor ap_const_lv1_1);
    xor_ln215_fu_404_p2 <= (icmp_ln215_fu_379_p2 xor ap_const_lv1_1);
    zext_ln215_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_5_fu_487_p3),10));
    zext_ln216_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_4_reg_833),10));
    zext_ln224_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln224_fu_506_p2),64));
    zext_ln247_1_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(peIdx_reg_827),64));
    zext_ln247_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(peIdx_0_i_reg_252),64));
end behav;
