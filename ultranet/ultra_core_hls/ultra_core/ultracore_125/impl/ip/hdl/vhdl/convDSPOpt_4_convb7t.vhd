-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convb7t_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convb7t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01000100000001000100000000110000", 
    1 => "11110010000100000010001000111100", 
    2 => "11010001010000010000001000010000", 
    3 => "11111111110001101111111100111110", 
    4 => "01011101111101000010010011100001", 
    5 => "11111110111100001110000111101011", 
    6 => "00011010000100001011110111010000", 
    7 => "10010010110100101010000011001110", 
    8 => "00010100000011100000000111111101", 
    9 => "11100101000101000001111011101110", 
    10 => "11101111000111101101111011000001", 
    11 => "00100001101100001101011011011111", 
    12 => "11111001010000110011000011010000", 
    13 => "00001110000000110000000011110001", 
    14 => "00100001001000000000111111000101", 
    15 => "00111001001110101110101011100010", 
    16 => "11101001010010100011110110110010", 
    17 => "00101101001000011110010001001011", 
    18 => "11100101111000110001111100010100", 
    19 => "00101011111111000000100111101111", 
    20 => "11111011000011110001110011101101", 
    21 => "00010000010000110100001011111101", 
    22 => "00100101000011010011000100001111", 
    23 => "01001100000110100001110011101110", 
    24 => "11000011000000101101110100110000", 
    25 => "00000010111111111110111011110111", 
    26 => "11110010111010010001000111100001", 
    27 => "11100011000011101111111100110010", 
    28 => "00001101111000101101000100110000", 
    29 => "00011111111011111110110111111110", 
    30 => "00001110110110010001110100010010", 
    31 => "11100000111111111100110100000010", 
    32 => "01000010111000010000000001000000", 
    33 => "00101111000100001001111111101011", 
    34 => "00001101111011101111000100010000", 
    35 => "11101111111111111011111000000011", 
    36 => "00101110110111101111111111101110", 
    37 => "11010011110100100001001010111100", 
    38 => "00010001001100001011111000000000", 
    39 => "01010010001011010000001111111110", 
    40 => "00001101010000110011000011010001", 
    41 => "00111111111100001110000001111110", 
    42 => "00011001111000000000111011101011", 
    43 => "11010010000000010001110111100001", 
    44 => "11010010111000001111000011001111", 
    45 => "01001101000111101101001000101100", 
    46 => "00001111001011110010010100100000", 
    47 => "11110000000111010000000100000011", 
    48 => "00111101001000101101010110111010", 
    49 => "11101111110100011011110111110100", 
    50 => "11111101111000100100000100101001", 
    51 => "11111110000000100010111101000001", 
    52 => "00101100110101001110110100100001", 
    53 => "00010010111000001111111000000011", 
    54 => "00010001111000011110001000001100", 
    55 => "00000101111100100101111100111111", 
    56 => "00001101101001110011000100000000", 
    57 => "00111110000111100000111100000000", 
    58 => "01011001001011101011111100001110", 
    59 => "11000101000000001100111001000000", 
    60 => "11100010111100110000110111100000", 
    61 => "01000000111111000000110100011011", 
    62 => "00011110011111000101110110111011", 
    63 => "11000011111111110001110001011111", 
    64 => "00000011001101110000101101000000", 
    65 => "01001101101000011101110011111100", 
    66 => "00101010110111010101111001001110", 
    67 => "11010011000100111110001000110010", 
    68 => "11111100111000110101000111111100", 
    69 => "01111011100101010011101010100010", 
    70 => "10111001110111000010110101111111", 
    71 => "01001111001011110000110011110010", 
    72 => "10110000000101010001101110110000", 
    73 => "01000000000000000100000100001111", 
    74 => "00111110111100110110111011111010", 
    75 => "00011011111110111101001111111100", 
    76 => "11100000001101011110111011001110", 
    77 => "11000010111111100101111100010000", 
    78 => "11000001000101000111001011101010", 
    79 => "01001111111000001110110011111110", 
    80 => "11110000111001011100010100001010", 
    81 => "10110010101111000010111011101100", 
    82 => "10111111000101000001001111101110", 
    83 => "00110010010001111110001000100100", 
    84 => "10100001111110101100000111110000", 
    85 => "00001111010000011110010110100010", 
    86 => "00000001000110111111010100110001", 
    87 => "11110000000110101101000111100000", 
    88 => "10111010010100000000001100010001", 
    89 => "00001111001111010000110111100010", 
    90 => "11001110000011101110111000001101", 
    91 => "00000000001010111011111100010010", 
    92 => "10101010010011111011110100010000", 
    93 => "11100011111111111100110100101111", 
    94 => "00000010110010110000110111101101", 
    95 => "11111110000010111001111000100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convb7t is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convb7t is
    component convDSPOpt_4_convb7t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convb7t_rom_U :  component convDSPOpt_4_convb7t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


