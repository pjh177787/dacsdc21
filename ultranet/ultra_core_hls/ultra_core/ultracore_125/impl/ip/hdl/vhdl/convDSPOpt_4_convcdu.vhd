-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convcdu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convcdu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11110010101000101110110111011100", 
    1 => "00110001111111101101110111111101", 
    2 => "00101011001011101011111100001110", 
    3 => "00110000001000011101000000011100", 
    4 => "00110010011100100000001111000000", 
    5 => "11000010111010111011011010110011", 
    6 => "11111001001010101011111011111110", 
    7 => "00101111111011101100001011010001", 
    8 => "11001001111011000100110010011111", 
    9 => "00010010001000011010000001110000", 
    10 => "00001010100111001101110100000010", 
    11 => "10010101010011101100001010100100", 
    12 => "11010010011100011111010011101100", 
    13 => "11111110000100000010010100010100", 
    14 => "11110010000000011110111001000000", 
    15 => "00100110010000100100111111001100", 
    16 => "01011110011110101110011100000000", 
    17 => "10010100000100000111111111110001", 
    18 => "00100000001000101001011001000110", 
    19 => "10110111011101010110010011001001", 
    20 => "00001101101011001100011101001101", 
    21 => "10100101000100000100010000100000", 
    22 => "00111111111100001100001101000001", 
    23 => "11100010001101001111001011111001", 
    24 => "11110111101111010100111000011111", 
    25 => "11101110111000001110100100000000", 
    26 => "00000110111111011101111101000000", 
    27 => "11101101101111101101010000110001", 
    28 => "00011100001011101011001000100001", 
    29 => "00101101010111110010111011000001", 
    30 => "00001111000110100010001011111111", 
    31 => "11101110111011001100111100001101", 
    32 => "11001100111111001001111111010001", 
    33 => "00001110000011001011110011011100", 
    34 => "11011101111110010000110111001111", 
    35 => "10110001000010011010000000000010", 
    36 => "00000011001011100010111100100100", 
    37 => "00011111111011100110000100001110", 
    38 => "11000011001001110010001100010110", 
    39 => "11000001111001110101110111100000", 
    40 => "00101110001001010001000100110001", 
    41 => "00010010000011000101111011001100", 
    42 => "00100010000000100010001100000110", 
    43 => "00001111000001100000110011101110", 
    44 => "11111101101100100100000100111110", 
    45 => "00110010011111101010111000110001", 
    46 => "11101101100101010010111100000011", 
    47 => "00011100110001101111000100000011", 
    48 => "00011110001011101100000100000001", 
    49 => "11010011110000101101111111010001", 
    50 => "00101110010011001110000000000010", 
    51 => "11011110000100001111000000110100", 
    52 => "00010000110100101101001011111101", 
    53 => "11110011101111010000110100100011", 
    54 => "00001101111110101110110100000001", 
    55 => "00011110010011101101001100001110", 
    56 => "11000011100111100010001111011111", 
    57 => "00000001111011110001000111010000", 
    58 => "11010000110111001110111000000000", 
    59 => "00011100001000000001000111111111", 
    60 => "00001100111001100010010100001011", 
    61 => "00100001111010111101110100001101", 
    62 => "00011111001111101111000011001111", 
    63 => "11110010000100001111000000011101", 
    64 => "00000001101100101011111100001111", 
    65 => "11100000001111011111000111101101", 
    66 => "11110101010100111101110111110010", 
    67 => "01000001111101001111110001011100", 
    68 => "11100010111000000110000111111111", 
    69 => "00000010101101101110110110111111", 
    70 => "00100110101100101101000100010111", 
    71 => "11000010111000000010001000000011", 
    72 => "10110001000011011101000100001101", 
    73 => "01000011000100000010000100001110", 
    74 => "00000101100111011110010011011111", 
    75 => "00111011111111100011110100011100", 
    76 => "11100011010110110000001011011011", 
    77 => "00000001001001011110010110011010", 
    78 => "11100101100111110000000111110001", 
    79 => "11100001111111000101111011110011", 
    80 => "00111111111000001111111110011100", 
    81 => "11111111110001000010111100010011", 
    82 => "00010000110110111101111111110001", 
    83 => "11111111101110110011110000001100", 
    84 => "11110000110110110111000011001101", 
    85 => "11110000010000001111001010011001", 
    86 => "11110011001101001111000000100000", 
    87 => "11110101010011110010001011010000", 
    88 => "10100011110110100010111011100000", 
    89 => "11000000000000010110110010100100", 
    90 => "11010001010000010000000000000100", 
    91 => "11000011111011010000110111101100", 
    92 => "11010011100100011001111000000000", 
    93 => "11000010000011011111101101110111", 
    94 => "11010100111100100001110100100010", 
    95 => "00011011101101000010110010111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convcdu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convcdu is
    component convDSPOpt_4_convcdu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convcdu_rom_U :  component convDSPOpt_4_convcdu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


