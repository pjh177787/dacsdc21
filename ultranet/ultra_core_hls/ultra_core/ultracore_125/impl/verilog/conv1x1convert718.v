// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1x1convert718 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        reps_dout,
        reps_empty_n,
        reps_read,
        reps_out_din,
        reps_out_full_n,
        reps_out_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        conv1in_V_V_din,
        conv1in_V_V_full_n,
        conv1in_V_V_write,
        reps_c_i_din,
        reps_c_i_full_n,
        reps_c_i_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] reps_dout;
input   reps_empty_n;
output   reps_read;
output  [31:0] reps_out_din;
input   reps_out_full_n;
output   reps_out_write;
input  [15:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [15:0] conv1in_V_V_din;
input   conv1in_V_V_full_n;
output   conv1in_V_V_write;
output  [31:0] reps_c_i_din;
input   reps_c_i_full_n;
output   reps_c_i_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg reps_read;
reg reps_out_write;
reg in_V_V_read;
reg conv1in_V_V_write;
reg reps_c_i_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    reps_blk_n;
reg    reps_out_blk_n;
reg    reps_c_i_blk_n;
wire   [31:0] add_ln97_fu_155_p2;
reg   [31:0] add_ln97_reg_209;
reg    ap_block_state1;
wire   [31:0] or_ln97_fu_161_p2;
reg   [31:0] or_ln97_reg_214;
wire   [31:0] rep_fu_172_p2;
reg   [31:0] rep_reg_222;
wire    ap_CS_fsm_state2;
wire   [0:0] xor_ln100_fu_183_p2;
reg   [0:0] xor_ln100_reg_227;
wire   [0:0] icmp_ln97_fu_167_p2;
wire   [0:0] icmp_ln102_fu_190_p2;
reg   [0:0] icmp_ln102_reg_232;
wire   [0:0] loadBufferIdx_V_fu_197_p2;
reg   [0:0] loadBufferIdx_V_reg_237;
wire   [0:0] storeBufferIdx_V_fu_203_p2;
reg   [0:0] storeBufferIdx_V_reg_242;
reg    row_buffer_0_V_ce0;
wire   [7:0] row_buffer_0_V_q0;
reg    row_buffer_0_V_ce1;
reg    row_buffer_0_V_we1;
reg    row_buffer_1_V_ce0;
wire   [7:0] row_buffer_1_V_q0;
reg    row_buffer_1_V_ce1;
reg    row_buffer_1_V_we1;
wire    grp_streamInOneRowTwoPix_fu_121_ap_start;
wire    grp_streamInOneRowTwoPix_fu_121_ap_done;
wire    grp_streamInOneRowTwoPix_fu_121_ap_idle;
wire    grp_streamInOneRowTwoPix_fu_121_ap_ready;
wire    grp_streamInOneRowTwoPix_fu_121_in_V_V_read;
wire   [9:0] grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_address1;
wire    grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_ce1;
wire    grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_we1;
wire   [7:0] grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_d1;
wire   [9:0] grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_address1;
wire    grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_ce1;
wire    grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_we1;
wire   [7:0] grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_d1;
wire    grp_streamInOneRowTwoPix_fu_121_skip_flag;
wire    grp_streamOutOneRowTwoPi_fu_132_ap_start;
wire    grp_streamOutOneRowTwoPi_fu_132_ap_done;
wire    grp_streamOutOneRowTwoPi_fu_132_ap_idle;
wire    grp_streamOutOneRowTwoPi_fu_132_ap_ready;
wire   [15:0] grp_streamOutOneRowTwoPi_fu_132_out_V_V_din;
wire    grp_streamOutOneRowTwoPi_fu_132_out_V_V_write;
wire   [9:0] grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_address0;
wire    grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_ce0;
wire   [9:0] grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_address0;
wire    grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_ce0;
wire    grp_streamOutOneRowTwoPi_fu_132_skip_flag;
reg   [0:0] t_V_21_reg_86;
wire    ap_CS_fsm_state3;
reg    ap_block_state3_on_subcall_done;
reg   [0:0] t_V_reg_98;
reg   [31:0] rep_0_i_i_i_reg_110;
reg    grp_streamInOneRowTwoPix_fu_121_ap_start_reg;
reg    grp_streamOutOneRowTwoPi_fu_132_ap_start_reg;
wire   [31:0] shl_ln97_fu_143_p2;
wire   [31:0] shl_ln97_1_fu_149_p2;
wire   [0:0] icmp_ln100_fu_178_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_streamInOneRowTwoPix_fu_121_ap_start_reg = 1'b0;
#0 grp_streamOutOneRowTwoPi_fu_132_ap_start_reg = 1'b0;
end

conv1x1convert718dOK #(
    .DataWidth( 8 ),
    .AddressRange( 640 ),
    .AddressWidth( 10 ))
row_buffer_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_address0),
    .ce0(row_buffer_0_V_ce0),
    .q0(row_buffer_0_V_q0),
    .address1(grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_address1),
    .ce1(row_buffer_0_V_ce1),
    .we1(row_buffer_0_V_we1),
    .d1(grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_d1)
);

conv1x1convert718dOK #(
    .DataWidth( 8 ),
    .AddressRange( 640 ),
    .AddressWidth( 10 ))
row_buffer_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_address0),
    .ce0(row_buffer_1_V_ce0),
    .q0(row_buffer_1_V_q0),
    .address1(grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_address1),
    .ce1(row_buffer_1_V_ce1),
    .we1(row_buffer_1_V_we1),
    .d1(grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_d1)
);

streamInOneRowTwoPix grp_streamInOneRowTwoPix_fu_121(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_streamInOneRowTwoPix_fu_121_ap_start),
    .ap_done(grp_streamInOneRowTwoPix_fu_121_ap_done),
    .ap_idle(grp_streamInOneRowTwoPix_fu_121_ap_idle),
    .ap_ready(grp_streamInOneRowTwoPix_fu_121_ap_ready),
    .in_V_V_dout(in_V_V_dout),
    .in_V_V_empty_n(in_V_V_empty_n),
    .in_V_V_read(grp_streamInOneRowTwoPix_fu_121_in_V_V_read),
    .row_buffer_0_V_address1(grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_address1),
    .row_buffer_0_V_ce1(grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_ce1),
    .row_buffer_0_V_we1(grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_we1),
    .row_buffer_0_V_d1(grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_d1),
    .row_buffer_1_V_address1(grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_address1),
    .row_buffer_1_V_ce1(grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_ce1),
    .row_buffer_1_V_we1(grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_we1),
    .row_buffer_1_V_d1(grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_d1),
    .skip_flag(grp_streamInOneRowTwoPix_fu_121_skip_flag),
    .rowBufferIdx_V(t_V_21_reg_86)
);

streamOutOneRowTwoPi grp_streamOutOneRowTwoPi_fu_132(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_streamOutOneRowTwoPi_fu_132_ap_start),
    .ap_done(grp_streamOutOneRowTwoPi_fu_132_ap_done),
    .ap_idle(grp_streamOutOneRowTwoPi_fu_132_ap_idle),
    .ap_ready(grp_streamOutOneRowTwoPi_fu_132_ap_ready),
    .out_V_V_din(grp_streamOutOneRowTwoPi_fu_132_out_V_V_din),
    .out_V_V_full_n(conv1in_V_V_full_n),
    .out_V_V_write(grp_streamOutOneRowTwoPi_fu_132_out_V_V_write),
    .row_buffer_0_V_address0(grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_address0),
    .row_buffer_0_V_ce0(grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_ce0),
    .row_buffer_0_V_q0(row_buffer_0_V_q0),
    .row_buffer_1_V_address0(grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_address0),
    .row_buffer_1_V_ce0(grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_ce0),
    .row_buffer_1_V_q0(row_buffer_1_V_q0),
    .skip_flag(grp_streamOutOneRowTwoPi_fu_132_skip_flag),
    .rowBufferIdx_V(t_V_reg_98)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln97_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_streamInOneRowTwoPix_fu_121_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln97_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_streamInOneRowTwoPix_fu_121_ap_start_reg <= 1'b1;
        end else if ((grp_streamInOneRowTwoPix_fu_121_ap_ready == 1'b1)) begin
            grp_streamInOneRowTwoPix_fu_121_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_streamOutOneRowTwoPi_fu_132_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln97_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_streamOutOneRowTwoPi_fu_132_ap_start_reg <= 1'b1;
        end else if ((grp_streamOutOneRowTwoPi_fu_132_ap_ready == 1'b1)) begin
            grp_streamOutOneRowTwoPi_fu_132_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
        rep_0_i_i_i_reg_110 <= rep_reg_222;
    end else if ((~((real_start == 1'b0) | (reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rep_0_i_i_i_reg_110 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
        t_V_21_reg_86 <= storeBufferIdx_V_reg_242;
    end else if ((~((real_start == 1'b0) | (reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_21_reg_86 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
        t_V_reg_98 <= loadBufferIdx_V_reg_237;
    end else if ((~((real_start == 1'b0) | (reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_98 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln97_reg_209[31 : 1] <= add_ln97_fu_155_p2[31 : 1];
        or_ln97_reg_214[31 : 1] <= or_ln97_fu_161_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln102_reg_232 <= icmp_ln102_fu_190_p2;
        loadBufferIdx_V_reg_237 <= loadBufferIdx_V_fu_197_p2;
        storeBufferIdx_V_reg_242 <= storeBufferIdx_V_fu_203_p2;
        xor_ln100_reg_227 <= xor_ln100_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rep_reg_222 <= rep_fu_172_p2;
    end
end

always @ (*) begin
    if (((icmp_ln97_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv1in_V_V_write = grp_streamOutOneRowTwoPi_fu_132_out_V_V_write;
    end else begin
        conv1in_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_V_V_read = grp_streamInOneRowTwoPix_fu_121_in_V_V_read;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln97_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_blk_n = reps_empty_n;
    end else begin
        reps_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_c_i_blk_n = reps_c_i_full_n;
    end else begin
        reps_c_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_c_i_write = 1'b1;
    end else begin
        reps_c_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_out_blk_n = reps_out_full_n;
    end else begin
        reps_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_out_write = 1'b1;
    end else begin
        reps_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_read = 1'b1;
    end else begin
        reps_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_buffer_0_V_ce0 = grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_ce0;
    end else begin
        row_buffer_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_buffer_0_V_ce1 = grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_ce1;
    end else begin
        row_buffer_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_buffer_0_V_we1 = grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_we1;
    end else begin
        row_buffer_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_buffer_1_V_ce0 = grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_ce0;
    end else begin
        row_buffer_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_buffer_1_V_ce1 = grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_ce1;
    end else begin
        row_buffer_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_buffer_1_V_we1 = grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_we1;
    end else begin
        row_buffer_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln97_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln97_fu_155_p2 = (shl_ln97_fu_143_p2 + shl_ln97_1_fu_149_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_streamOutOneRowTwoPi_fu_132_ap_done == 1'b0) | (grp_streamInOneRowTwoPix_fu_121_ap_done == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign conv1in_V_V_din = grp_streamOutOneRowTwoPi_fu_132_out_V_V_din;

assign grp_streamInOneRowTwoPix_fu_121_ap_start = grp_streamInOneRowTwoPix_fu_121_ap_start_reg;

assign grp_streamInOneRowTwoPix_fu_121_skip_flag = xor_ln100_reg_227;

assign grp_streamOutOneRowTwoPi_fu_132_ap_start = grp_streamOutOneRowTwoPi_fu_132_ap_start_reg;

assign grp_streamOutOneRowTwoPi_fu_132_skip_flag = icmp_ln102_reg_232;

assign icmp_ln100_fu_178_p2 = ((rep_0_i_i_i_reg_110 < add_ln97_reg_209) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_190_p2 = ((rep_0_i_i_i_reg_110 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_167_p2 = ((rep_0_i_i_i_reg_110 == or_ln97_reg_214) ? 1'b1 : 1'b0);

assign loadBufferIdx_V_fu_197_p2 = (t_V_reg_98 ^ 1'd1);

assign or_ln97_fu_161_p2 = (32'd1 | add_ln97_fu_155_p2);

assign rep_fu_172_p2 = (rep_0_i_i_i_reg_110 + 32'd1);

assign reps_c_i_din = reps_dout;

assign reps_out_din = reps_dout;

assign shl_ln97_1_fu_149_p2 = reps_dout << 32'd1;

assign shl_ln97_fu_143_p2 = reps_dout << 32'd3;

assign start_out = real_start;

assign storeBufferIdx_V_fu_203_p2 = (t_V_21_reg_86 ^ 1'd1);

assign xor_ln100_fu_183_p2 = (icmp_ln100_fu_178_p2 ^ 1'd1);

always @ (posedge ap_clk) begin
    add_ln97_reg_209[0] <= 1'b0;
    or_ln97_reg_214[0] <= 1'b1;
end

endmodule //conv1x1convert718
