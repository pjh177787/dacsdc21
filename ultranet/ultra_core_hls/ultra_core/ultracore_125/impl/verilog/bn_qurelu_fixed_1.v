// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bn_qurelu_fixed_1 (
        ap_clk,
        ap_rst,
        in_V,
        inc_V,
        bias_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [16:0] in_V;
input  [11:0] inc_V;
input  [20:0] bias_V;
output  [3:0] ap_return;
input   ap_ce;

reg[3:0] ap_return;

reg  signed [20:0] bias_V_read_reg_140;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire  signed [28:0] ret_V_fu_134_p2;
reg  signed [28:0] ret_V_reg_145;
wire   [20:0] add_ln1353_fu_60_p2;
reg   [20:0] add_ln1353_reg_151;
wire    ap_block_pp0_stage0;
wire  signed [20:0] add_ln1353_fu_60_p1;
wire  signed [29:0] sext_ln215_81_fu_69_p1;
wire  signed [29:0] sext_ln1352_fu_66_p1;
wire   [29:0] ret_V_131_fu_72_p2;
wire  signed [28:0] sext_ln1353_fu_84_p1;
(* use_dsp48 = "no" *) wire   [28:0] ret_V_130_fu_87_p2;
wire   [9:0] tmp_fu_92_p4;
wire   [0:0] icmp_ln895_71_fu_102_p2;
wire   [3:0] trunc_ln_fu_108_p4;
wire   [0:0] icmp_ln895_fu_78_p2;
wire   [3:0] select_ln192_fu_118_p3;
wire   [11:0] ret_V_fu_134_p0;
wire   [3:0] res_V_fu_126_p3;
reg    ap_ce_reg;
reg   [3:0] ap_return_int_reg;
wire   [28:0] ret_V_fu_134_p00;

ultra_net_mul_mulbQq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 29 ))
ultra_net_mul_mulbQq_U381(
    .din0(ret_V_fu_134_p0),
    .din1(in_V),
    .dout(ret_V_fu_134_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        add_ln1353_reg_151 <= add_ln1353_fu_60_p2;
        bias_V_read_reg_140 <= bias_V;
        ret_V_reg_145 <= ret_V_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= res_V_fu_126_p3;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = res_V_fu_126_p3;
    end
end

assign add_ln1353_fu_60_p1 = bias_V;

assign add_ln1353_fu_60_p2 = ($signed(21'd16384) + $signed(add_ln1353_fu_60_p1));

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign icmp_ln895_71_fu_102_p2 = ((tmp_fu_92_p4 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_78_p2 = (($signed(ret_V_131_fu_72_p2) > $signed(30'd0)) ? 1'b1 : 1'b0);

assign res_V_fu_126_p3 = ((icmp_ln895_fu_78_p2[0:0] === 1'b1) ? select_ln192_fu_118_p3 : 4'd0);

assign ret_V_130_fu_87_p2 = ($signed(ret_V_reg_145) + $signed(sext_ln1353_fu_84_p1));

assign ret_V_131_fu_72_p2 = ($signed(sext_ln215_81_fu_69_p1) + $signed(sext_ln1352_fu_66_p1));

assign ret_V_fu_134_p0 = ret_V_fu_134_p00;

assign ret_V_fu_134_p00 = inc_V;

assign select_ln192_fu_118_p3 = ((icmp_ln895_71_fu_102_p2[0:0] === 1'b1) ? 4'd15 : trunc_ln_fu_108_p4);

assign sext_ln1352_fu_66_p1 = ret_V_reg_145;

assign sext_ln1353_fu_84_p1 = $signed(add_ln1353_reg_151);

assign sext_ln215_81_fu_69_p1 = bias_V_read_reg_140;

assign tmp_fu_92_p4 = {{ret_V_130_fu_87_p2[28:19]}};

assign trunc_ln_fu_108_p4 = {{ret_V_130_fu_87_p2[18:15]}};

endmodule //bn_qurelu_fixed_1
