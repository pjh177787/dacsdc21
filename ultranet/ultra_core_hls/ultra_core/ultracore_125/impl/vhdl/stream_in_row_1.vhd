-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stream_in_row_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    row_buffer_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    row_buffer_V_ce1 : OUT STD_LOGIC;
    row_buffer_V_we1 : OUT STD_LOGIC;
    row_buffer_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    skip_flag : IN STD_LOGIC;
    rowBufferIdx_V : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of stream_in_row_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_A8 : STD_LOGIC_VECTOR (9 downto 0) := "0010101000";
    constant ap_const_lv8_A8 : STD_LOGIC_VECTOR (7 downto 0) := "10101000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln28_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_117 : STD_LOGIC_VECTOR (7 downto 0);
    signal peIdx_0_reg_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal v2_V_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_0_reg_152 : STD_LOGIC_VECTOR (4 downto 0);
    signal skip_flag_read_read_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln321_fu_191_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln321_reg_309 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln28_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op29_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln28_reg_314_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_203_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln29_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_215_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_reg_328 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln33_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_fu_229_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_2_fu_241_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_2_reg_342 : STD_LOGIC_VECTOR (3 downto 0);
    signal Part2_V_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln321_fu_287_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln321_reg_357 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_peIdx_0_phi_fu_132_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter0_reg_V_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_reg_V_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_reg_V_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_v1_V_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_v1_V_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_v1_V_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln321_9_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln321_fu_191_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal peIdx_fu_235_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_266_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln42_fu_273_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln28_fu_248_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln42_fu_277_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln321_8_fu_283_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln321_fu_191_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_condition_97 : BOOLEAN;
    signal ap_condition_112 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_reg_V_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_97)) then
                if (((icmp_ln28_fu_197_p2 = ap_const_lv1_0) and (icmp_ln33_fu_223_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_reg_V_reg_163 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_reg_V_reg_163 <= ap_phi_reg_pp0_iter0_reg_V_reg_163;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_v1_V_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_97)) then
                if (((icmp_ln28_fu_197_p2 = ap_const_lv1_0) and (icmp_ln33_fu_223_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_v1_V_reg_176 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_v1_V_reg_176 <= ap_phi_reg_pp0_iter0_v1_V_reg_176;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_reg_V_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_112)) then
                if (((icmp_ln33_reg_333 = ap_const_lv1_0) and (icmp_ln28_reg_314 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_reg_V_reg_163 <= in_V_V_dout(63 downto 32);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_reg_V_reg_163 <= ap_phi_reg_pp0_iter1_reg_V_reg_163;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_v1_V_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_112)) then
                if (((icmp_ln33_reg_333 = ap_const_lv1_0) and (icmp_ln28_reg_314 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_v1_V_reg_176 <= Part2_V_fu_262_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_v1_V_reg_176 <= ap_phi_reg_pp0_iter1_v1_V_reg_176;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_fu_197_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_117 <= add_ln28_fu_203_p2;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_117 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    peIdx_0_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_reg_314_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                peIdx_0_reg_128 <= select_ln28_2_reg_342;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                peIdx_0_reg_128 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    v2_V_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_reg_314_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                v2_V_reg_140 <= ap_phi_reg_pp0_iter2_reg_V_reg_163;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v2_V_reg_140 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_0_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_fu_197_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w_0_reg_152 <= w_fu_229_p2;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_0_reg_152 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_reg_314 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln321_reg_357 <= add_ln321_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln28_reg_314 <= icmp_ln28_fu_197_p2;
                icmp_ln28_reg_314_pp0_iter1_reg <= icmp_ln28_reg_314;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln29_reg_323 <= icmp_ln29_fu_209_p2;
                icmp_ln33_reg_333 <= icmp_ln33_fu_223_p2;
                select_ln28_reg_328 <= select_ln28_fu_215_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    mul_ln321_reg_309(9 downto 3) <= mul_ln321_fu_191_p2(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_reg_314 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln28_2_reg_342 <= select_ln28_2_fu_241_p3;
            end if;
        end if;
    end process;
    mul_ln321_reg_309(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, skip_flag_read_read_fu_88_p2, icmp_ln28_fu_197_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_88_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln28_fu_197_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln28_fu_197_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Part2_V_fu_262_p1 <= in_V_V_dout(32 - 1 downto 0);
    add_ln28_fu_203_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_117) + unsigned(ap_const_lv8_1));
    add_ln321_fu_287_p2 <= std_logic_vector(unsigned(zext_ln321_8_fu_283_p1) + unsigned(mul_ln321_reg_309));
    add_ln42_fu_277_p2 <= std_logic_vector(unsigned(zext_ln42_fu_273_p1) + unsigned(zext_ln28_fu_248_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter1, ap_predicate_op29_read_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op29_read_state3 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter1, ap_predicate_op29_read_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op29_read_state3 = ap_const_boolean_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, ap_predicate_op29_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((in_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op29_read_state3 = ap_const_boolean_1));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_112_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_112 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_97_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_97 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln28_fu_197_p2)
    begin
        if ((icmp_ln28_fu_197_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_peIdx_0_phi_fu_132_p4_assign_proc : process(ap_block_pp0_stage0, peIdx_0_reg_128, icmp_ln28_reg_314_pp0_iter1_reg, select_ln28_2_reg_342, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln28_reg_314_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_peIdx_0_phi_fu_132_p4 <= select_ln28_2_reg_342;
        else 
            ap_phi_mux_peIdx_0_phi_fu_132_p4 <= peIdx_0_reg_128;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_reg_V_reg_163 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_v1_V_reg_176 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op29_read_state3_assign_proc : process(icmp_ln28_reg_314, icmp_ln33_reg_333)
    begin
                ap_predicate_op29_read_state3 <= ((icmp_ln33_reg_333 = ap_const_lv1_0) and (icmp_ln28_reg_314 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln28_fu_197_p2 <= "1" when (indvar_flatten_reg_117 = ap_const_lv8_A8) else "0";
    icmp_ln29_fu_209_p2 <= "1" when (w_0_reg_152 = ap_const_lv5_15) else "0";
    icmp_ln33_fu_223_p2 <= "1" when (select_ln28_fu_215_p3 = ap_const_lv5_14) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln28_reg_314, icmp_ln33_reg_333)
    begin
        if (((icmp_ln33_reg_333 = ap_const_lv1_0) and (icmp_ln28_reg_314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op29_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op29_read_state3 = ap_const_boolean_1))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln321_fu_191_p0 <= mul_ln321_fu_191_p00(2 - 1 downto 0);
    mul_ln321_fu_191_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rowBufferIdx_V),10));
    mul_ln321_fu_191_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln321_fu_191_p0) * unsigned(ap_const_lv10_A8), 10));
    peIdx_fu_235_p2 <= std_logic_vector(unsigned(ap_phi_mux_peIdx_0_phi_fu_132_p4) + unsigned(ap_const_lv4_1));
    row_buffer_V_address1 <= zext_ln321_9_fu_301_p1(10 - 1 downto 0);

    row_buffer_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            row_buffer_V_ce1 <= ap_const_logic_1;
        else 
            row_buffer_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    row_buffer_V_d1 <= (ap_phi_reg_pp0_iter2_v1_V_reg_176 & v2_V_reg_140);

    row_buffer_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln28_reg_314_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_reg_314_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            row_buffer_V_we1 <= ap_const_logic_1;
        else 
            row_buffer_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln28_2_fu_241_p3 <= 
        peIdx_fu_235_p2 when (icmp_ln29_reg_323(0) = '1') else 
        ap_phi_mux_peIdx_0_phi_fu_132_p4;
    select_ln28_fu_215_p3 <= 
        ap_const_lv5_0 when (icmp_ln29_fu_209_p2(0) = '1') else 
        w_0_reg_152;
    shl_ln_fu_266_p3 <= (select_ln28_reg_328 & ap_const_lv3_0);
    skip_flag_read_read_fu_88_p2 <= (0=>skip_flag, others=>'-');
    w_fu_229_p2 <= std_logic_vector(unsigned(select_ln28_fu_215_p3) + unsigned(ap_const_lv5_1));
    zext_ln28_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_2_fu_241_p3),9));
    zext_ln321_8_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_277_p2),10));
    zext_ln321_9_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_reg_357),64));
    zext_ln42_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_266_p3),9));
end behav;
