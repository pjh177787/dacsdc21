-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convcsw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convcsw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000001101111110011111111101110", 
    1 => "11110010001100101111000100001011", 
    2 => "01011110110111100011000000011100", 
    3 => "00011101111111111110010000111010", 
    4 => "11100000111100111111000000001111", 
    5 => "11010100001000101111001110111100", 
    6 => "00000011101100000011110100001001", 
    7 => "11111111110100010001011101011001", 
    8 => "11101111110100100001001011100010", 
    9 => "00100000000000100100111111110010", 
    10 => "11010011001011100001000011101110", 
    11 => "01000000001111101100000100001110", 
    12 => "00011111111000110101111000000101", 
    13 => "01011010111100000000001100101101", 
    14 => "00001111001011011101101101101111", 
    15 => "00000100101100011111001111010001", 
    16 => "10011001000110100111110111000011", 
    17 => "00111001101111011101001111111111", 
    18 => "10100001000011000010111000101011", 
    19 => "01010000110010111111101110011100", 
    20 => "10011111110011110001111110111100", 
    21 => "00001100101111100011110100111011", 
    22 => "11101110111100010010111100000001", 
    23 => "00001101110111000000000111111101", 
    24 => "01000101001100010000010000000100", 
    25 => "00111101000011100000111100110001", 
    26 => "00001101011011010001000000011111", 
    27 => "11111101001100101111010001000000", 
    28 => "00110110001000000010010000000010", 
    29 => "00110000000100001111000100110010", 
    30 => "00101100010011110010001111101101", 
    31 => "11110010010100011110010000100001", 
    32 => "00100100000011100001010000010000", 
    33 => "01100001000111110011001000010001", 
    34 => "00101100010011110000010011111110", 
    35 => "00010100000011010010111001001111", 
    36 => "11101110010011111111000100001110", 
    37 => "11101110111011110001111100100011", 
    38 => "11011101001100010010110111101101", 
    39 => "00011110000111011110100100000011", 
    40 => "11101011000000100000000011011010", 
    41 => "11100000111111111011001000101111", 
    42 => "01101010110100000001101111101001", 
    43 => "01001101011011011100111000010001", 
    44 => "00111110000001110111111100000001", 
    45 => "00110000110111110011000110010000", 
    46 => "01110010111100110001110111011011", 
    47 => "00011111001000111101011111111011", 
    48 => "11101110011001000110001000111110", 
    49 => "11011111000011001010111011111001", 
    50 => "01010100111001000100101110100001", 
    51 => "00100100111111111101111100100111", 
    52 => "11100001001101010110000000101001", 
    53 => "11000000000111100000111111001100", 
    54 => "00111111001000010101000111010010", 
    55 => "11010111111100111110111000010001", 
    56 => "10111101001001001101111011011001", 
    57 => "10111110001011010110000011101101", 
    58 => "00101110000100010100001100010011", 
    59 => "10010010101100100010111111110000", 
    60 => "00110001111111111011111111100000", 
    61 => "00110010111111111011111010111100", 
    62 => "11111011010010110001111111001101", 
    63 => "11110100110010010000110100010100", 
    64 => "00011100110011011100111000010100", 
    65 => "00110001111111011100001110011100", 
    66 => "01010000111010110001000000001110", 
    67 => "00101110111110100000111111110000", 
    68 => "01000001110100001001000000010001", 
    69 => "11100010011011111110010011011010", 
    70 => "11101100111011000100001100000000", 
    71 => "11010011000000001100001001100010", 
    72 => "00000100110111110000111100001111", 
    73 => "00011111111111110000101000001110", 
    74 => "10010001111011111111000011110010", 
    75 => "11010100110000101110101111011101", 
    76 => "00000101100110101001000011110111", 
    77 => "10110101111010010000100100001001", 
    78 => "00110010110111111011011101100110", 
    79 => "11010001111000100000011110101111", 
    80 => "11110101111011111100111011001111", 
    81 => "10100111011000010001111011101110", 
    82 => "11001001110111011011011100110011", 
    83 => "01010010110100011101000111110110", 
    84 => "00000010111000000000110000011110", 
    85 => "00100101010000101011011011100000", 
    86 => "01100100001000100000000101010001", 
    87 => "11101111001000010001011111000101", 
    88 => "01100010011101000011000011110011", 
    89 => "11100011111000011111011010011011", 
    90 => "00111001111000000001010011100011", 
    91 => "10010101000101011111011111101110", 
    92 => "00000010101011110010111000000100", 
    93 => "11100001000100001010001010101101", 
    94 => "11111101000100110100001011100101", 
    95 => "11110110110100111111011100000001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convcsw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convcsw is
    component convDSPOpt_4_convcsw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convcsw_rom_U :  component convDSPOpt_4_convcsw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


