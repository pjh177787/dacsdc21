-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convciv_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convciv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11101011110111111111110010111101", 
    1 => "01001110010100011011110000001011", 
    2 => "00001110111011000000000011011111", 
    3 => "11101100110110100011110111110100", 
    4 => "11011101111100110100011110011101", 
    5 => "00101110001000011100101000110100", 
    6 => "11010001010111010011111100011101", 
    7 => "11101100110110110001000111100001", 
    8 => "01000010010111001110001111000001", 
    9 => "00000000111100000011111010011101", 
    10 => "00011111001110111110001100101110", 
    11 => "11001101111111010010011011100010", 
    12 => "00010000001100111110110001010000", 
    13 => "00001011001111100010100101111100", 
    14 => "00011001000110010010111111011010", 
    15 => "11111110000100100000111011011101", 
    16 => "11100111110111101101101001101111", 
    17 => "00011110001111111101110110101011", 
    18 => "00011001111111010010110111111111", 
    19 => "00110000011011110000111100011100", 
    20 => "10100100101111100001100100111101", 
    21 => "11010000001100011110110010011010", 
    22 => "10010000000000100100111100111110", 
    23 => "11000011111110111111001111000001", 
    24 => "11010001111111111100001001000001", 
    25 => "00110101001000101111001011011100", 
    26 => "00110110111111011111000100000010", 
    27 => "11000010001011110011000100011011", 
    28 => "00010011111111000001000101001111", 
    29 => "11110110000111010010111011101100", 
    30 => "00000011000000111100000100100010", 
    31 => "00000010000001000010000100101100", 
    32 => "00011010010000110101111100000100", 
    33 => "01000011000111010100000000100011", 
    34 => "00000101001001001101000000001111", 
    35 => "11011111111100100010110000011100", 
    36 => "00001110110111111100110100010011", 
    37 => "11101110000011110001111101101111", 
    38 => "01000011111011101100010100000011", 
    39 => "11010110111101000011010000000001", 
    40 => "01110000000011111001111000010111", 
    41 => "10010111011011110010001101101101", 
    42 => "01110000110111011001011100100100", 
    43 => "11010010101101110010011110100100", 
    44 => "11110011111000001100000000110001", 
    45 => "11001110010000000101001101010110", 
    46 => "01001100101111111100000100100101", 
    47 => "00010010101000010101000011110010", 
    48 => "00001110010111001111001000010000", 
    49 => "00101011110010111111101011000001", 
    50 => "00001001101110011101110101000010", 
    51 => "10011111000100000001000011000010", 
    52 => "11010100110000111100010000001011", 
    53 => "00110001111000001101110111010101", 
    54 => "11101001110011110010111001001101", 
    55 => "10110001010000011111001011101111", 
    56 => "11011111110001011111011000001101", 
    57 => "11111111110111000010110000100001", 
    58 => "00001011001000000010001101001110", 
    59 => "11110011000101001111010011110011", 
    60 => "01001111110100100001010100111111", 
    61 => "00001111110100000001111100111111", 
    62 => "00011011001100001100001011010000", 
    63 => "11101111000001110001111111011101", 
    64 => "00100111111111111101111101010000", 
    65 => "00100111001011011110110111110000", 
    66 => "11111100001001100000110111000000", 
    67 => "00011100001000101111110010111110", 
    68 => "10101010000000010010100110011100", 
    69 => "11101110110111011111000011111111", 
    70 => "10111101010001100101111111011001", 
    71 => "01100100000100000000101100000010", 
    72 => "11100000001110101001101010010011", 
    73 => "11101100001110111101001111011011", 
    74 => "11010011111011100000010011100001", 
    75 => "00000000110110110100100100101100", 
    76 => "10111111111011111100111110010010", 
    77 => "01011011111000010000111010011101", 
    78 => "10100110010010110001110110011101", 
    79 => "11101110001110101100101101001100", 
    80 => "00001111000011011111110010011110", 
    81 => "11011010110111010100111000011101", 
    82 => "10010001111010101111110011010000", 
    83 => "00011101111011001111110000001100", 
    84 => "00111010110111111111110110101110", 
    85 => "10110011001111010000010011110010", 
    86 => "00011111111100011111000100001110", 
    87 => "00011111000011110010110111010001", 
    88 => "00111011101111101010111110111101", 
    89 => "10101110111000111111001100000011", 
    90 => "11100010000000110000001110111110", 
    91 => "00001101111111110101101011100000", 
    92 => "00111111101100100010111011000001", 
    93 => "11100001000100000001110110101111", 
    94 => "00000000111101001100000111110010", 
    95 => "00000001000100110010111100111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convciv is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convciv is
    component convDSPOpt_4_convciv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convciv_rom_U :  component convDSPOpt_4_convciv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


