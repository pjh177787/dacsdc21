-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool2x2_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    vec_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    vec_V_V_empty_n : IN STD_LOGIC;
    vec_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    reps_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    reps_empty_n : IN STD_LOGIC;
    reps_read : OUT STD_LOGIC;
    reps_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    reps_out_full_n : IN STD_LOGIC;
    reps_out_write : OUT STD_LOGIC );
end;


architecture behav of max_pool2x2_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv40_1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal vec_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln35_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal and_ln51_reg_375 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_reg_375_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reps_blk_n : STD_LOGIC;
    signal reps_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_133 : STD_LOGIC_VECTOR (39 downto 0);
    signal h_0_i_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr_0_i_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal reps_read_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bound_fu_221_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal bound_reg_347 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln35_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln35_reg_352_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_1_fu_232_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln35_fu_250_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln35_reg_361 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln35_1_fu_258_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_1_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_fu_266_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln35_reg_371 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln35_reg_371_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_reg_375_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_fu_280_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i_reg_384 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln96_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln96_reg_389 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_store_V_addr_reg_394 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal row_store_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_store_V_ce0 : STD_LOGIC;
    signal row_store_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_store_V_ce1 : STD_LOGIC;
    signal row_store_V_we1 : STD_LOGIC;
    signal p_01_i_max2_PE_4u_16u_s_fu_166_ap_ready : STD_LOGIC;
    signal p_01_i_max2_PE_4u_16u_s_fu_166_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal op2_V_assign_5_0_i_max2_PE_4u_16u_s_fu_173_ap_ready : STD_LOGIC;
    signal op2_V_assign_5_0_i_max2_PE_4u_16u_s_fu_173_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_h_0_i_phi_fu_148_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln49_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_037_2_0_i_fu_78 : STD_LOGIC_VECTOR (63 downto 0);
    signal v2_V_0_i_fu_82 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln35_1_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln35_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_197_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_57_fu_209_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_shl4_fu_217_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_shl_fu_205_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal icmp_ln37_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_fu_270_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max2_PE_4u_16u_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data0_V : IN STD_LOGIC_VECTOR (63 downto 0);
        data1_V : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component max_pool2x2_3_rowbjl IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    row_store_V_U : component max_pool2x2_3_rowbjl
    generic map (
        DataWidth => 64,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_store_V_address0,
        ce0 => row_store_V_ce0,
        q0 => row_store_V_q0,
        address1 => row_store_V_addr_reg_394,
        ce1 => row_store_V_ce1,
        we1 => row_store_V_we1,
        d1 => p_01_i_max2_PE_4u_16u_s_fu_166_ap_return);

    p_01_i_max2_PE_4u_16u_s_fu_166 : component max2_PE_4u_16u_s
    port map (
        ap_ready => p_01_i_max2_PE_4u_16u_s_fu_166_ap_ready,
        data0_V => trunc_ln96_reg_389,
        data1_V => p_Result_i_reg_384,
        ap_return => p_01_i_max2_PE_4u_16u_s_fu_166_ap_return);

    op2_V_assign_5_0_i_max2_PE_4u_16u_s_fu_173 : component max2_PE_4u_16u_s
    port map (
        ap_ready => op2_V_assign_5_0_i_max2_PE_4u_16u_s_fu_173_ap_ready,
        data0_V => p_01_i_max2_PE_4u_16u_s_fu_166_ap_return,
        data1_V => row_store_V_q0,
        ap_return => op2_V_assign_5_0_i_max2_PE_4u_16u_s_fu_173_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    addr_0_i_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                addr_0_i_reg_155 <= add_ln37_fu_280_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                addr_0_i_reg_155 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    h_0_i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_reg_352 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                h_0_i_reg_144 <= select_ln35_1_reg_366;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                h_0_i_reg_144 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_133 <= add_ln35_1_fu_232_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_133 <= ap_const_lv40_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln51_reg_375 <= and_ln51_fu_274_p2;
                select_ln35_reg_361 <= select_ln35_fu_250_p3;
                trunc_ln35_reg_371 <= trunc_ln35_fu_266_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln51_reg_375_pp0_iter1_reg <= and_ln51_reg_375;
                icmp_ln35_reg_352 <= icmp_ln35_fu_227_p2;
                icmp_ln35_reg_352_pp0_iter1_reg <= icmp_ln35_reg_352;
                trunc_ln35_reg_371_pp0_iter1_reg <= trunc_ln35_reg_371;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln51_reg_375_pp0_iter2_reg <= and_ln51_reg_375_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    bound_reg_347(39 downto 10) <= bound_fu_221_p2(39 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln35_reg_371_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_037_2_0_i_fu_78 <= op2_V_assign_5_0_i_max2_PE_4u_16u_s_fu_173_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_reg_352 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_i_reg_384 <= vec_V_V_dout(127 downto 64);
                row_store_V_addr_reg_394 <= zext_ln49_fu_300_p1(8 - 1 downto 0);
                trunc_ln96_reg_389 <= trunc_ln96_fu_296_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                reps_read_reg_341 <= reps_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln35_1_reg_366 <= select_ln35_1_fu_258_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln51_reg_375_pp0_iter2_reg) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                v2_V_0_i_fu_82 <= p_037_2_0_i_fu_78;
            end if;
        end if;
    end process;
    bound_reg_347(9 downto 0) <= "0000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln35_fu_227_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln35_fu_227_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln35_fu_227_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln35_1_fu_232_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_133) + unsigned(ap_const_lv40_1));
    add_ln35_fu_191_p2 <= std_logic_vector(unsigned(shl_ln35_1_fu_186_p2) + unsigned(shl_ln35_fu_181_p2));
    add_ln37_fu_280_p2 <= std_logic_vector(unsigned(select_ln35_fu_250_p3) + unsigned(ap_const_lv8_1));
    and_ln51_fu_274_p2 <= (trunc_ln37_fu_270_p1 and trunc_ln35_fu_266_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(vec_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_352, ap_enable_reg_pp0_iter3, and_ln51_reg_375_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_lv1_1 = and_ln51_reg_375_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln35_reg_352 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(vec_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_352, ap_enable_reg_pp0_iter3, and_ln51_reg_375_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_lv1_1 = and_ln51_reg_375_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln35_reg_352 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(vec_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_352, ap_enable_reg_pp0_iter3, and_ln51_reg_375_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_lv1_1 = and_ln51_reg_375_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln35_reg_352 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, reps_empty_n, reps_out_full_n)
    begin
                ap_block_state1 <= ((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(vec_V_V_empty_n, icmp_ln35_reg_352)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln35_reg_352 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter3_assign_proc : process(out_V_V_full_n, and_ln51_reg_375_pp0_iter2_reg)
    begin
                ap_block_state6_pp0_stage0_iter3 <= ((ap_const_lv1_1 = and_ln51_reg_375_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln35_fu_227_p2)
    begin
        if ((icmp_ln35_fu_227_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_h_0_i_phi_fu_148_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln35_reg_352, h_0_i_reg_144, select_ln35_1_reg_366)
    begin
        if (((icmp_ln35_reg_352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_h_0_i_phi_fu_148_p4 <= select_ln35_1_reg_366;
        else 
            ap_phi_mux_h_0_i_phi_fu_148_p4 <= h_0_i_reg_144;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_221_p2 <= std_logic_vector(unsigned(p_shl4_fu_217_p1) + unsigned(p_shl_fu_205_p1));
    h_fu_238_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_h_0_i_phi_fu_148_p4));
    icmp_ln35_fu_227_p2 <= "1" when (indvar_flatten_reg_133 = bound_reg_347) else "0";
    icmp_ln37_fu_244_p2 <= "1" when (addr_0_i_reg_155 = ap_const_lv8_A0) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln51_reg_375_pp0_iter2_reg)
    begin
        if (((ap_const_lv1_1 = and_ln51_reg_375_pp0_iter2_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (p_037_2_0_i_fu_78 & v2_V_0_i_fu_82);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln51_reg_375_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln51_reg_375_pp0_iter2_reg) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_shl4_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_209_p3),40));
    p_shl_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_197_p3),40));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    reps_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_blk_n <= reps_empty_n;
        else 
            reps_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    reps_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_out_blk_n <= reps_out_full_n;
        else 
            reps_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    reps_out_din <= reps_dout;

    reps_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n)
    begin
        if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_out_write <= ap_const_logic_1;
        else 
            reps_out_write <= ap_const_logic_0;
        end if; 
    end process;


    reps_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n)
    begin
        if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_read <= ap_const_logic_1;
        else 
            reps_read <= ap_const_logic_0;
        end if; 
    end process;

    row_store_V_address0 <= zext_ln49_fu_300_p1(8 - 1 downto 0);

    row_store_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_store_V_ce0 <= ap_const_logic_1;
        else 
            row_store_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_store_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_store_V_ce1 <= ap_const_logic_1;
        else 
            row_store_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    row_store_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln35_reg_371_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln35_reg_371_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_store_V_we1 <= ap_const_logic_1;
        else 
            row_store_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln35_1_fu_258_p3 <= 
        h_fu_238_p2 when (icmp_ln37_fu_244_p2(0) = '1') else 
        ap_phi_mux_h_0_i_phi_fu_148_p4;
    select_ln35_fu_250_p3 <= 
        ap_const_lv8_0 when (icmp_ln37_fu_244_p2(0) = '1') else 
        addr_0_i_reg_155;
    shl_ln35_1_fu_186_p2 <= std_logic_vector(shift_left(unsigned(reps_read_reg_341),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    shl_ln35_fu_181_p2 <= std_logic_vector(shift_left(unsigned(reps_read_reg_341),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_57_fu_209_p3 <= (add_ln35_fu_191_p2 & ap_const_lv5_0);
    tmp_s_fu_197_p3 <= (add_ln35_fu_191_p2 & ap_const_lv7_0);
    trunc_ln35_fu_266_p1 <= select_ln35_1_fu_258_p3(1 - 1 downto 0);
    trunc_ln37_fu_270_p1 <= select_ln35_fu_250_p3(1 - 1 downto 0);
    trunc_ln96_fu_296_p1 <= vec_V_V_dout(64 - 1 downto 0);

    vec_V_V_blk_n_assign_proc : process(vec_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln35_reg_352)
    begin
        if (((icmp_ln35_reg_352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vec_V_V_blk_n <= vec_V_V_empty_n;
        else 
            vec_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vec_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln35_reg_352, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln35_reg_352 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            vec_V_V_read <= ap_const_logic_1;
        else 
            vec_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln49_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_reg_361),64));
end behav;
