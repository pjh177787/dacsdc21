-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convb9t_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convb9t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000011101100110011010011110001", 
    1 => "00010100000000100000111100111100", 
    2 => "11100101111011000001000000011111", 
    3 => "11111101010101011100001000100001", 
    4 => "01001111101100111111010000001111", 
    5 => "00101110000100101010111100101110", 
    6 => "11010001111110111100101011001100", 
    7 => "11011101110111111101000111111111", 
    8 => "00011101000000001111001000001101", 
    9 => "00110010111000011001110100000001", 
    10 => "00001111110111011101110011111110", 
    11 => "00111110111100000000001100001100", 
    12 => "00000100011110110001110011110001", 
    13 => "11100001110100000110100100001110", 
    14 => "10110000111111110101110111110100", 
    15 => "11101111110100001111110011111101", 
    16 => "00110101101111100000110111111111", 
    17 => "00100011110001010001100100111100", 
    18 => "00001101010011010000010100111111", 
    19 => "11110100000101101011111100011111", 
    20 => "00000001110000101001110011011110", 
    21 => "01001110100101011100110000011110", 
    22 => "00011011000011011010010111001001", 
    23 => "11001111111001011110000100000001", 
    24 => "00001110011110111110001100001111", 
    25 => "11101111000000000111011001010100", 
    26 => "00001110110111011100011000000010", 
    27 => "00010000001001000111000100101001", 
    28 => "11010000010100001101111100001110", 
    29 => "11000001111111010111000101001111", 
    30 => "11111111111100001111000111000110", 
    31 => "10011100000000101010000000001110", 
    32 => "11100100100111110001111000010001", 
    33 => "11001111000011110001110111100001", 
    34 => "11101111000100111111000100000011", 
    35 => "11100001111101001011010000100001", 
    36 => "00010000110011101101001100001111", 
    37 => "10110010111100101101001010111111", 
    38 => "11101001000011001111111000101111", 
    39 => "00000000000011100000000011011101", 
    40 => "00000101001100010001000111100001", 
    41 => "00111110000100000000111001000000", 
    42 => "00111010110000001110110111101011", 
    43 => "11001101000100010010111111000001", 
    44 => "11111111101100010000001111101111", 
    45 => "01000010001000000001010011101110", 
    46 => "00010010111001001101001011100000", 
    47 => "00010000111000001111111100011111", 
    48 => "11101111110011011110001011111110", 
    49 => "00000010111000011011111011000110", 
    50 => "00100001111010100010111100110010", 
    51 => "11101101110110010100001000110011", 
    52 => "00001100000010110000000111101111", 
    53 => "11100000101000010100000000000100", 
    54 => "00100000110111100000000000100011", 
    55 => "00101101001011000010111111111011", 
    56 => "10101111111000100001001011011111", 
    57 => "00011110110011100110000110111101", 
    58 => "00010000010000001011110110110000", 
    59 => "00000000010011011011111000001011", 
    60 => "00011100000011110001000111110010", 
    61 => "11001110101111001110000011110011", 
    62 => "11010000010011110000111111100000", 
    63 => "00011011001111110010000100010000", 
    64 => "11000010000011110000011001010000", 
    65 => "10101110001010100010011111100001", 
    66 => "11001111110101011101011111001110", 
    67 => "11011101011001010001111100001101", 
    68 => "11100000000000100000000001101101", 
    69 => "11000011010100100010010010101100", 
    70 => "11110010111101011100111010011111", 
    71 => "00001010000111111111000011111111", 
    72 => "11000001110000111101000010100001", 
    73 => "00000101110000000000000111010101", 
    74 => "11010011001110110001110100001111", 
    75 => "01011001001010101011001111100011", 
    76 => "10111111111110011010000011000111", 
    77 => "00010001111101011110001100110001", 
    78 => "00001110110110011001000111011110", 
    79 => "00011010110110011111101111001111", 
    80 => "11001010110010011111001100010000", 
    81 => "11101100101111111001000000101101", 
    82 => "01001010100111101001011111010011", 
    83 => "00101101111100101110111100010000", 
    84 => "10011101111011111101000111111110", 
    85 => "11101100001011101111110111101101", 
    86 => "11011110111011100010000000111111", 
    87 => "00001010001011011001111111100001", 
    88 => "10011111000011110000001011100001", 
    89 => "11011111110011111011101101000010", 
    90 => "00010100000100000001111100110011", 
    91 => "00001111111111111010001000010001", 
    92 => "10100100111011000000111100010100", 
    93 => "00110001110000111010101001011111", 
    94 => "11100100001000100010111001010001", 
    95 => "11101111111000011010001100010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convb9t is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convb9t is
    component convDSPOpt_4_convb9t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convb9t_rom_U :  component convDSPOpt_4_convb9t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


