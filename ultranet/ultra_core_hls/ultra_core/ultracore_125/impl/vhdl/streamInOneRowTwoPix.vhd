-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity streamInOneRowTwoPix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    row_buffer_0_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    row_buffer_0_V_ce1 : OUT STD_LOGIC;
    row_buffer_0_V_we1 : OUT STD_LOGIC;
    row_buffer_0_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    row_buffer_1_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    row_buffer_1_V_ce1 : OUT STD_LOGIC;
    row_buffer_1_V_we1 : OUT STD_LOGIC;
    row_buffer_1_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    skip_flag : IN STD_LOGIC;
    rowBufferIdx_V : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of streamInOneRowTwoPix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_A0 : STD_LOGIC_VECTOR (8 downto 0) := "010100000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln29_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten13_reg_164 : STD_LOGIC_VECTOR (8 downto 0);
    signal s_0_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_186 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0_reg_197 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_0_reg_208 : STD_LOGIC_VECTOR (3 downto 0);
    signal skip_flag_read_read_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_fu_219_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln321_reg_443 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln321_fu_247_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln321_reg_448 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln29_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln29_fu_259_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln29_reg_457 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln30_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_462 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_1_fu_285_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_1_reg_467 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln321_1_fu_333_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln321_1_reg_473 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln321_2_fu_345_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_2_reg_479 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_353_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln30_reg_483 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln30_1_fu_361_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_1_reg_488 : STD_LOGIC_VECTOR (5 downto 0);
    signal Part1_V_reg_493 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln321_3_fu_418_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln321_3_reg_499 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_fu_423_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_504 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln30_1_fu_428_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln30_1_reg_509 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten13_phi_fu_168_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_s_0_phi_fu_179_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_190_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_p_0_phi_fu_201_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_0_phi_fu_212_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln321_16_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_17_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Part2_V_fu_380_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_237_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_227_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal s_fu_265_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln321_fu_299_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_277_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln29_1_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln321_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_fu_321_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_1_fu_341_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln29_fu_367_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_386_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_15_fu_403_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln321_2_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln321_fu_399_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten13_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten13_reg_164 <= add_ln29_reg_457;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_164 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_186 <= select_ln30_1_reg_509;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_186 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                p_0_reg_197 <= select_ln30_reg_483;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0_reg_197 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    s_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                s_0_reg_175 <= select_ln29_1_reg_467;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                s_0_reg_175 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                w_0_reg_208 <= w_reg_504;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_0_reg_208 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                Part1_V_reg_493 <= in_V_V_dout(15 downto 8);
                add_ln321_3_reg_499 <= add_ln321_3_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln29_reg_457 <= add_ln29_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln30_1_reg_488 <= add_ln30_1_fu_361_p2;
                icmp_ln30_reg_462 <= icmp_ln30_fu_271_p2;
                select_ln321_1_reg_473 <= select_ln321_1_fu_333_p3;
                select_ln321_2_reg_479 <= select_ln321_2_fu_345_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    add_ln321_reg_448(10 downto 5) <= add_ln321_fu_247_p2(10 downto 5);
                    select_ln321_reg_443(5) <= select_ln321_fu_219_p3(5);    select_ln321_reg_443(7) <= select_ln321_fu_219_p3(7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln29_reg_453 <= icmp_ln29_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln29_1_reg_467 <= select_ln29_1_fu_285_p3;
                select_ln30_reg_483 <= select_ln30_fu_353_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln30_1_reg_509 <= select_ln30_1_fu_428_p3;
                w_reg_504 <= w_fu_423_p2;
            end if;
        end if;
    end process;
    select_ln321_reg_443(4 downto 0) <= "00000";
    select_ln321_reg_443(6 downto 6) <= "0";
    select_ln321_reg_443(8) <= '0';
    add_ln321_reg_448(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, skip_flag_read_read_fu_102_p2, icmp_ln29_fu_253_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln29_fu_253_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln29_fu_253_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    Part2_V_fu_380_p1 <= in_V_V_dout(8 - 1 downto 0);
    add_ln29_fu_259_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten13_phi_fu_168_p4) + unsigned(ap_const_lv9_1));
    add_ln30_1_fu_361_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_190_p4) + unsigned(ap_const_lv6_1));
    add_ln321_2_fu_407_p2 <= std_logic_vector(unsigned(select_ln321_reg_443) + unsigned(zext_ln321_15_fu_403_p1));
    add_ln321_3_fu_418_p2 <= std_logic_vector(unsigned(add_ln321_reg_448) + unsigned(zext_ln321_fu_399_p1));
    add_ln321_fu_247_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_237_p4) + unsigned(p_shl_cast_fu_227_p4));
    add_ln36_fu_393_p2 <= std_logic_vector(unsigned(zext_ln29_fu_367_p1) + unsigned(shl_ln_fu_386_p3));
    and_ln29_1_fu_315_p2 <= (xor_ln29_fu_293_p2 and icmp_ln31_fu_309_p2);
    and_ln29_fu_303_p2 <= (xor_ln29_fu_293_p2 and trunc_ln321_fu_299_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter0, icmp_ln29_reg_453)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln29_reg_453 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter0, icmp_ln29_reg_453)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln29_reg_453 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(in_V_V_empty_n, icmp_ln29_reg_453)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln29_reg_453 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln29_fu_253_p2)
    begin
        if ((icmp_ln29_fu_253_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten13_phi_fu_168_p4_assign_proc : process(icmp_ln29_reg_453, indvar_flatten13_reg_164, ap_CS_fsm_pp0_stage0, add_ln29_reg_457, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten13_phi_fu_168_p4 <= add_ln29_reg_457;
        else 
            ap_phi_mux_indvar_flatten13_phi_fu_168_p4 <= indvar_flatten13_reg_164;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_190_p4_assign_proc : process(icmp_ln29_reg_453, indvar_flatten_reg_186, ap_CS_fsm_pp0_stage0, select_ln30_1_reg_509, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_190_p4 <= select_ln30_1_reg_509;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_190_p4 <= indvar_flatten_reg_186;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_201_p4_assign_proc : process(icmp_ln29_reg_453, p_0_reg_197, ap_CS_fsm_pp0_stage0, select_ln30_reg_483, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_0_phi_fu_201_p4 <= select_ln30_reg_483;
        else 
            ap_phi_mux_p_0_phi_fu_201_p4 <= p_0_reg_197;
        end if; 
    end process;


    ap_phi_mux_s_0_phi_fu_179_p4_assign_proc : process(icmp_ln29_reg_453, s_0_reg_175, ap_CS_fsm_pp0_stage0, select_ln29_1_reg_467, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_s_0_phi_fu_179_p4 <= select_ln29_1_reg_467;
        else 
            ap_phi_mux_s_0_phi_fu_179_p4 <= s_0_reg_175;
        end if; 
    end process;


    ap_phi_mux_w_0_phi_fu_212_p4_assign_proc : process(icmp_ln29_reg_453, w_0_reg_208, ap_CS_fsm_pp0_stage0, w_reg_504, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_w_0_phi_fu_212_p4 <= w_reg_504;
        else 
            ap_phi_mux_w_0_phi_fu_212_p4 <= w_0_reg_208;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln29_fu_253_p2 <= "1" when (ap_phi_mux_indvar_flatten13_phi_fu_168_p4 = ap_const_lv9_140) else "0";
    icmp_ln30_fu_271_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_190_p4 = ap_const_lv6_14) else "0";
    icmp_ln31_fu_309_p2 <= "1" when (ap_phi_mux_w_0_phi_fu_212_p4 = ap_const_lv4_A) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln29_reg_453)
    begin
        if (((icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln29_reg_453, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln321_fu_327_p2 <= (icmp_ln30_fu_271_p2 or and_ln29_1_fu_315_p2);
    p_fu_321_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln29_fu_277_p3));
    p_shl1_cast_fu_237_p4 <= ((ap_const_lv5_1 & rowBufferIdx_V) & ap_const_lv5_0);
    p_shl_cast_fu_227_p4 <= ((ap_const_lv3_1 & rowBufferIdx_V) & ap_const_lv7_0);

    row_buffer_0_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln321_16_fu_412_p1, zext_ln321_17_fu_434_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            row_buffer_0_V_address1 <= zext_ln321_17_fu_434_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            row_buffer_0_V_address1 <= zext_ln321_16_fu_412_p1(10 - 1 downto 0);
        else 
            row_buffer_0_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    row_buffer_0_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            row_buffer_0_V_ce1 <= ap_const_logic_1;
        else 
            row_buffer_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    row_buffer_0_V_d1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, Part1_V_reg_493, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, Part2_V_fu_380_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            row_buffer_0_V_d1 <= Part1_V_reg_493;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            row_buffer_0_V_d1 <= Part2_V_fu_380_p1;
        else 
            row_buffer_0_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    row_buffer_0_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln29_reg_453, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln321_2_reg_479, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln321_2_reg_479 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((select_ln321_2_reg_479 = ap_const_lv1_0) and (icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            row_buffer_0_V_we1 <= ap_const_logic_1;
        else 
            row_buffer_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    row_buffer_1_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln321_16_fu_412_p1, zext_ln321_17_fu_434_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            row_buffer_1_V_address1 <= zext_ln321_17_fu_434_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            row_buffer_1_V_address1 <= zext_ln321_16_fu_412_p1(10 - 1 downto 0);
        else 
            row_buffer_1_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    row_buffer_1_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            row_buffer_1_V_ce1 <= ap_const_logic_1;
        else 
            row_buffer_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    row_buffer_1_V_d1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, Part1_V_reg_493, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, Part2_V_fu_380_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            row_buffer_1_V_d1 <= Part1_V_reg_493;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            row_buffer_1_V_d1 <= Part2_V_fu_380_p1;
        else 
            row_buffer_1_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    row_buffer_1_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln29_reg_453, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln321_2_reg_479, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (select_ln321_2_reg_479 = ap_const_lv1_1)) or ((icmp_ln29_reg_453 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln321_2_reg_479 = ap_const_lv1_1)))) then 
            row_buffer_1_V_we1 <= ap_const_logic_1;
        else 
            row_buffer_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    s_fu_265_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_s_0_phi_fu_179_p4));
    select_ln29_1_fu_285_p3 <= 
        s_fu_265_p2 when (icmp_ln30_fu_271_p2(0) = '1') else 
        ap_phi_mux_s_0_phi_fu_179_p4;
    select_ln29_fu_277_p3 <= 
        ap_const_lv2_0 when (icmp_ln30_fu_271_p2(0) = '1') else 
        ap_phi_mux_p_0_phi_fu_201_p4;
    select_ln30_1_fu_428_p3 <= 
        ap_const_lv6_1 when (icmp_ln30_reg_462(0) = '1') else 
        add_ln30_1_reg_488;
    select_ln30_fu_353_p3 <= 
        p_fu_321_p2 when (and_ln29_1_fu_315_p2(0) = '1') else 
        select_ln29_fu_277_p3;
    select_ln321_1_fu_333_p3 <= 
        ap_const_lv4_0 when (or_ln321_fu_327_p2(0) = '1') else 
        ap_phi_mux_w_0_phi_fu_212_p4;
    select_ln321_2_fu_345_p3 <= 
        trunc_ln321_1_fu_341_p1 when (and_ln29_1_fu_315_p2(0) = '1') else 
        and_ln29_fu_303_p2;
    select_ln321_fu_219_p3 <= 
        ap_const_lv9_A0 when (rowBufferIdx_V(0) = '1') else 
        ap_const_lv9_0;
    shl_ln_fu_386_p3 <= (select_ln321_1_reg_473 & ap_const_lv4_0);
    skip_flag_read_read_fu_102_p2 <= (0=>skip_flag, others=>'-');
    trunc_ln321_1_fu_341_p1 <= p_fu_321_p2(1 - 1 downto 0);
    trunc_ln321_fu_299_p1 <= ap_phi_mux_p_0_phi_fu_201_p4(1 - 1 downto 0);
    w_fu_423_p2 <= std_logic_vector(unsigned(select_ln321_1_reg_473) + unsigned(ap_const_lv4_1));
    xor_ln29_fu_293_p2 <= (icmp_ln30_fu_271_p2 xor ap_const_lv1_1);
    zext_ln29_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_1_reg_467),8));
    zext_ln321_15_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_393_p2),9));
    zext_ln321_16_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_2_fu_407_p2),64));
    zext_ln321_17_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_3_reg_499),64));
    zext_ln321_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_393_p2),11));
end behav;
