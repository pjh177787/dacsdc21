-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resize is
port (
    in_V_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of resize is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal stream_to_mat_U0_ap_start : STD_LOGIC;
    signal stream_to_mat_U0_ap_done : STD_LOGIC;
    signal stream_to_mat_U0_ap_continue : STD_LOGIC;
    signal stream_to_mat_U0_ap_idle : STD_LOGIC;
    signal stream_to_mat_U0_ap_ready : STD_LOGIC;
    signal stream_to_mat_U0_start_out : STD_LOGIC;
    signal stream_to_mat_U0_start_write : STD_LOGIC;
    signal stream_to_mat_U0_in_V_V_read : STD_LOGIC;
    signal stream_to_mat_U0_raw_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_to_mat_U0_raw_img_data_stream_0_V_write : STD_LOGIC;
    signal stream_to_mat_U0_raw_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_to_mat_U0_raw_img_data_stream_1_V_write : STD_LOGIC;
    signal stream_to_mat_U0_raw_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_to_mat_U0_raw_img_data_stream_2_V_write : STD_LOGIC;
    signal Resize_opr_linear_U0_ap_start : STD_LOGIC;
    signal Resize_opr_linear_U0_ap_done : STD_LOGIC;
    signal Resize_opr_linear_U0_ap_continue : STD_LOGIC;
    signal Resize_opr_linear_U0_ap_idle : STD_LOGIC;
    signal Resize_opr_linear_U0_ap_ready : STD_LOGIC;
    signal Resize_opr_linear_U0_start_out : STD_LOGIC;
    signal Resize_opr_linear_U0_start_write : STD_LOGIC;
    signal Resize_opr_linear_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal Resize_opr_linear_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal Resize_opr_linear_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal Resize_opr_linear_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Resize_opr_linear_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal Resize_opr_linear_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Resize_opr_linear_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal Resize_opr_linear_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Resize_opr_linear_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal mat_to_stream_U0_ap_start : STD_LOGIC;
    signal mat_to_stream_U0_ap_done : STD_LOGIC;
    signal mat_to_stream_U0_ap_continue : STD_LOGIC;
    signal mat_to_stream_U0_ap_idle : STD_LOGIC;
    signal mat_to_stream_U0_ap_ready : STD_LOGIC;
    signal mat_to_stream_U0_resize_img_data_stream_0_V_read : STD_LOGIC;
    signal mat_to_stream_U0_resize_img_data_stream_1_V_read : STD_LOGIC;
    signal mat_to_stream_U0_resize_img_data_stream_2_V_read : STD_LOGIC;
    signal mat_to_stream_U0_out_V_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal mat_to_stream_U0_out_V_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal raw_img_data_stream_s_full_n : STD_LOGIC;
    signal raw_img_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal raw_img_data_stream_s_empty_n : STD_LOGIC;
    signal raw_img_data_stream_1_full_n : STD_LOGIC;
    signal raw_img_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal raw_img_data_stream_1_empty_n : STD_LOGIC;
    signal raw_img_data_stream_2_full_n : STD_LOGIC;
    signal raw_img_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal raw_img_data_stream_2_empty_n : STD_LOGIC;
    signal resize_img_data_stre_full_n : STD_LOGIC;
    signal resize_img_data_stre_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal resize_img_data_stre_empty_n : STD_LOGIC;
    signal resize_img_data_stre_1_full_n : STD_LOGIC;
    signal resize_img_data_stre_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal resize_img_data_stre_1_empty_n : STD_LOGIC;
    signal resize_img_data_stre_2_full_n : STD_LOGIC;
    signal resize_img_data_stre_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal resize_img_data_stre_2_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_Resize_opr_linear_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Resize_opr_linear_U0_full_n : STD_LOGIC;
    signal start_for_Resize_opr_linear_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Resize_opr_linear_U0_empty_n : STD_LOGIC;
    signal start_for_mat_to_stream_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mat_to_stream_U0_full_n : STD_LOGIC;
    signal start_for_mat_to_stream_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mat_to_stream_U0_empty_n : STD_LOGIC;
    signal mat_to_stream_U0_start_full_n : STD_LOGIC;
    signal mat_to_stream_U0_start_write : STD_LOGIC;

    component stream_to_mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        raw_img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        raw_img_data_stream_0_V_full_n : IN STD_LOGIC;
        raw_img_data_stream_0_V_write : OUT STD_LOGIC;
        raw_img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        raw_img_data_stream_1_V_full_n : IN STD_LOGIC;
        raw_img_data_stream_1_V_write : OUT STD_LOGIC;
        raw_img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        raw_img_data_stream_2_V_full_n : IN STD_LOGIC;
        raw_img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Resize_opr_linear IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component mat_to_stream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        resize_img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        resize_img_data_stream_0_V_empty_n : IN STD_LOGIC;
        resize_img_data_stream_0_V_read : OUT STD_LOGIC;
        resize_img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        resize_img_data_stream_1_V_empty_n : IN STD_LOGIC;
        resize_img_data_stream_1_V_read : OUT STD_LOGIC;
        resize_img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        resize_img_data_stream_2_V_empty_n : IN STD_LOGIC;
        resize_img_data_stream_2_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w8_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Resize_mb6 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_mat_to_ncg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    stream_to_mat_U0 : component stream_to_mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => stream_to_mat_U0_ap_start,
        start_full_n => start_for_Resize_opr_linear_U0_full_n,
        ap_done => stream_to_mat_U0_ap_done,
        ap_continue => stream_to_mat_U0_ap_continue,
        ap_idle => stream_to_mat_U0_ap_idle,
        ap_ready => stream_to_mat_U0_ap_ready,
        start_out => stream_to_mat_U0_start_out,
        start_write => stream_to_mat_U0_start_write,
        in_V_V_dout => in_V_V_dout,
        in_V_V_empty_n => in_V_V_empty_n,
        in_V_V_read => stream_to_mat_U0_in_V_V_read,
        raw_img_data_stream_0_V_din => stream_to_mat_U0_raw_img_data_stream_0_V_din,
        raw_img_data_stream_0_V_full_n => raw_img_data_stream_s_full_n,
        raw_img_data_stream_0_V_write => stream_to_mat_U0_raw_img_data_stream_0_V_write,
        raw_img_data_stream_1_V_din => stream_to_mat_U0_raw_img_data_stream_1_V_din,
        raw_img_data_stream_1_V_full_n => raw_img_data_stream_1_full_n,
        raw_img_data_stream_1_V_write => stream_to_mat_U0_raw_img_data_stream_1_V_write,
        raw_img_data_stream_2_V_din => stream_to_mat_U0_raw_img_data_stream_2_V_din,
        raw_img_data_stream_2_V_full_n => raw_img_data_stream_2_full_n,
        raw_img_data_stream_2_V_write => stream_to_mat_U0_raw_img_data_stream_2_V_write);

    Resize_opr_linear_U0 : component Resize_opr_linear
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Resize_opr_linear_U0_ap_start,
        start_full_n => start_for_mat_to_stream_U0_full_n,
        ap_done => Resize_opr_linear_U0_ap_done,
        ap_continue => Resize_opr_linear_U0_ap_continue,
        ap_idle => Resize_opr_linear_U0_ap_idle,
        ap_ready => Resize_opr_linear_U0_ap_ready,
        start_out => Resize_opr_linear_U0_start_out,
        start_write => Resize_opr_linear_U0_start_write,
        p_src_data_stream_0_V_dout => raw_img_data_stream_s_dout,
        p_src_data_stream_0_V_empty_n => raw_img_data_stream_s_empty_n,
        p_src_data_stream_0_V_read => Resize_opr_linear_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => raw_img_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => raw_img_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => Resize_opr_linear_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => raw_img_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => raw_img_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => Resize_opr_linear_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => Resize_opr_linear_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => resize_img_data_stre_full_n,
        p_dst_data_stream_0_V_write => Resize_opr_linear_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => Resize_opr_linear_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => resize_img_data_stre_1_full_n,
        p_dst_data_stream_1_V_write => Resize_opr_linear_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => Resize_opr_linear_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => resize_img_data_stre_2_full_n,
        p_dst_data_stream_2_V_write => Resize_opr_linear_U0_p_dst_data_stream_2_V_write);

    mat_to_stream_U0 : component mat_to_stream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => mat_to_stream_U0_ap_start,
        ap_done => mat_to_stream_U0_ap_done,
        ap_continue => mat_to_stream_U0_ap_continue,
        ap_idle => mat_to_stream_U0_ap_idle,
        ap_ready => mat_to_stream_U0_ap_ready,
        resize_img_data_stream_0_V_dout => resize_img_data_stre_dout,
        resize_img_data_stream_0_V_empty_n => resize_img_data_stre_empty_n,
        resize_img_data_stream_0_V_read => mat_to_stream_U0_resize_img_data_stream_0_V_read,
        resize_img_data_stream_1_V_dout => resize_img_data_stre_1_dout,
        resize_img_data_stream_1_V_empty_n => resize_img_data_stre_1_empty_n,
        resize_img_data_stream_1_V_read => mat_to_stream_U0_resize_img_data_stream_1_V_read,
        resize_img_data_stream_2_V_dout => resize_img_data_stre_2_dout,
        resize_img_data_stream_2_V_empty_n => resize_img_data_stre_2_empty_n,
        resize_img_data_stream_2_V_read => mat_to_stream_U0_resize_img_data_stream_2_V_read,
        out_V_V_din => mat_to_stream_U0_out_V_V_din,
        out_V_V_full_n => out_V_V_full_n,
        out_V_V_write => mat_to_stream_U0_out_V_V_write);

    raw_img_data_stream_s_U : component fifo_w8_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => stream_to_mat_U0_raw_img_data_stream_0_V_din,
        if_full_n => raw_img_data_stream_s_full_n,
        if_write => stream_to_mat_U0_raw_img_data_stream_0_V_write,
        if_dout => raw_img_data_stream_s_dout,
        if_empty_n => raw_img_data_stream_s_empty_n,
        if_read => Resize_opr_linear_U0_p_src_data_stream_0_V_read);

    raw_img_data_stream_1_U : component fifo_w8_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => stream_to_mat_U0_raw_img_data_stream_1_V_din,
        if_full_n => raw_img_data_stream_1_full_n,
        if_write => stream_to_mat_U0_raw_img_data_stream_1_V_write,
        if_dout => raw_img_data_stream_1_dout,
        if_empty_n => raw_img_data_stream_1_empty_n,
        if_read => Resize_opr_linear_U0_p_src_data_stream_1_V_read);

    raw_img_data_stream_2_U : component fifo_w8_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => stream_to_mat_U0_raw_img_data_stream_2_V_din,
        if_full_n => raw_img_data_stream_2_full_n,
        if_write => stream_to_mat_U0_raw_img_data_stream_2_V_write,
        if_dout => raw_img_data_stream_2_dout,
        if_empty_n => raw_img_data_stream_2_empty_n,
        if_read => Resize_opr_linear_U0_p_src_data_stream_2_V_read);

    resize_img_data_stre_U : component fifo_w8_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize_opr_linear_U0_p_dst_data_stream_0_V_din,
        if_full_n => resize_img_data_stre_full_n,
        if_write => Resize_opr_linear_U0_p_dst_data_stream_0_V_write,
        if_dout => resize_img_data_stre_dout,
        if_empty_n => resize_img_data_stre_empty_n,
        if_read => mat_to_stream_U0_resize_img_data_stream_0_V_read);

    resize_img_data_stre_1_U : component fifo_w8_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize_opr_linear_U0_p_dst_data_stream_1_V_din,
        if_full_n => resize_img_data_stre_1_full_n,
        if_write => Resize_opr_linear_U0_p_dst_data_stream_1_V_write,
        if_dout => resize_img_data_stre_1_dout,
        if_empty_n => resize_img_data_stre_1_empty_n,
        if_read => mat_to_stream_U0_resize_img_data_stream_1_V_read);

    resize_img_data_stre_2_U : component fifo_w8_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize_opr_linear_U0_p_dst_data_stream_2_V_din,
        if_full_n => resize_img_data_stre_2_full_n,
        if_write => Resize_opr_linear_U0_p_dst_data_stream_2_V_write,
        if_dout => resize_img_data_stre_2_dout,
        if_empty_n => resize_img_data_stre_2_empty_n,
        if_read => mat_to_stream_U0_resize_img_data_stream_2_V_read);

    start_for_Resize_mb6_U : component start_for_Resize_mb6
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Resize_opr_linear_U0_din,
        if_full_n => start_for_Resize_opr_linear_U0_full_n,
        if_write => stream_to_mat_U0_start_write,
        if_dout => start_for_Resize_opr_linear_U0_dout,
        if_empty_n => start_for_Resize_opr_linear_U0_empty_n,
        if_read => Resize_opr_linear_U0_ap_ready);

    start_for_mat_to_ncg_U : component start_for_mat_to_ncg
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_mat_to_stream_U0_din,
        if_full_n => start_for_mat_to_stream_U0_full_n,
        if_write => Resize_opr_linear_U0_start_write,
        if_dout => start_for_mat_to_stream_U0_dout,
        if_empty_n => start_for_mat_to_stream_U0_empty_n,
        if_read => mat_to_stream_U0_ap_ready);




    Resize_opr_linear_U0_ap_continue <= ap_const_logic_1;
    Resize_opr_linear_U0_ap_start <= start_for_Resize_opr_linear_U0_empty_n;
    ap_done <= mat_to_stream_U0_ap_done;
    ap_idle <= (stream_to_mat_U0_ap_idle and mat_to_stream_U0_ap_idle and Resize_opr_linear_U0_ap_idle);
    ap_ready <= stream_to_mat_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= mat_to_stream_U0_ap_done;
    ap_sync_ready <= stream_to_mat_U0_ap_ready;
    in_V_V_read <= stream_to_mat_U0_in_V_V_read;
    mat_to_stream_U0_ap_continue <= ap_continue;
    mat_to_stream_U0_ap_start <= start_for_mat_to_stream_U0_empty_n;
    mat_to_stream_U0_start_full_n <= ap_const_logic_1;
    mat_to_stream_U0_start_write <= ap_const_logic_0;
    out_V_V_din <= mat_to_stream_U0_out_V_V_din;
    out_V_V_write <= mat_to_stream_U0_out_V_V_write;
    start_for_Resize_opr_linear_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_mat_to_stream_U0_din <= (0=>ap_const_logic_1, others=>'-');
    stream_to_mat_U0_ap_continue <= ap_const_logic_1;
    stream_to_mat_U0_ap_start <= ap_start;
end behav;
