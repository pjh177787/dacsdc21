-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convcfu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convcfu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11100011111000011111001000000010", 
    1 => "11001101000100010010111011001110", 
    2 => "00001100101100001110111111111110", 
    3 => "00011110110001001111000100111111", 
    4 => "11011111111111010001111000010000", 
    5 => "11111111110011110011111011011111", 
    6 => "00100001101100011110111000011111", 
    7 => "00111100001100001100001100100010", 
    8 => "00010010101100011111111000011101", 
    9 => "10110000001000101101111100001110", 
    10 => "11010001101000111101111011101110", 
    11 => "10101110110011101011000001001110", 
    12 => "11111111111011011111000100011100", 
    13 => "01010010111000011010000111011101", 
    14 => "11010000111011110011001011101111", 
    15 => "00000001110111010000110011110011", 
    16 => "11111110000011010000111000011101", 
    17 => "00100000111011111100000000111101", 
    18 => "11011111110111100011000011100000", 
    19 => "00011111111111010010101011100011", 
    20 => "11110000000010011110111000100001", 
    21 => "00100011110000110000000111110001", 
    22 => "11011111000011000100000011101101", 
    23 => "00101101100111011111111000000100", 
    24 => "11101111101101000111110111011111", 
    25 => "11101110000011100100110100010111", 
    26 => "00010111111111111101110111100010", 
    27 => "11110001111000110000001011101011", 
    28 => "00101111001100111110001100010101", 
    29 => "00001100010000100001001010100000", 
    30 => "00100001001000101111010100000010", 
    31 => "11110001110101000001001100011111", 
    32 => "11100010001100001100111100000001", 
    33 => "00001011001100001101111110011110", 
    34 => "10111110111111000100110011011110", 
    35 => "00001110110010101011001000000001", 
    36 => "11111110011000110001111000100100", 
    37 => "00010001111000011110110100100110", 
    38 => "11101101000001000001111110100010", 
    39 => "11100100000001000100001000011101", 
    40 => "00101100101000101011000111010100", 
    41 => "00011101101000001110110010100111", 
    42 => "11101101000011101110000110100100", 
    43 => "00011110111011100011000011111111", 
    44 => "11111010101100011111111011101110", 
    45 => "01000000001011011101101100010101", 
    46 => "11011100110011110100001011000100", 
    47 => "11010000101111111111001111111011", 
    48 => "11011111111100111111111100001011", 
    49 => "10111111110101001011111111100000", 
    50 => "11100001000100111111000000100000", 
    51 => "00110001111100011001000011100000", 
    52 => "11100100000111000100001100101100", 
    53 => "11010101111111110011001111000011", 
    54 => "00111010110000011101010101110010", 
    55 => "00101111010000010001011000001100", 
    56 => "00001101011100100001001111001111", 
    57 => "00010001111111010111100101101101", 
    58 => "01001001101111010000000010100010", 
    59 => "10010000111100110001111100001011", 
    60 => "01011111000100011101010011011111", 
    61 => "00101101111111010011000100000100", 
    62 => "00101100000111101010000111000011", 
    63 => "11010001111100000100000000111101", 
    64 => "00000011110100010000111100000001", 
    65 => "00111111000111110110000011110010", 
    66 => "00000101110101001110101111110100", 
    67 => "11110001000001000100111100111011", 
    68 => "11110010001100010110111000101111", 
    69 => "11000001000000010000101110111111", 
    70 => "11100111101100010000010000100100", 
    71 => "00011110000011110100111111110101", 
    72 => "01000001111001110010111011101110", 
    73 => "11010011000100000001001111111101", 
    74 => "00111010010000101101010000110100", 
    75 => "00100101110001000001111000010000", 
    76 => "00000001001100110001111000010000", 
    77 => "11110010000011100010111010011001", 
    78 => "00000011000101101100000011100001", 
    79 => "01000011000001100011111011110010", 
    80 => "11101110000001010011000111111100", 
    81 => "11000100101100100010110000100100", 
    82 => "11110001111100101011111100011111", 
    83 => "01000000110100110001110000101101", 
    84 => "11011101001111110010011000111111", 
    85 => "00010011001001000001111011011011", 
    86 => "00101100110111001101111000010000", 
    87 => "11100001000100000010001100110010", 
    88 => "00011111001100010100011000101101", 
    89 => "00100111111111111111000111111111", 
    90 => "11110101000000011101000000010100", 
    91 => "00011101000100011111010100110010", 
    92 => "00010010001000110010000100101110", 
    93 => "00000011000011001001111100100101", 
    94 => "11010001010000101111010011100010", 
    95 => "00001110001100111011001000011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convcfu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convcfu is
    component convDSPOpt_4_convcfu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convcfu_rom_U :  component convDSPOpt_4_convcfu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


