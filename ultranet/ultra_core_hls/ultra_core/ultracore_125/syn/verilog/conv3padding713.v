// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv3padding713 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        reps_dout,
        reps_empty_n,
        reps_read,
        reps_out_din,
        reps_out_full_n,
        reps_out_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        padding_out_V_V_din,
        padding_out_V_V_full_n,
        padding_out_V_V_write,
        reps_c_i_din,
        reps_c_i_full_n,
        reps_c_i_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] reps_dout;
input   reps_empty_n;
output   reps_read;
output  [31:0] reps_out_din;
input   reps_out_full_n;
output   reps_out_write;
input  [63:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [63:0] padding_out_V_V_din;
input   padding_out_V_V_full_n;
output   padding_out_V_V_write;
output  [31:0] reps_c_i_din;
input   reps_c_i_full_n;
output   reps_c_i_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg reps_read;
reg reps_out_write;
reg in_V_V_read;
reg padding_out_V_V_write;
reg reps_c_i_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    reps_blk_n;
reg    reps_out_blk_n;
reg    reps_c_i_blk_n;
wire   [31:0] add_ln130_fu_179_p2;
reg   [31:0] add_ln130_reg_261;
reg    ap_block_state1;
wire   [31:0] or_ln130_fu_185_p2;
reg   [31:0] or_ln130_reg_266;
wire   [1:0] storeBufferIdx_V_fu_196_p2;
reg   [1:0] storeBufferIdx_V_reg_274;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln132_fu_202_p2;
reg   [0:0] icmp_ln132_reg_279;
wire   [0:0] icmp_ln130_fu_191_p2;
wire   [0:0] icmp_ln134_fu_217_p2;
reg   [0:0] icmp_ln134_reg_284;
wire   [31:0] rep_fu_223_p2;
reg   [31:0] rep_reg_289;
wire   [0:0] xor_ln132_fu_229_p2;
reg   [0:0] xor_ln132_reg_294;
wire    ap_CS_fsm_state3;
wire   [1:0] loadBufferIdx_V_fu_235_p2;
reg   [1:0] loadBufferIdx_V_reg_299;
wire   [9:0] rowIdx_V_4_fu_253_p3;
reg   [9:0] rowIdx_V_4_reg_304;
reg    row_buffer_0_V_ce0;
wire   [63:0] row_buffer_0_V_q0;
reg    row_buffer_0_V_ce1;
reg    row_buffer_0_V_we1;
wire    grp_stream_out_data_2_fu_145_ap_start;
wire    grp_stream_out_data_2_fu_145_ap_done;
wire    grp_stream_out_data_2_fu_145_ap_idle;
wire    grp_stream_out_data_2_fu_145_ap_ready;
wire   [63:0] grp_stream_out_data_2_fu_145_out_V_V_din;
wire    grp_stream_out_data_2_fu_145_out_V_V_write;
wire   [9:0] grp_stream_out_data_2_fu_145_row_buffer_V_address0;
wire    grp_stream_out_data_2_fu_145_row_buffer_V_ce0;
wire    grp_stream_out_data_2_fu_145_skip_flag;
wire    grp_stream_in_row_1_fu_157_ap_start;
wire    grp_stream_in_row_1_fu_157_ap_done;
wire    grp_stream_in_row_1_fu_157_ap_idle;
wire    grp_stream_in_row_1_fu_157_ap_ready;
wire    grp_stream_in_row_1_fu_157_in_V_V_read;
wire   [9:0] grp_stream_in_row_1_fu_157_row_buffer_V_address1;
wire    grp_stream_in_row_1_fu_157_row_buffer_V_ce1;
wire    grp_stream_in_row_1_fu_157_row_buffer_V_we1;
wire   [63:0] grp_stream_in_row_1_fu_157_row_buffer_V_d1;
wire    grp_stream_in_row_1_fu_157_skip_flag;
reg   [1:0] t_V_11_reg_98;
wire    ap_CS_fsm_state4;
reg    ap_block_state4_on_subcall_done;
reg   [1:0] t_V_reg_110;
reg   [9:0] t_V_12_reg_122;
reg   [31:0] rep_0_i_i_i_reg_134;
reg    grp_stream_out_data_2_fu_145_ap_start_reg;
reg    grp_stream_in_row_1_fu_157_ap_start_reg;
wire   [31:0] shl_ln130_fu_167_p2;
wire   [31:0] shl_ln130_3_fu_173_p2;
wire   [30:0] tmp_fu_207_p4;
wire   [0:0] icmp_ln879_fu_241_p2;
wire   [9:0] rowIdx_V_fu_247_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_stream_out_data_2_fu_145_ap_start_reg = 1'b0;
#0 grp_stream_in_row_1_fu_157_ap_start_reg = 1'b0;
end

conv3padding713_rczy #(
    .DataWidth( 64 ),
    .AddressRange( 672 ),
    .AddressWidth( 10 ))
row_buffer_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_stream_out_data_2_fu_145_row_buffer_V_address0),
    .ce0(row_buffer_0_V_ce0),
    .q0(row_buffer_0_V_q0),
    .address1(grp_stream_in_row_1_fu_157_row_buffer_V_address1),
    .ce1(row_buffer_0_V_ce1),
    .we1(row_buffer_0_V_we1),
    .d1(grp_stream_in_row_1_fu_157_row_buffer_V_d1)
);

stream_out_data_2 grp_stream_out_data_2_fu_145(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_stream_out_data_2_fu_145_ap_start),
    .ap_done(grp_stream_out_data_2_fu_145_ap_done),
    .ap_idle(grp_stream_out_data_2_fu_145_ap_idle),
    .ap_ready(grp_stream_out_data_2_fu_145_ap_ready),
    .out_V_V_din(grp_stream_out_data_2_fu_145_out_V_V_din),
    .out_V_V_full_n(padding_out_V_V_full_n),
    .out_V_V_write(grp_stream_out_data_2_fu_145_out_V_V_write),
    .row_buffer_V_address0(grp_stream_out_data_2_fu_145_row_buffer_V_address0),
    .row_buffer_V_ce0(grp_stream_out_data_2_fu_145_row_buffer_V_ce0),
    .row_buffer_V_q0(row_buffer_0_V_q0),
    .skip_flag(grp_stream_out_data_2_fu_145_skip_flag),
    .outRowIdx_V(t_V_12_reg_122),
    .startRowBufferIdx_V(t_V_reg_110)
);

stream_in_row_1 grp_stream_in_row_1_fu_157(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_stream_in_row_1_fu_157_ap_start),
    .ap_done(grp_stream_in_row_1_fu_157_ap_done),
    .ap_idle(grp_stream_in_row_1_fu_157_ap_idle),
    .ap_ready(grp_stream_in_row_1_fu_157_ap_ready),
    .in_V_V_dout(in_V_V_dout),
    .in_V_V_empty_n(in_V_V_empty_n),
    .in_V_V_read(grp_stream_in_row_1_fu_157_in_V_V_read),
    .row_buffer_V_address1(grp_stream_in_row_1_fu_157_row_buffer_V_address1),
    .row_buffer_V_ce1(grp_stream_in_row_1_fu_157_row_buffer_V_ce1),
    .row_buffer_V_we1(grp_stream_in_row_1_fu_157_row_buffer_V_we1),
    .row_buffer_V_d1(grp_stream_in_row_1_fu_157_row_buffer_V_d1),
    .skip_flag(grp_stream_in_row_1_fu_157_skip_flag),
    .rowBufferIdx_V(t_V_11_reg_98)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln130_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_stream_in_row_1_fu_157_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_stream_in_row_1_fu_157_ap_start_reg <= 1'b1;
        end else if ((grp_stream_in_row_1_fu_157_ap_ready == 1'b1)) begin
            grp_stream_in_row_1_fu_157_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_stream_out_data_2_fu_145_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_stream_out_data_2_fu_145_ap_start_reg <= 1'b1;
        end else if ((grp_stream_out_data_2_fu_145_ap_ready == 1'b1)) begin
            grp_stream_out_data_2_fu_145_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        rep_0_i_i_i_reg_134 <= rep_reg_289;
    end else if ((~((reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rep_0_i_i_i_reg_134 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        t_V_11_reg_98 <= storeBufferIdx_V_reg_274;
    end else if ((~((reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_11_reg_98 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        t_V_12_reg_122 <= rowIdx_V_4_reg_304;
    end else if ((~((reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_12_reg_122 <= 10'd1022;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        t_V_reg_110 <= loadBufferIdx_V_reg_299;
    end else if ((~((reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_110 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln130_reg_261[31 : 2] <= add_ln130_fu_179_p2[31 : 2];
        or_ln130_reg_266[31 : 2] <= or_ln130_fu_185_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln132_reg_279 <= icmp_ln132_fu_202_p2;
        icmp_ln134_reg_284 <= icmp_ln134_fu_217_p2;
        rep_reg_289 <= rep_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        loadBufferIdx_V_reg_299 <= loadBufferIdx_V_fu_235_p2;
        rowIdx_V_4_reg_304 <= rowIdx_V_4_fu_253_p3;
        xor_ln132_reg_294 <= xor_ln132_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        storeBufferIdx_V_reg_274 <= storeBufferIdx_V_fu_196_p2;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_V_V_read = grp_stream_in_row_1_fu_157_in_V_V_read;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        padding_out_V_V_write = grp_stream_out_data_2_fu_145_out_V_V_write;
    end else begin
        padding_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_blk_n = reps_empty_n;
    end else begin
        reps_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_c_i_blk_n = reps_c_i_full_n;
    end else begin
        reps_c_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_c_i_write = 1'b1;
    end else begin
        reps_c_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_out_blk_n = reps_out_full_n;
    end else begin
        reps_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_out_write = 1'b1;
    end else begin
        reps_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_read = 1'b1;
    end else begin
        reps_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        row_buffer_0_V_ce0 = grp_stream_out_data_2_fu_145_row_buffer_V_ce0;
    end else begin
        row_buffer_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        row_buffer_0_V_ce1 = grp_stream_in_row_1_fu_157_row_buffer_V_ce1;
    end else begin
        row_buffer_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        row_buffer_0_V_we1 = grp_stream_in_row_1_fu_157_row_buffer_V_we1;
    end else begin
        row_buffer_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln130_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln130_fu_179_p2 = (shl_ln130_fu_167_p2 + shl_ln130_3_fu_173_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((reps_c_i_full_n == 1'b0) | (reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_stream_in_row_1_fu_157_ap_done == 1'b0) | (grp_stream_out_data_2_fu_145_ap_done == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_stream_in_row_1_fu_157_ap_start = grp_stream_in_row_1_fu_157_ap_start_reg;

assign grp_stream_in_row_1_fu_157_skip_flag = xor_ln132_reg_294;

assign grp_stream_out_data_2_fu_145_ap_start = grp_stream_out_data_2_fu_145_ap_start_reg;

assign grp_stream_out_data_2_fu_145_skip_flag = icmp_ln134_reg_284;

assign icmp_ln130_fu_191_p2 = ((rep_0_i_i_i_reg_134 == or_ln130_reg_266) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_202_p2 = ((rep_0_i_i_i_reg_134 < add_ln130_reg_261) ? 1'b1 : 1'b0);

assign icmp_ln134_fu_217_p2 = ((tmp_fu_207_p4 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_241_p2 = ((t_V_12_reg_122 == 10'd19) ? 1'b1 : 1'b0);

assign loadBufferIdx_V_fu_235_p2 = (t_V_reg_110 + 2'd1);

assign or_ln130_fu_185_p2 = (32'd2 | add_ln130_fu_179_p2);

assign padding_out_V_V_din = grp_stream_out_data_2_fu_145_out_V_V_din;

assign rep_fu_223_p2 = (rep_0_i_i_i_reg_134 + 32'd1);

assign reps_c_i_din = reps_dout;

assign reps_out_din = reps_dout;

assign rowIdx_V_4_fu_253_p3 = ((icmp_ln879_fu_241_p2[0:0] === 1'b1) ? 10'd0 : rowIdx_V_fu_247_p2);

assign rowIdx_V_fu_247_p2 = (t_V_12_reg_122 + 10'd1);

assign shl_ln130_3_fu_173_p2 = reps_dout << 32'd2;

assign shl_ln130_fu_167_p2 = reps_dout << 32'd4;

assign start_out = real_start;

assign storeBufferIdx_V_fu_196_p2 = (t_V_11_reg_98 + 2'd1);

assign tmp_fu_207_p4 = {{rep_0_i_i_i_reg_134[31:1]}};

assign xor_ln132_fu_229_p2 = (icmp_ln132_reg_279 ^ 1'd1);

always @ (posedge ap_clk) begin
    add_ln130_reg_261[1:0] <= 2'b00;
    or_ln130_reg_266[1:0] <= 2'b10;
end

endmodule //conv3padding713
