// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1x1DSP2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write,
        reps_dout,
        reps_empty_n,
        reps_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state13 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [63:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;
input  [31:0] reps_dout;
input   reps_empty_n;
output   reps_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_read;
reg out_V_V_write;
reg reps_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] conv_8_bias_new_V_0_address0;
reg    conv_8_bias_new_V_0_ce0;
wire   [12:0] conv_8_bias_new_V_0_q0;
wire   [4:0] conv_8_bias_new_V_0_address1;
reg    conv_8_bias_new_V_0_ce1;
wire   [12:0] conv_8_bias_new_V_0_q1;
wire   [4:0] conv_8_bias_new_V_1_address0;
reg    conv_8_bias_new_V_1_ce0;
wire   [9:0] conv_8_bias_new_V_1_q0;
wire   [4:0] conv_8_bias_new_V_1_address1;
reg    conv_8_bias_new_V_1_ce1;
wire   [9:0] conv_8_bias_new_V_1_q1;
wire   [8:0] conv_8_w_new_V_0_address0;
reg    conv_8_w_new_V_0_ce0;
wire   [31:0] conv_8_w_new_V_0_q0;
wire   [8:0] conv_8_w_new_V_1_address0;
reg    conv_8_w_new_V_1_ce0;
wire   [31:0] conv_8_w_new_V_1_q0;
reg    in_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln213_reg_776;
reg   [0:0] icmp_ln213_reg_776_pp0_iter2_reg;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] icmp_ln244_reg_981;
reg    reps_blk_n;
reg   [44:0] indvar_flatten83_reg_219;
reg   [13:0] indvar_flatten37_reg_230;
reg   [9:0] indvar_flatten_reg_241;
reg   [4:0] peIdx_0_i_reg_252;
reg   [4:0] simdIdx_0_i_reg_263;
wire   [31:0] add_ln213_fu_302_p2;
reg   [31:0] add_ln213_reg_761;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire   [44:0] grp_fu_311_p2;
reg   [44:0] bound46_reg_771;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln213_fu_317_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_state10_pp0_stage0_iter6;
wire    ap_block_state11_pp0_stage0_iter7;
reg    ap_block_state12_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln213_reg_776_pp0_iter1_reg;
reg   [0:0] icmp_ln213_reg_776_pp0_iter3_reg;
reg   [0:0] icmp_ln213_reg_776_pp0_iter4_reg;
reg   [0:0] icmp_ln213_reg_776_pp0_iter5_reg;
reg   [0:0] icmp_ln213_reg_776_pp0_iter6_reg;
reg   [0:0] icmp_ln213_reg_776_pp0_iter7_reg;
wire   [44:0] add_ln213_1_fu_322_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln214_fu_328_p2;
reg   [0:0] icmp_ln214_reg_785;
wire   [13:0] select_ln214_fu_340_p3;
wire   [8:0] shl_ln_fu_348_p3;
reg   [8:0] shl_ln_reg_798;
wire   [0:0] or_ln215_fu_391_p2;
reg   [0:0] or_ln215_reg_813;
reg   [0:0] or_ln215_reg_813_pp0_iter2_reg;
wire   [0:0] and_ln215_fu_415_p2;
reg   [0:0] and_ln215_reg_820;
reg   [0:0] and_ln215_reg_820_pp0_iter2_reg;
wire   [4:0] peIdx_fu_421_p2;
reg   [4:0] peIdx_reg_827;
wire   [4:0] select_ln215_4_fu_438_p3;
reg   [4:0] select_ln215_4_reg_833;
reg   [4:0] select_ln215_4_reg_833_pp0_iter2_reg;
reg   [4:0] select_ln215_4_reg_833_pp0_iter3_reg;
reg   [4:0] select_ln215_4_reg_833_pp0_iter4_reg;
reg   [4:0] select_ln215_4_reg_833_pp0_iter5_reg;
reg   [4:0] select_ln215_4_reg_833_pp0_iter6_reg;
wire   [4:0] select_ln215_8_fu_446_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [4:0] simdIdx_fu_454_p2;
wire   [9:0] select_ln215_9_fu_466_p3;
reg   [12:0] conv_8_bias_new_V_0_1_reg_855;
reg    ap_enable_reg_pp0_iter2;
reg   [9:0] conv_8_bias_new_V_1_1_reg_860;
wire   [12:0] select_ln215_6_fu_530_p3;
reg   [12:0] select_ln215_6_reg_885;
reg   [12:0] select_ln215_6_reg_885_pp0_iter4_reg;
reg   [12:0] select_ln215_6_reg_885_pp0_iter5_reg;
reg   [12:0] select_ln215_6_reg_885_pp0_iter6_reg;
reg   [12:0] select_ln215_6_reg_885_pp0_iter7_reg;
wire   [9:0] select_ln215_7_fu_537_p3;
reg   [9:0] select_ln215_7_reg_890;
reg   [9:0] select_ln215_7_reg_890_pp0_iter4_reg;
reg   [9:0] select_ln215_7_reg_890_pp0_iter5_reg;
reg   [9:0] select_ln215_7_reg_890_pp0_iter6_reg;
reg   [9:0] select_ln215_7_reg_890_pp0_iter7_reg;
wire   [0:0] icmp_ln235_fu_664_p2;
reg   [0:0] icmp_ln235_reg_955;
wire  signed [31:0] outPartialArr_0_V_fu_677_p1;
reg  signed [31:0] outPartialArr_0_V_reg_961;
wire  signed [31:0] sext_ln68_fu_681_p1;
reg  signed [31:0] sext_ln68_reg_966;
wire   [31:0] outPartialArr_0_V_2_fu_685_p2;
reg   [31:0] outPartialArr_0_V_2_reg_971;
wire   [31:0] add_ln700_fu_691_p2;
reg   [31:0] add_ln700_reg_976;
wire   [0:0] icmp_ln244_fu_697_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter2_state6;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
wire   [3:0] grp_simd_mac_DSP2_fu_274_invec_0_V_read;
wire   [3:0] grp_simd_mac_DSP2_fu_274_invec_1_V_read;
wire   [3:0] grp_simd_mac_DSP2_fu_274_invec_2_V_read;
wire   [3:0] grp_simd_mac_DSP2_fu_274_invec_3_V_read;
wire   [7:0] grp_simd_mac_DSP2_fu_274_w0vec_0_V_read;
wire   [7:0] grp_simd_mac_DSP2_fu_274_w0vec_1_V_read;
wire   [7:0] grp_simd_mac_DSP2_fu_274_w0vec_2_V_read;
wire   [7:0] grp_simd_mac_DSP2_fu_274_w0vec_3_V_read;
wire   [7:0] grp_simd_mac_DSP2_fu_274_w1vec_0_V_read;
wire   [7:0] grp_simd_mac_DSP2_fu_274_w1vec_1_V_read;
wire   [7:0] grp_simd_mac_DSP2_fu_274_w1vec_2_V_read;
wire   [7:0] grp_simd_mac_DSP2_fu_274_w1vec_3_V_read;
wire   [13:0] grp_simd_mac_DSP2_fu_274_ap_return_0;
wire   [13:0] grp_simd_mac_DSP2_fu_274_ap_return_1;
reg    grp_simd_mac_DSP2_fu_274_ap_ce;
wire    ap_block_state4_pp0_stage0_iter0_ignore_call56;
wire    ap_block_state5_pp0_stage0_iter1_ignore_call56;
wire    ap_block_state6_pp0_stage0_iter2_ignore_call56;
reg    ap_block_state7_pp0_stage0_iter3_ignore_call56;
wire    ap_block_state8_pp0_stage0_iter4_ignore_call56;
wire    ap_block_state9_pp0_stage0_iter5_ignore_call56;
wire    ap_block_state10_pp0_stage0_iter6_ignore_call56;
wire    ap_block_state11_pp0_stage0_iter7_ignore_call56;
reg    ap_block_state12_pp0_stage0_iter8_ignore_call56;
reg    ap_block_pp0_stage0_11001_ignoreCallOp101;
wire   [63:0] zext_ln247_fu_356_p1;
wire   [63:0] zext_ln247_1_fu_498_p1;
wire   [63:0] zext_ln224_fu_512_p1;
reg   [31:0] outPartialArr_1_V_2_fu_116;
wire   [31:0] outPartialArr_1_V_fu_713_p3;
reg   [31:0] ap_sig_allocacmp_outPartialArr_1_V_2_1;
reg   [31:0] outPartialArr_V_0_3_s_fu_120;
wire   [31:0] select_ln235_fu_708_p3;
reg   [31:0] ap_sig_allocacmp_outPartialArr_V_0_3_1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] shl_ln213_fu_290_p2;
wire   [31:0] shl_ln213_1_fu_296_p2;
wire   [13:0] grp_fu_311_p0;
wire   [31:0] grp_fu_311_p1;
wire   [13:0] add_ln214_fu_334_p2;
wire   [0:0] icmp_ln216_fu_367_p2;
wire   [0:0] xor_ln214_fu_362_p2;
wire   [0:0] icmp_ln215_fu_379_p2;
wire   [0:0] and_ln214_1_fu_385_p2;
wire   [0:0] xor_ln215_fu_404_p2;
wire   [0:0] and_ln214_fu_373_p2;
wire   [0:0] or_ln215_1_fu_410_p2;
wire   [4:0] select_ln215_fu_396_p3;
wire   [0:0] or_ln215_2_fu_427_p2;
wire   [0:0] or_ln215_3_fu_433_p2;
wire   [9:0] add_ln215_5_fu_460_p2;
wire   [8:0] shl_ln224_mid1_fu_480_p3;
wire   [8:0] select_ln215_1_fu_474_p3;
wire   [8:0] select_ln215_5_fu_487_p3;
wire   [9:0] zext_ln216_fu_503_p1;
wire   [9:0] zext_ln215_fu_494_p1;
wire   [9:0] add_ln224_fu_506_p2;
wire   [12:0] select_ln215_2_fu_518_p3;
wire   [9:0] select_ln215_3_fu_524_p3;
wire  signed [31:0] sext_ln215_fu_702_p1;
wire  signed [31:0] sext_ln215_80_fu_705_p1;
wire   [31:0] add_ln215_1_fu_734_p2;
wire   [31:0] add_ln215_fu_728_p2;
wire    ap_CS_fsm_state13;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [44:0] grp_fu_311_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

conv1x1DSP2_conv_dRK #(
    .DataWidth( 13 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_8_bias_new_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_8_bias_new_V_0_address0),
    .ce0(conv_8_bias_new_V_0_ce0),
    .q0(conv_8_bias_new_V_0_q0),
    .address1(conv_8_bias_new_V_0_address1),
    .ce1(conv_8_bias_new_V_0_ce1),
    .q1(conv_8_bias_new_V_0_q1)
);

conv1x1DSP2_conv_dSL #(
    .DataWidth( 10 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_8_bias_new_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_8_bias_new_V_1_address0),
    .ce0(conv_8_bias_new_V_1_ce0),
    .q0(conv_8_bias_new_V_1_q0),
    .address1(conv_8_bias_new_V_1_address1),
    .ce1(conv_8_bias_new_V_1_ce1),
    .q1(conv_8_bias_new_V_1_q1)
);

conv1x1DSP2_conv_dTL #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_8_w_new_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_8_w_new_V_0_address0),
    .ce0(conv_8_w_new_V_0_ce0),
    .q0(conv_8_w_new_V_0_q0)
);

conv1x1DSP2_conv_dUL #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_8_w_new_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_8_w_new_V_1_address0),
    .ce0(conv_8_w_new_V_1_ce0),
    .q0(conv_8_w_new_V_1_q0)
);

simd_mac_DSP2 grp_simd_mac_DSP2_fu_274(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .invec_0_V_read(grp_simd_mac_DSP2_fu_274_invec_0_V_read),
    .invec_1_V_read(grp_simd_mac_DSP2_fu_274_invec_1_V_read),
    .invec_2_V_read(grp_simd_mac_DSP2_fu_274_invec_2_V_read),
    .invec_3_V_read(grp_simd_mac_DSP2_fu_274_invec_3_V_read),
    .w0vec_0_V_read(grp_simd_mac_DSP2_fu_274_w0vec_0_V_read),
    .w0vec_1_V_read(grp_simd_mac_DSP2_fu_274_w0vec_1_V_read),
    .w0vec_2_V_read(grp_simd_mac_DSP2_fu_274_w0vec_2_V_read),
    .w0vec_3_V_read(grp_simd_mac_DSP2_fu_274_w0vec_3_V_read),
    .w1vec_0_V_read(grp_simd_mac_DSP2_fu_274_w1vec_0_V_read),
    .w1vec_1_V_read(grp_simd_mac_DSP2_fu_274_w1vec_1_V_read),
    .w1vec_2_V_read(grp_simd_mac_DSP2_fu_274_w1vec_2_V_read),
    .w1vec_3_V_read(grp_simd_mac_DSP2_fu_274_w1vec_3_V_read),
    .ap_return_0(grp_simd_mac_DSP2_fu_274_ap_return_0),
    .ap_return_1(grp_simd_mac_DSP2_fu_274_ap_return_1),
    .ap_ce(grp_simd_mac_DSP2_fu_274_ap_ce)
);

ultra_net_mul_14ndVL #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 45 ))
ultra_net_mul_14ndVL_U735(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_311_p0),
    .din1(grp_fu_311_p1),
    .ce(1'b1),
    .dout(grp_fu_311_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((icmp_ln213_fu_317_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter2_state6)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_fu_317_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten37_reg_230 <= select_ln214_fu_340_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten37_reg_230 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_fu_317_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten83_reg_219 <= add_ln213_1_fu_322_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten83_reg_219 <= 45'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_reg_776 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_241 <= select_ln215_9_fu_466_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_241 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_reg_776 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        peIdx_0_i_reg_252 <= select_ln215_8_fu_446_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        peIdx_0_i_reg_252 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_reg_776 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        simdIdx_0_i_reg_263 <= simdIdx_fu_454_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        simdIdx_0_i_reg_263 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((reps_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln213_reg_761[31 : 1] <= add_ln213_fu_302_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_reg_776_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln700_reg_976 <= add_ln700_fu_691_p2;
        icmp_ln235_reg_955 <= icmp_ln235_fu_664_p2;
        icmp_ln244_reg_981 <= icmp_ln244_fu_697_p2;
        outPartialArr_0_V_2_reg_971 <= outPartialArr_0_V_2_fu_685_p2;
        outPartialArr_0_V_reg_961 <= outPartialArr_0_V_fu_677_p1;
        sext_ln68_reg_966 <= sext_ln68_fu_681_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_reg_776 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln215_reg_820 <= and_ln215_fu_415_p2;
        or_ln215_reg_813 <= or_ln215_fu_391_p2;
        peIdx_reg_827 <= peIdx_fu_421_p2;
        select_ln215_4_reg_833 <= select_ln215_4_fu_438_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln215_reg_820_pp0_iter2_reg <= and_ln215_reg_820;
        icmp_ln213_reg_776_pp0_iter2_reg <= icmp_ln213_reg_776_pp0_iter1_reg;
        icmp_ln213_reg_776_pp0_iter3_reg <= icmp_ln213_reg_776_pp0_iter2_reg;
        icmp_ln213_reg_776_pp0_iter4_reg <= icmp_ln213_reg_776_pp0_iter3_reg;
        icmp_ln213_reg_776_pp0_iter5_reg <= icmp_ln213_reg_776_pp0_iter4_reg;
        icmp_ln213_reg_776_pp0_iter6_reg <= icmp_ln213_reg_776_pp0_iter5_reg;
        icmp_ln213_reg_776_pp0_iter7_reg <= icmp_ln213_reg_776_pp0_iter6_reg;
        or_ln215_reg_813_pp0_iter2_reg <= or_ln215_reg_813;
        select_ln215_4_reg_833_pp0_iter2_reg <= select_ln215_4_reg_833;
        select_ln215_4_reg_833_pp0_iter3_reg <= select_ln215_4_reg_833_pp0_iter2_reg;
        select_ln215_4_reg_833_pp0_iter4_reg <= select_ln215_4_reg_833_pp0_iter3_reg;
        select_ln215_4_reg_833_pp0_iter5_reg <= select_ln215_4_reg_833_pp0_iter4_reg;
        select_ln215_4_reg_833_pp0_iter6_reg <= select_ln215_4_reg_833_pp0_iter5_reg;
        select_ln215_6_reg_885_pp0_iter4_reg <= select_ln215_6_reg_885;
        select_ln215_6_reg_885_pp0_iter5_reg <= select_ln215_6_reg_885_pp0_iter4_reg;
        select_ln215_6_reg_885_pp0_iter6_reg <= select_ln215_6_reg_885_pp0_iter5_reg;
        select_ln215_6_reg_885_pp0_iter7_reg <= select_ln215_6_reg_885_pp0_iter6_reg;
        select_ln215_7_reg_890_pp0_iter4_reg <= select_ln215_7_reg_890;
        select_ln215_7_reg_890_pp0_iter5_reg <= select_ln215_7_reg_890_pp0_iter4_reg;
        select_ln215_7_reg_890_pp0_iter6_reg <= select_ln215_7_reg_890_pp0_iter5_reg;
        select_ln215_7_reg_890_pp0_iter7_reg <= select_ln215_7_reg_890_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound46_reg_771 <= grp_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_8_bias_new_V_0_1_reg_855 <= conv_8_bias_new_V_0_q0;
        conv_8_bias_new_V_1_1_reg_860 <= conv_8_bias_new_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln213_reg_776 <= icmp_ln213_fu_317_p2;
        icmp_ln213_reg_776_pp0_iter1_reg <= icmp_ln213_reg_776;
        shl_ln_reg_798[8 : 4] <= shl_ln_fu_348_p3[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln214_reg_785 <= icmp_ln214_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_reg_776_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outPartialArr_1_V_2_fu_116 <= outPartialArr_1_V_fu_713_p3;
        outPartialArr_V_0_3_s_fu_120 <= select_ln235_fu_708_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_reg_776_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln215_6_reg_885 <= select_ln215_6_fu_530_p3;
        select_ln215_7_reg_890 <= select_ln215_7_fu_537_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_776_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ap_sig_allocacmp_outPartialArr_1_V_2_1 = outPartialArr_1_V_fu_713_p3;
    end else begin
        ap_sig_allocacmp_outPartialArr_1_V_2_1 = outPartialArr_1_V_2_fu_116;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_776_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ap_sig_allocacmp_outPartialArr_V_0_3_1 = select_ln235_fu_708_p3;
    end else begin
        ap_sig_allocacmp_outPartialArr_V_0_3_1 = outPartialArr_V_0_3_s_fu_120;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_8_bias_new_V_0_ce0 = 1'b1;
    end else begin
        conv_8_bias_new_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_8_bias_new_V_0_ce1 = 1'b1;
    end else begin
        conv_8_bias_new_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_8_bias_new_V_1_ce0 = 1'b1;
    end else begin
        conv_8_bias_new_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_8_bias_new_V_1_ce1 = 1'b1;
    end else begin
        conv_8_bias_new_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_8_w_new_V_0_ce0 = 1'b1;
    end else begin
        conv_8_w_new_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_8_w_new_V_1_ce0 = 1'b1;
    end else begin
        conv_8_w_new_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp101) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_simd_mac_DSP2_fu_274_ap_ce = 1'b1;
    end else begin
        grp_simd_mac_DSP2_fu_274_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_776_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_776_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln244_reg_981 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln244_reg_981 == 1'd1) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_blk_n = reps_empty_n;
    end else begin
        reps_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((reps_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_read = 1'b1;
    end else begin
        reps_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((reps_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) & ~((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln213_1_fu_322_p2 = (indvar_flatten83_reg_219 + 45'd1);

assign add_ln213_fu_302_p2 = (shl_ln213_fu_290_p2 + shl_ln213_1_fu_296_p2);

assign add_ln214_fu_334_p2 = (indvar_flatten37_reg_230 + 14'd1);

assign add_ln215_1_fu_734_p2 = ($signed(outPartialArr_1_V_fu_713_p3) + $signed(sext_ln215_80_fu_705_p1));

assign add_ln215_5_fu_460_p2 = (indvar_flatten_reg_241 + 10'd1);

assign add_ln215_fu_728_p2 = ($signed(select_ln235_fu_708_p3) + $signed(sext_ln215_fu_702_p1));

assign add_ln224_fu_506_p2 = (zext_ln216_fu_503_p1 + zext_ln215_fu_494_p1);

assign add_ln700_fu_691_p2 = ($signed(sext_ln68_fu_681_p1) + $signed(ap_sig_allocacmp_outPartialArr_1_V_2_1));

assign and_ln214_1_fu_385_p2 = (xor_ln214_fu_362_p2 & icmp_ln215_fu_379_p2);

assign and_ln214_fu_373_p2 = (xor_ln214_fu_362_p2 & icmp_ln216_fu_367_p2);

assign and_ln215_fu_415_p2 = (or_ln215_1_fu_410_p2 & and_ln214_fu_373_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln244_reg_981 == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((icmp_ln213_reg_776_pp0_iter2_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln244_reg_981 == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((icmp_ln213_reg_776_pp0_iter2_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp101 = (((icmp_ln244_reg_981 == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((icmp_ln213_reg_776_pp0_iter2_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln244_reg_981 == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((icmp_ln213_reg_776_pp0_iter2_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((reps_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter6_ignore_call56 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter7_ignore_call56 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter8 = ((icmp_ln244_reg_981 == 1'd1) & (out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state12_pp0_stage0_iter8_ignore_call56 = ((icmp_ln244_reg_981 == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0_ignore_call56 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1_ignore_call56 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2_ignore_call56 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter3 = ((icmp_ln213_reg_776_pp0_iter2_reg == 1'd0) & (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter3_ignore_call56 = ((icmp_ln213_reg_776_pp0_iter2_reg == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4_ignore_call56 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5_ignore_call56 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign conv_8_bias_new_V_0_address0 = zext_ln247_fu_356_p1;

assign conv_8_bias_new_V_0_address1 = zext_ln247_1_fu_498_p1;

assign conv_8_bias_new_V_1_address0 = zext_ln247_fu_356_p1;

assign conv_8_bias_new_V_1_address1 = zext_ln247_1_fu_498_p1;

assign conv_8_w_new_V_0_address0 = zext_ln224_fu_512_p1;

assign conv_8_w_new_V_1_address0 = zext_ln224_fu_512_p1;

assign grp_fu_311_p0 = 45'd5760;

assign grp_fu_311_p1 = grp_fu_311_p10;

assign grp_fu_311_p10 = add_ln213_reg_761;

assign grp_simd_mac_DSP2_fu_274_invec_0_V_read = in_V_V_dout[3:0];

assign grp_simd_mac_DSP2_fu_274_invec_1_V_read = {{in_V_V_dout[7:4]}};

assign grp_simd_mac_DSP2_fu_274_invec_2_V_read = {{in_V_V_dout[11:8]}};

assign grp_simd_mac_DSP2_fu_274_invec_3_V_read = {{in_V_V_dout[15:12]}};

assign grp_simd_mac_DSP2_fu_274_w0vec_0_V_read = conv_8_w_new_V_0_q0[7:0];

assign grp_simd_mac_DSP2_fu_274_w0vec_1_V_read = {{conv_8_w_new_V_0_q0[15:8]}};

assign grp_simd_mac_DSP2_fu_274_w0vec_2_V_read = {{conv_8_w_new_V_0_q0[23:16]}};

assign grp_simd_mac_DSP2_fu_274_w0vec_3_V_read = {{conv_8_w_new_V_0_q0[31:24]}};

assign grp_simd_mac_DSP2_fu_274_w1vec_0_V_read = conv_8_w_new_V_1_q0[7:0];

assign grp_simd_mac_DSP2_fu_274_w1vec_1_V_read = {{conv_8_w_new_V_1_q0[15:8]}};

assign grp_simd_mac_DSP2_fu_274_w1vec_2_V_read = {{conv_8_w_new_V_1_q0[23:16]}};

assign grp_simd_mac_DSP2_fu_274_w1vec_3_V_read = {{conv_8_w_new_V_1_q0[31:24]}};

assign icmp_ln213_fu_317_p2 = ((indvar_flatten83_reg_219 == bound46_reg_771) ? 1'b1 : 1'b0);

assign icmp_ln214_fu_328_p2 = ((indvar_flatten37_reg_230 == 14'd5760) ? 1'b1 : 1'b0);

assign icmp_ln215_fu_379_p2 = ((indvar_flatten_reg_241 == 10'd288) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_367_p2 = ((simdIdx_0_i_reg_263 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln235_fu_664_p2 = ((select_ln215_4_reg_833_pp0_iter6_reg == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln244_fu_697_p2 = ((select_ln215_4_reg_833_pp0_iter6_reg == 5'd15) ? 1'b1 : 1'b0);

assign or_ln215_1_fu_410_p2 = (xor_ln215_fu_404_p2 | icmp_ln214_reg_785);

assign or_ln215_2_fu_427_p2 = (and_ln215_fu_415_p2 | and_ln214_1_fu_385_p2);

assign or_ln215_3_fu_433_p2 = (or_ln215_2_fu_427_p2 | icmp_ln214_reg_785);

assign or_ln215_fu_391_p2 = (icmp_ln214_reg_785 | and_ln214_1_fu_385_p2);

assign outPartialArr_0_V_2_fu_685_p2 = ($signed(outPartialArr_0_V_fu_677_p1) + $signed(ap_sig_allocacmp_outPartialArr_V_0_3_1));

assign outPartialArr_0_V_fu_677_p1 = $signed(grp_simd_mac_DSP2_fu_274_ap_return_0);

assign outPartialArr_1_V_fu_713_p3 = ((icmp_ln235_reg_955[0:0] === 1'b1) ? sext_ln68_reg_966 : add_ln700_reg_976);

assign out_V_V_din = {{add_ln215_1_fu_734_p2}, {add_ln215_fu_728_p2}};

assign peIdx_fu_421_p2 = (5'd1 + select_ln215_fu_396_p3);

assign select_ln214_fu_340_p3 = ((icmp_ln214_fu_328_p2[0:0] === 1'b1) ? 14'd1 : add_ln214_fu_334_p2);

assign select_ln215_1_fu_474_p3 = ((or_ln215_reg_813[0:0] === 1'b1) ? 9'd0 : shl_ln_reg_798);

assign select_ln215_2_fu_518_p3 = ((or_ln215_reg_813_pp0_iter2_reg[0:0] === 1'b1) ? 13'd221 : conv_8_bias_new_V_0_1_reg_855);

assign select_ln215_3_fu_524_p3 = ((or_ln215_reg_813_pp0_iter2_reg[0:0] === 1'b1) ? 10'd870 : conv_8_bias_new_V_1_1_reg_860);

assign select_ln215_4_fu_438_p3 = ((or_ln215_3_fu_433_p2[0:0] === 1'b1) ? 5'd0 : simdIdx_0_i_reg_263);

assign select_ln215_5_fu_487_p3 = ((and_ln215_reg_820[0:0] === 1'b1) ? shl_ln224_mid1_fu_480_p3 : select_ln215_1_fu_474_p3);

assign select_ln215_6_fu_530_p3 = ((and_ln215_reg_820_pp0_iter2_reg[0:0] === 1'b1) ? conv_8_bias_new_V_0_q1 : select_ln215_2_fu_518_p3);

assign select_ln215_7_fu_537_p3 = ((and_ln215_reg_820_pp0_iter2_reg[0:0] === 1'b1) ? conv_8_bias_new_V_1_q1 : select_ln215_3_fu_524_p3);

assign select_ln215_8_fu_446_p3 = ((and_ln215_fu_415_p2[0:0] === 1'b1) ? peIdx_fu_421_p2 : select_ln215_fu_396_p3);

assign select_ln215_9_fu_466_p3 = ((or_ln215_fu_391_p2[0:0] === 1'b1) ? 10'd1 : add_ln215_5_fu_460_p2);

assign select_ln215_fu_396_p3 = ((or_ln215_fu_391_p2[0:0] === 1'b1) ? 5'd0 : peIdx_0_i_reg_252);

assign select_ln235_fu_708_p3 = ((icmp_ln235_reg_955[0:0] === 1'b1) ? outPartialArr_0_V_reg_961 : outPartialArr_0_V_2_reg_971);

assign sext_ln215_80_fu_705_p1 = $signed(select_ln215_7_reg_890_pp0_iter7_reg);

assign sext_ln215_fu_702_p1 = $signed(select_ln215_6_reg_885_pp0_iter7_reg);

assign sext_ln68_fu_681_p1 = $signed(grp_simd_mac_DSP2_fu_274_ap_return_1);

assign shl_ln213_1_fu_296_p2 = reps_dout << 32'd1;

assign shl_ln213_fu_290_p2 = reps_dout << 32'd3;

assign shl_ln224_mid1_fu_480_p3 = {{peIdx_reg_827}, {4'd0}};

assign shl_ln_fu_348_p3 = {{peIdx_0_i_reg_252}, {4'd0}};

assign simdIdx_fu_454_p2 = (select_ln215_4_fu_438_p3 + 5'd1);

assign xor_ln214_fu_362_p2 = (icmp_ln214_reg_785 ^ 1'd1);

assign xor_ln215_fu_404_p2 = (icmp_ln215_fu_379_p2 ^ 1'd1);

assign zext_ln215_fu_494_p1 = select_ln215_5_fu_487_p3;

assign zext_ln216_fu_503_p1 = select_ln215_4_reg_833;

assign zext_ln224_fu_512_p1 = add_ln224_fu_506_p2;

assign zext_ln247_1_fu_498_p1 = peIdx_reg_827;

assign zext_ln247_fu_356_p1 = peIdx_0_i_reg_252;

always @ (posedge ap_clk) begin
    add_ln213_reg_761[0] <= 1'b0;
    shl_ln_reg_798[3:0] <= 4'b0000;
end

endmodule //conv1x1DSP2
