// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _stream_in_row_2_HH_
#define _stream_in_row_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct stream_in_row_2 : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<10> > row_buffer_V_address1;
    sc_out< sc_logic > row_buffer_V_ce1;
    sc_out< sc_logic > row_buffer_V_we1;
    sc_out< sc_lv<32> > row_buffer_V_d1;
    sc_in< sc_logic > skip_flag;
    sc_in< sc_lv<2> > rowBufferIdx_V;


    // Module declarations
    stream_in_row_2(sc_module_name name);
    SC_HAS_PROCESS(stream_in_row_2);

    ~stream_in_row_2();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln28_reg_312;
    sc_signal< sc_lv<1> > icmp_ln33_reg_331;
    sc_signal< sc_lv<8> > indvar_flatten_reg_115;
    sc_signal< sc_lv<5> > peIdx_0_reg_126;
    sc_signal< sc_lv<16> > v2_V_reg_138;
    sc_signal< sc_lv<4> > w_0_reg_150;
    sc_signal< sc_lv<1> > skip_flag_read_read_fu_86_p2;
    sc_signal< sc_lv<10> > mul_ln321_fu_189_p2;
    sc_signal< sc_lv<10> > mul_ln321_reg_307;
    sc_signal< sc_lv<1> > icmp_ln28_fu_195_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_predicate_op29_read_state3;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln28_reg_312_pp0_iter1_reg;
    sc_signal< sc_lv<8> > add_ln28_fu_201_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln29_fu_207_p2;
    sc_signal< sc_lv<1> > icmp_ln29_reg_321;
    sc_signal< sc_lv<4> > select_ln28_fu_213_p3;
    sc_signal< sc_lv<4> > select_ln28_reg_326;
    sc_signal< sc_lv<1> > icmp_ln33_fu_221_p2;
    sc_signal< sc_lv<4> > w_fu_227_p2;
    sc_signal< sc_lv<5> > select_ln28_1_fu_239_p3;
    sc_signal< sc_lv<5> > select_ln28_1_reg_340;
    sc_signal< sc_lv<16> > Part2_V_fu_260_p1;
    sc_signal< sc_lv<10> > add_ln321_fu_285_p2;
    sc_signal< sc_lv<10> > add_ln321_reg_355;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<5> > ap_phi_mux_peIdx_0_phi_fu_130_p4;
    sc_signal< sc_lv<16> > ap_phi_reg_pp0_iter0_reg_V_reg_161;
    sc_signal< sc_lv<16> > ap_phi_reg_pp0_iter1_reg_V_reg_161;
    sc_signal< sc_lv<16> > ap_phi_reg_pp0_iter2_reg_V_reg_161;
    sc_signal< sc_lv<16> > ap_phi_reg_pp0_iter0_v1_V_reg_174;
    sc_signal< sc_lv<16> > ap_phi_reg_pp0_iter1_v1_V_reg_174;
    sc_signal< sc_lv<16> > ap_phi_reg_pp0_iter2_v1_V_reg_174;
    sc_signal< sc_lv<64> > zext_ln321_7_fu_299_p1;
    sc_signal< sc_lv<2> > mul_ln321_fu_189_p0;
    sc_signal< sc_lv<5> > peIdx_fu_233_p2;
    sc_signal< sc_lv<8> > shl_ln_fu_264_p3;
    sc_signal< sc_lv<9> > zext_ln42_fu_271_p1;
    sc_signal< sc_lv<9> > zext_ln28_fu_246_p1;
    sc_signal< sc_lv<9> > add_ln42_fu_275_p2;
    sc_signal< sc_lv<10> > zext_ln321_6_fu_281_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<10> > mul_ln321_fu_189_p00;
    sc_signal< bool > ap_condition_97;
    sc_signal< bool > ap_condition_112;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<10> ap_const_lv10_B0;
    static const sc_lv<8> ap_const_lv8_B0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<4> ap_const_lv4_B;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Part2_V_fu_260_p1();
    void thread_add_ln28_fu_201_p2();
    void thread_add_ln321_fu_285_p2();
    void thread_add_ln42_fu_275_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_112();
    void thread_ap_condition_97();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_peIdx_0_phi_fu_130_p4();
    void thread_ap_phi_reg_pp0_iter0_reg_V_reg_161();
    void thread_ap_phi_reg_pp0_iter0_v1_V_reg_174();
    void thread_ap_predicate_op29_read_state3();
    void thread_ap_ready();
    void thread_icmp_ln28_fu_195_p2();
    void thread_icmp_ln29_fu_207_p2();
    void thread_icmp_ln33_fu_221_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_mul_ln321_fu_189_p0();
    void thread_mul_ln321_fu_189_p00();
    void thread_mul_ln321_fu_189_p2();
    void thread_peIdx_fu_233_p2();
    void thread_row_buffer_V_address1();
    void thread_row_buffer_V_ce1();
    void thread_row_buffer_V_d1();
    void thread_row_buffer_V_we1();
    void thread_select_ln28_1_fu_239_p3();
    void thread_select_ln28_fu_213_p3();
    void thread_shl_ln_fu_264_p3();
    void thread_skip_flag_read_read_fu_86_p2();
    void thread_w_fu_227_p2();
    void thread_zext_ln28_fu_246_p1();
    void thread_zext_ln321_6_fu_281_p1();
    void thread_zext_ln321_7_fu_299_p1();
    void thread_zext_ln42_fu_271_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
