// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _streamInOneRowTwoPix_HH_
#define _streamInOneRowTwoPix_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct streamInOneRowTwoPix : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<10> > row_buffer_0_V_address1;
    sc_out< sc_logic > row_buffer_0_V_ce1;
    sc_out< sc_logic > row_buffer_0_V_we1;
    sc_out< sc_lv<8> > row_buffer_0_V_d1;
    sc_out< sc_lv<10> > row_buffer_1_V_address1;
    sc_out< sc_logic > row_buffer_1_V_ce1;
    sc_out< sc_logic > row_buffer_1_V_we1;
    sc_out< sc_lv<8> > row_buffer_1_V_d1;
    sc_in< sc_logic > skip_flag;
    sc_in< sc_lv<1> > rowBufferIdx_V;


    // Module declarations
    streamInOneRowTwoPix(sc_module_name name);
    SC_HAS_PROCESS(streamInOneRowTwoPix);

    ~streamInOneRowTwoPix();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<1> > icmp_ln29_reg_453;
    sc_signal< sc_lv<9> > indvar_flatten13_reg_164;
    sc_signal< sc_lv<5> > s_0_reg_175;
    sc_signal< sc_lv<6> > indvar_flatten_reg_186;
    sc_signal< sc_lv<2> > p_0_reg_197;
    sc_signal< sc_lv<4> > w_0_reg_208;
    sc_signal< sc_lv<1> > skip_flag_read_read_fu_102_p2;
    sc_signal< sc_lv<9> > select_ln321_fu_219_p3;
    sc_signal< sc_lv<9> > select_ln321_reg_443;
    sc_signal< sc_lv<11> > add_ln321_fu_247_p2;
    sc_signal< sc_lv<11> > add_ln321_reg_448;
    sc_signal< sc_lv<1> > icmp_ln29_fu_253_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<9> > add_ln29_fu_259_p2;
    sc_signal< sc_lv<9> > add_ln29_reg_457;
    sc_signal< sc_lv<1> > icmp_ln30_fu_271_p2;
    sc_signal< sc_lv<1> > icmp_ln30_reg_462;
    sc_signal< sc_lv<5> > select_ln29_1_fu_285_p3;
    sc_signal< sc_lv<5> > select_ln29_1_reg_467;
    sc_signal< sc_lv<4> > select_ln321_1_fu_333_p3;
    sc_signal< sc_lv<4> > select_ln321_1_reg_473;
    sc_signal< sc_lv<1> > select_ln321_2_fu_345_p3;
    sc_signal< sc_lv<1> > select_ln321_2_reg_479;
    sc_signal< sc_lv<2> > select_ln30_fu_353_p3;
    sc_signal< sc_lv<2> > select_ln30_reg_483;
    sc_signal< sc_lv<6> > add_ln30_1_fu_361_p2;
    sc_signal< sc_lv<6> > add_ln30_1_reg_488;
    sc_signal< sc_lv<8> > Part1_V_reg_493;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<11> > add_ln321_3_fu_418_p2;
    sc_signal< sc_lv<11> > add_ln321_3_reg_499;
    sc_signal< sc_lv<4> > w_fu_423_p2;
    sc_signal< sc_lv<4> > w_reg_504;
    sc_signal< sc_lv<6> > select_ln30_1_fu_428_p3;
    sc_signal< sc_lv<6> > select_ln30_1_reg_509;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<9> > ap_phi_mux_indvar_flatten13_phi_fu_168_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<5> > ap_phi_mux_s_0_phi_fu_179_p4;
    sc_signal< sc_lv<6> > ap_phi_mux_indvar_flatten_phi_fu_190_p4;
    sc_signal< sc_lv<2> > ap_phi_mux_p_0_phi_fu_201_p4;
    sc_signal< sc_lv<4> > ap_phi_mux_w_0_phi_fu_212_p4;
    sc_signal< sc_lv<64> > zext_ln321_16_fu_412_p1;
    sc_signal< sc_lv<64> > zext_ln321_17_fu_434_p1;
    sc_signal< sc_lv<8> > Part2_V_fu_380_p1;
    sc_signal< sc_lv<11> > p_shl1_cast_fu_237_p4;
    sc_signal< sc_lv<11> > p_shl_cast_fu_227_p4;
    sc_signal< sc_lv<5> > s_fu_265_p2;
    sc_signal< sc_lv<1> > trunc_ln321_fu_299_p1;
    sc_signal< sc_lv<1> > xor_ln29_fu_293_p2;
    sc_signal< sc_lv<1> > icmp_ln31_fu_309_p2;
    sc_signal< sc_lv<2> > select_ln29_fu_277_p3;
    sc_signal< sc_lv<1> > and_ln29_1_fu_315_p2;
    sc_signal< sc_lv<1> > or_ln321_fu_327_p2;
    sc_signal< sc_lv<2> > p_fu_321_p2;
    sc_signal< sc_lv<1> > trunc_ln321_1_fu_341_p1;
    sc_signal< sc_lv<1> > and_ln29_fu_303_p2;
    sc_signal< sc_lv<8> > zext_ln29_fu_367_p1;
    sc_signal< sc_lv<8> > shl_ln_fu_386_p3;
    sc_signal< sc_lv<8> > add_ln36_fu_393_p2;
    sc_signal< sc_lv<9> > zext_ln321_15_fu_403_p1;
    sc_signal< sc_lv<9> > add_ln321_2_fu_407_p2;
    sc_signal< sc_lv<11> > zext_ln321_fu_399_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<9> ap_const_lv9_A0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<9> ap_const_lv9_140;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<6> ap_const_lv6_14;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Part2_V_fu_380_p1();
    void thread_add_ln29_fu_259_p2();
    void thread_add_ln30_1_fu_361_p2();
    void thread_add_ln321_2_fu_407_p2();
    void thread_add_ln321_3_fu_418_p2();
    void thread_add_ln321_fu_247_p2();
    void thread_add_ln36_fu_393_p2();
    void thread_and_ln29_1_fu_315_p2();
    void thread_and_ln29_fu_303_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_indvar_flatten13_phi_fu_168_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_190_p4();
    void thread_ap_phi_mux_p_0_phi_fu_201_p4();
    void thread_ap_phi_mux_s_0_phi_fu_179_p4();
    void thread_ap_phi_mux_w_0_phi_fu_212_p4();
    void thread_ap_ready();
    void thread_icmp_ln29_fu_253_p2();
    void thread_icmp_ln30_fu_271_p2();
    void thread_icmp_ln31_fu_309_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_or_ln321_fu_327_p2();
    void thread_p_fu_321_p2();
    void thread_p_shl1_cast_fu_237_p4();
    void thread_p_shl_cast_fu_227_p4();
    void thread_row_buffer_0_V_address1();
    void thread_row_buffer_0_V_ce1();
    void thread_row_buffer_0_V_d1();
    void thread_row_buffer_0_V_we1();
    void thread_row_buffer_1_V_address1();
    void thread_row_buffer_1_V_ce1();
    void thread_row_buffer_1_V_d1();
    void thread_row_buffer_1_V_we1();
    void thread_s_fu_265_p2();
    void thread_select_ln29_1_fu_285_p3();
    void thread_select_ln29_fu_277_p3();
    void thread_select_ln30_1_fu_428_p3();
    void thread_select_ln30_fu_353_p3();
    void thread_select_ln321_1_fu_333_p3();
    void thread_select_ln321_2_fu_345_p3();
    void thread_select_ln321_fu_219_p3();
    void thread_shl_ln_fu_386_p3();
    void thread_skip_flag_read_read_fu_102_p2();
    void thread_trunc_ln321_1_fu_341_p1();
    void thread_trunc_ln321_fu_299_p1();
    void thread_w_fu_423_p2();
    void thread_xor_ln29_fu_293_p2();
    void thread_zext_ln29_fu_367_p1();
    void thread_zext_ln321_15_fu_403_p1();
    void thread_zext_ln321_16_fu_412_p1();
    void thread_zext_ln321_17_fu_434_p1();
    void thread_zext_ln321_fu_399_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
