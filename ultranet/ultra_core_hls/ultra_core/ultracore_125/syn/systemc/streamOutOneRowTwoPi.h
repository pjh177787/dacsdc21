// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _streamOutOneRowTwoPi_HH_
#define _streamOutOneRowTwoPi_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct streamOutOneRowTwoPi : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<16> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_out< sc_lv<10> > row_buffer_0_V_address0;
    sc_out< sc_logic > row_buffer_0_V_ce0;
    sc_in< sc_lv<8> > row_buffer_0_V_q0;
    sc_out< sc_lv<10> > row_buffer_1_V_address0;
    sc_out< sc_logic > row_buffer_1_V_ce0;
    sc_in< sc_lv<8> > row_buffer_1_V_q0;
    sc_in< sc_logic > skip_flag;
    sc_in< sc_lv<1> > rowBufferIdx_V;


    // Module declarations
    streamOutOneRowTwoPi(sc_module_name name);
    SC_HAS_PROCESS(streamOutOneRowTwoPi);

    ~streamOutOneRowTwoPi();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln56_reg_361;
    sc_signal< sc_lv<1> > icmp_ln56_reg_361_pp0_iter1_reg;
    sc_signal< sc_lv<13> > indvar_flatten11_reg_131;
    sc_signal< sc_lv<5> > w_0_reg_142;
    sc_signal< sc_lv<10> > indvar_flatten_reg_153;
    sc_signal< sc_lv<5> > s_0_reg_164;
    sc_signal< sc_lv<1> > skip_flag_read_read_fu_92_p2;
    sc_signal< sc_lv<1> > icmp_ln56_fu_175_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<13> > add_ln56_fu_181_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > select_ln56_fu_199_p3;
    sc_signal< sc_lv<5> > select_ln56_reg_370;
    sc_signal< sc_lv<10> > add_ln321_1_fu_311_p2;
    sc_signal< sc_lv<10> > add_ln321_1_reg_375;
    sc_signal< sc_lv<5> > s_fu_317_p2;
    sc_signal< sc_lv<10> > select_ln57_fu_329_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<5> > ap_phi_mux_w_0_phi_fu_146_p4;
    sc_signal< sc_lv<64> > zext_ln321_14_fu_337_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln57_fu_193_p2;
    sc_signal< sc_lv<5> > w_fu_187_p2;
    sc_signal< sc_lv<4> > tmp_6_fu_207_p4;
    sc_signal< sc_lv<8> > zext_ln66_1_mid2_v_fu_217_p3;
    sc_signal< sc_lv<1> > trunc_ln321_fu_229_p1;
    sc_signal< sc_lv<9> > tmp_8_fu_233_p4;
    sc_signal< sc_lv<7> > tmp_s_fu_246_p4;
    sc_signal< sc_lv<10> > zext_ln321_12_fu_255_p1;
    sc_signal< sc_lv<10> > zext_ln321_fu_242_p1;
    sc_signal< sc_lv<1> > icmp_ln58_fu_271_p2;
    sc_signal< sc_lv<1> > xor_ln56_fu_265_p2;
    sc_signal< sc_lv<1> > and_ln56_fu_277_p2;
    sc_signal< sc_lv<1> > or_ln58_fu_283_p2;
    sc_signal< sc_lv<5> > select_ln58_fu_289_p3;
    sc_signal< sc_lv<9> > zext_ln58_fu_297_p1;
    sc_signal< sc_lv<9> > zext_ln56_fu_225_p1;
    sc_signal< sc_lv<9> > add_ln66_fu_301_p2;
    sc_signal< sc_lv<10> > add_ln321_fu_259_p2;
    sc_signal< sc_lv<10> > zext_ln321_13_fu_307_p1;
    sc_signal< sc_lv<10> > add_ln57_fu_323_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<13> ap_const_lv13_1680;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<10> ap_const_lv10_120;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln321_1_fu_311_p2();
    void thread_add_ln321_fu_259_p2();
    void thread_add_ln56_fu_181_p2();
    void thread_add_ln57_fu_323_p2();
    void thread_add_ln66_fu_301_p2();
    void thread_and_ln56_fu_277_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_w_0_phi_fu_146_p4();
    void thread_ap_ready();
    void thread_icmp_ln56_fu_175_p2();
    void thread_icmp_ln57_fu_193_p2();
    void thread_icmp_ln58_fu_271_p2();
    void thread_or_ln58_fu_283_p2();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_row_buffer_0_V_address0();
    void thread_row_buffer_0_V_ce0();
    void thread_row_buffer_1_V_address0();
    void thread_row_buffer_1_V_ce0();
    void thread_s_fu_317_p2();
    void thread_select_ln56_fu_199_p3();
    void thread_select_ln57_fu_329_p3();
    void thread_select_ln58_fu_289_p3();
    void thread_skip_flag_read_read_fu_92_p2();
    void thread_tmp_6_fu_207_p4();
    void thread_tmp_8_fu_233_p4();
    void thread_tmp_s_fu_246_p4();
    void thread_trunc_ln321_fu_229_p1();
    void thread_w_fu_187_p2();
    void thread_xor_ln56_fu_265_p2();
    void thread_zext_ln321_12_fu_255_p1();
    void thread_zext_ln321_13_fu_307_p1();
    void thread_zext_ln321_14_fu_337_p1();
    void thread_zext_ln321_fu_242_p1();
    void thread_zext_ln56_fu_225_p1();
    void thread_zext_ln58_fu_297_p1();
    void thread_zext_ln66_1_mid2_v_fu_217_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
