// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _bn_qurelu_fixed_1_HH_
#define _bn_qurelu_fixed_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ultra_net_mul_mulbQq.h"

namespace ap_rtl {

struct bn_qurelu_fixed_1 : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<17> > in_V;
    sc_in< sc_lv<12> > inc_V;
    sc_in< sc_lv<21> > bias_V;
    sc_out< sc_lv<4> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    bn_qurelu_fixed_1(sc_module_name name);
    SC_HAS_PROCESS(bn_qurelu_fixed_1);

    ~bn_qurelu_fixed_1();

    sc_trace_file* mVcdFile;

    ultra_net_mul_mulbQq<1,1,12,17,29>* ultra_net_mul_mulbQq_U381;
    sc_signal< sc_lv<21> > bias_V_read_reg_140;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<29> > ret_V_fu_134_p2;
    sc_signal< sc_lv<29> > ret_V_reg_145;
    sc_signal< sc_lv<21> > add_ln1353_fu_60_p2;
    sc_signal< sc_lv<21> > add_ln1353_reg_151;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<21> > add_ln1353_fu_60_p1;
    sc_signal< sc_lv<30> > sext_ln215_81_fu_69_p1;
    sc_signal< sc_lv<30> > sext_ln1352_fu_66_p1;
    sc_signal< sc_lv<30> > ret_V_131_fu_72_p2;
    sc_signal< sc_lv<29> > sext_ln1353_fu_84_p1;
    sc_signal< sc_lv<29> > ret_V_130_fu_87_p2;
    sc_signal< sc_lv<10> > tmp_fu_92_p4;
    sc_signal< sc_lv<1> > icmp_ln895_71_fu_102_p2;
    sc_signal< sc_lv<4> > trunc_ln_fu_108_p4;
    sc_signal< sc_lv<1> > icmp_ln895_fu_78_p2;
    sc_signal< sc_lv<4> > select_ln192_fu_118_p3;
    sc_signal< sc_lv<12> > ret_V_fu_134_p0;
    sc_signal< sc_lv<4> > res_V_fu_126_p3;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<4> > ap_return_int_reg;
    sc_signal< sc_lv<29> > ret_V_fu_134_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<21> ap_const_lv21_4000;
    static const sc_lv<30> ap_const_lv30_0;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_1C;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1353_fu_60_p1();
    void thread_add_ln1353_fu_60_p2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_return();
    void thread_icmp_ln895_71_fu_102_p2();
    void thread_icmp_ln895_fu_78_p2();
    void thread_res_V_fu_126_p3();
    void thread_ret_V_130_fu_87_p2();
    void thread_ret_V_131_fu_72_p2();
    void thread_ret_V_fu_134_p0();
    void thread_ret_V_fu_134_p00();
    void thread_select_ln192_fu_118_p3();
    void thread_sext_ln1352_fu_66_p1();
    void thread_sext_ln1353_fu_84_p1();
    void thread_sext_ln215_81_fu_69_p1();
    void thread_tmp_fu_92_p4();
    void thread_trunc_ln_fu_108_p4();
};

}

using namespace ap_rtl;

#endif
