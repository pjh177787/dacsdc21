// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "conv3padding713.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic conv3padding713::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic conv3padding713::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> conv3padding713::ap_ST_fsm_state1 = "1";
const sc_lv<4> conv3padding713::ap_ST_fsm_state2 = "10";
const sc_lv<4> conv3padding713::ap_ST_fsm_state3 = "100";
const sc_lv<4> conv3padding713::ap_ST_fsm_state4 = "1000";
const sc_lv<32> conv3padding713::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> conv3padding713::ap_const_lv32_1 = "1";
const sc_lv<1> conv3padding713::ap_const_lv1_0 = "0";
const sc_lv<32> conv3padding713::ap_const_lv32_2 = "10";
const sc_lv<2> conv3padding713::ap_const_lv2_0 = "00";
const sc_lv<32> conv3padding713::ap_const_lv32_3 = "11";
const bool conv3padding713::ap_const_boolean_0 = false;
const sc_lv<2> conv3padding713::ap_const_lv2_1 = "1";
const sc_lv<10> conv3padding713::ap_const_lv10_3FE = "1111111110";
const sc_lv<32> conv3padding713::ap_const_lv32_4 = "100";
const sc_lv<32> conv3padding713::ap_const_lv32_1F = "11111";
const sc_lv<31> conv3padding713::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<1> conv3padding713::ap_const_lv1_1 = "1";
const sc_lv<10> conv3padding713::ap_const_lv10_13 = "10011";
const sc_lv<10> conv3padding713::ap_const_lv10_1 = "1";
const sc_lv<10> conv3padding713::ap_const_lv10_0 = "0000000000";
const bool conv3padding713::ap_const_boolean_1 = true;

conv3padding713::conv3padding713(sc_module_name name) : sc_module(name), mVcdFile(0) {
    row_buffer_0_V_U = new conv3padding713_rczy("row_buffer_0_V_U");
    row_buffer_0_V_U->clk(ap_clk);
    row_buffer_0_V_U->reset(ap_rst);
    row_buffer_0_V_U->address0(grp_stream_out_data_2_fu_145_row_buffer_V_address0);
    row_buffer_0_V_U->ce0(row_buffer_0_V_ce0);
    row_buffer_0_V_U->q0(row_buffer_0_V_q0);
    row_buffer_0_V_U->address1(grp_stream_in_row_1_fu_157_row_buffer_V_address1);
    row_buffer_0_V_U->ce1(row_buffer_0_V_ce1);
    row_buffer_0_V_U->we1(row_buffer_0_V_we1);
    row_buffer_0_V_U->d1(grp_stream_in_row_1_fu_157_row_buffer_V_d1);
    grp_stream_out_data_2_fu_145 = new stream_out_data_2("grp_stream_out_data_2_fu_145");
    grp_stream_out_data_2_fu_145->ap_clk(ap_clk);
    grp_stream_out_data_2_fu_145->ap_rst(ap_rst);
    grp_stream_out_data_2_fu_145->ap_start(grp_stream_out_data_2_fu_145_ap_start);
    grp_stream_out_data_2_fu_145->ap_done(grp_stream_out_data_2_fu_145_ap_done);
    grp_stream_out_data_2_fu_145->ap_idle(grp_stream_out_data_2_fu_145_ap_idle);
    grp_stream_out_data_2_fu_145->ap_ready(grp_stream_out_data_2_fu_145_ap_ready);
    grp_stream_out_data_2_fu_145->out_V_V_din(grp_stream_out_data_2_fu_145_out_V_V_din);
    grp_stream_out_data_2_fu_145->out_V_V_full_n(padding_out_V_V_full_n);
    grp_stream_out_data_2_fu_145->out_V_V_write(grp_stream_out_data_2_fu_145_out_V_V_write);
    grp_stream_out_data_2_fu_145->row_buffer_V_address0(grp_stream_out_data_2_fu_145_row_buffer_V_address0);
    grp_stream_out_data_2_fu_145->row_buffer_V_ce0(grp_stream_out_data_2_fu_145_row_buffer_V_ce0);
    grp_stream_out_data_2_fu_145->row_buffer_V_q0(row_buffer_0_V_q0);
    grp_stream_out_data_2_fu_145->skip_flag(grp_stream_out_data_2_fu_145_skip_flag);
    grp_stream_out_data_2_fu_145->outRowIdx_V(t_V_12_reg_122);
    grp_stream_out_data_2_fu_145->startRowBufferIdx_V(t_V_reg_110);
    grp_stream_in_row_1_fu_157 = new stream_in_row_1("grp_stream_in_row_1_fu_157");
    grp_stream_in_row_1_fu_157->ap_clk(ap_clk);
    grp_stream_in_row_1_fu_157->ap_rst(ap_rst);
    grp_stream_in_row_1_fu_157->ap_start(grp_stream_in_row_1_fu_157_ap_start);
    grp_stream_in_row_1_fu_157->ap_done(grp_stream_in_row_1_fu_157_ap_done);
    grp_stream_in_row_1_fu_157->ap_idle(grp_stream_in_row_1_fu_157_ap_idle);
    grp_stream_in_row_1_fu_157->ap_ready(grp_stream_in_row_1_fu_157_ap_ready);
    grp_stream_in_row_1_fu_157->in_V_V_dout(in_V_V_dout);
    grp_stream_in_row_1_fu_157->in_V_V_empty_n(in_V_V_empty_n);
    grp_stream_in_row_1_fu_157->in_V_V_read(grp_stream_in_row_1_fu_157_in_V_V_read);
    grp_stream_in_row_1_fu_157->row_buffer_V_address1(grp_stream_in_row_1_fu_157_row_buffer_V_address1);
    grp_stream_in_row_1_fu_157->row_buffer_V_ce1(grp_stream_in_row_1_fu_157_row_buffer_V_ce1);
    grp_stream_in_row_1_fu_157->row_buffer_V_we1(grp_stream_in_row_1_fu_157_row_buffer_V_we1);
    grp_stream_in_row_1_fu_157->row_buffer_V_d1(grp_stream_in_row_1_fu_157_row_buffer_V_d1);
    grp_stream_in_row_1_fu_157->skip_flag(grp_stream_in_row_1_fu_157_skip_flag);
    grp_stream_in_row_1_fu_157->rowBufferIdx_V(t_V_11_reg_98);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln130_fu_179_p2);
    sensitive << ( shl_ln130_fu_167_p2 );
    sensitive << ( shl_ln130_3_fu_173_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( reps_empty_n );
    sensitive << ( reps_out_full_n );
    sensitive << ( reps_c_i_full_n );

    SC_METHOD(thread_ap_block_state4_on_subcall_done);
    sensitive << ( grp_stream_out_data_2_fu_145_ap_done );
    sensitive << ( grp_stream_in_row_1_fu_157_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln130_fu_191_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_grp_stream_in_row_1_fu_157_ap_start);
    sensitive << ( grp_stream_in_row_1_fu_157_ap_start_reg );

    SC_METHOD(thread_grp_stream_in_row_1_fu_157_skip_flag);
    sensitive << ( xor_ln132_reg_294 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_stream_out_data_2_fu_145_ap_start);
    sensitive << ( grp_stream_out_data_2_fu_145_ap_start_reg );

    SC_METHOD(thread_grp_stream_out_data_2_fu_145_skip_flag);
    sensitive << ( icmp_ln134_reg_284 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_icmp_ln130_fu_191_p2);
    sensitive << ( or_ln130_reg_266 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( rep_0_i_i_i_reg_134 );

    SC_METHOD(thread_icmp_ln132_fu_202_p2);
    sensitive << ( add_ln130_reg_261 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln130_fu_191_p2 );
    sensitive << ( rep_0_i_i_i_reg_134 );

    SC_METHOD(thread_icmp_ln134_fu_217_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln130_fu_191_p2 );
    sensitive << ( tmp_fu_207_p4 );

    SC_METHOD(thread_icmp_ln879_fu_241_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( t_V_12_reg_122 );

    SC_METHOD(thread_in_V_V_read);
    sensitive << ( grp_stream_in_row_1_fu_157_in_V_V_read );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln130_fu_191_p2 );

    SC_METHOD(thread_loadBufferIdx_V_fu_235_p2);
    sensitive << ( t_V_reg_110 );

    SC_METHOD(thread_or_ln130_fu_185_p2);
    sensitive << ( add_ln130_fu_179_p2 );

    SC_METHOD(thread_padding_out_V_V_din);
    sensitive << ( grp_stream_out_data_2_fu_145_out_V_V_din );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_padding_out_V_V_write);
    sensitive << ( grp_stream_out_data_2_fu_145_out_V_V_write );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_rep_fu_223_p2);
    sensitive << ( rep_0_i_i_i_reg_134 );

    SC_METHOD(thread_reps_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reps_empty_n );

    SC_METHOD(thread_reps_c_i_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reps_c_i_full_n );

    SC_METHOD(thread_reps_c_i_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reps_dout );
    sensitive << ( reps_empty_n );
    sensitive << ( reps_out_full_n );
    sensitive << ( reps_c_i_full_n );

    SC_METHOD(thread_reps_c_i_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reps_empty_n );
    sensitive << ( reps_out_full_n );
    sensitive << ( reps_c_i_full_n );

    SC_METHOD(thread_reps_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reps_out_full_n );

    SC_METHOD(thread_reps_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reps_dout );
    sensitive << ( reps_empty_n );
    sensitive << ( reps_out_full_n );
    sensitive << ( reps_c_i_full_n );

    SC_METHOD(thread_reps_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reps_empty_n );
    sensitive << ( reps_out_full_n );
    sensitive << ( reps_c_i_full_n );

    SC_METHOD(thread_reps_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reps_empty_n );
    sensitive << ( reps_out_full_n );
    sensitive << ( reps_c_i_full_n );

    SC_METHOD(thread_rowIdx_V_4_fu_253_p3);
    sensitive << ( icmp_ln879_fu_241_p2 );
    sensitive << ( rowIdx_V_fu_247_p2 );

    SC_METHOD(thread_rowIdx_V_fu_247_p2);
    sensitive << ( t_V_12_reg_122 );

    SC_METHOD(thread_row_buffer_0_V_ce0);
    sensitive << ( grp_stream_out_data_2_fu_145_row_buffer_V_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_row_buffer_0_V_ce1);
    sensitive << ( grp_stream_in_row_1_fu_157_row_buffer_V_ce1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_row_buffer_0_V_we1);
    sensitive << ( grp_stream_in_row_1_fu_157_row_buffer_V_we1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_shl_ln130_3_fu_173_p2);
    sensitive << ( reps_dout );

    SC_METHOD(thread_shl_ln130_fu_167_p2);
    sensitive << ( reps_dout );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_storeBufferIdx_V_fu_196_p2);
    sensitive << ( t_V_11_reg_98 );

    SC_METHOD(thread_tmp_fu_207_p4);
    sensitive << ( rep_0_i_i_i_reg_134 );

    SC_METHOD(thread_xor_ln132_fu_229_p2);
    sensitive << ( icmp_ln132_reg_279 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reps_empty_n );
    sensitive << ( reps_out_full_n );
    sensitive << ( reps_c_i_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln130_fu_191_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state4_on_subcall_done );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    grp_stream_out_data_2_fu_145_ap_start_reg = SC_LOGIC_0;
    grp_stream_in_row_1_fu_157_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "conv3padding713_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, reps_dout, "(port)reps_dout");
    sc_trace(mVcdFile, reps_empty_n, "(port)reps_empty_n");
    sc_trace(mVcdFile, reps_read, "(port)reps_read");
    sc_trace(mVcdFile, reps_out_din, "(port)reps_out_din");
    sc_trace(mVcdFile, reps_out_full_n, "(port)reps_out_full_n");
    sc_trace(mVcdFile, reps_out_write, "(port)reps_out_write");
    sc_trace(mVcdFile, in_V_V_dout, "(port)in_V_V_dout");
    sc_trace(mVcdFile, in_V_V_empty_n, "(port)in_V_V_empty_n");
    sc_trace(mVcdFile, in_V_V_read, "(port)in_V_V_read");
    sc_trace(mVcdFile, padding_out_V_V_din, "(port)padding_out_V_V_din");
    sc_trace(mVcdFile, padding_out_V_V_full_n, "(port)padding_out_V_V_full_n");
    sc_trace(mVcdFile, padding_out_V_V_write, "(port)padding_out_V_V_write");
    sc_trace(mVcdFile, reps_c_i_din, "(port)reps_c_i_din");
    sc_trace(mVcdFile, reps_c_i_full_n, "(port)reps_c_i_full_n");
    sc_trace(mVcdFile, reps_c_i_write, "(port)reps_c_i_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, reps_blk_n, "reps_blk_n");
    sc_trace(mVcdFile, reps_out_blk_n, "reps_out_blk_n");
    sc_trace(mVcdFile, reps_c_i_blk_n, "reps_c_i_blk_n");
    sc_trace(mVcdFile, add_ln130_fu_179_p2, "add_ln130_fu_179_p2");
    sc_trace(mVcdFile, add_ln130_reg_261, "add_ln130_reg_261");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, or_ln130_fu_185_p2, "or_ln130_fu_185_p2");
    sc_trace(mVcdFile, or_ln130_reg_266, "or_ln130_reg_266");
    sc_trace(mVcdFile, storeBufferIdx_V_fu_196_p2, "storeBufferIdx_V_fu_196_p2");
    sc_trace(mVcdFile, storeBufferIdx_V_reg_274, "storeBufferIdx_V_reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln132_fu_202_p2, "icmp_ln132_fu_202_p2");
    sc_trace(mVcdFile, icmp_ln132_reg_279, "icmp_ln132_reg_279");
    sc_trace(mVcdFile, icmp_ln130_fu_191_p2, "icmp_ln130_fu_191_p2");
    sc_trace(mVcdFile, icmp_ln134_fu_217_p2, "icmp_ln134_fu_217_p2");
    sc_trace(mVcdFile, icmp_ln134_reg_284, "icmp_ln134_reg_284");
    sc_trace(mVcdFile, rep_fu_223_p2, "rep_fu_223_p2");
    sc_trace(mVcdFile, rep_reg_289, "rep_reg_289");
    sc_trace(mVcdFile, xor_ln132_fu_229_p2, "xor_ln132_fu_229_p2");
    sc_trace(mVcdFile, xor_ln132_reg_294, "xor_ln132_reg_294");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, loadBufferIdx_V_fu_235_p2, "loadBufferIdx_V_fu_235_p2");
    sc_trace(mVcdFile, loadBufferIdx_V_reg_299, "loadBufferIdx_V_reg_299");
    sc_trace(mVcdFile, rowIdx_V_4_fu_253_p3, "rowIdx_V_4_fu_253_p3");
    sc_trace(mVcdFile, rowIdx_V_4_reg_304, "rowIdx_V_4_reg_304");
    sc_trace(mVcdFile, row_buffer_0_V_ce0, "row_buffer_0_V_ce0");
    sc_trace(mVcdFile, row_buffer_0_V_q0, "row_buffer_0_V_q0");
    sc_trace(mVcdFile, row_buffer_0_V_ce1, "row_buffer_0_V_ce1");
    sc_trace(mVcdFile, row_buffer_0_V_we1, "row_buffer_0_V_we1");
    sc_trace(mVcdFile, grp_stream_out_data_2_fu_145_ap_start, "grp_stream_out_data_2_fu_145_ap_start");
    sc_trace(mVcdFile, grp_stream_out_data_2_fu_145_ap_done, "grp_stream_out_data_2_fu_145_ap_done");
    sc_trace(mVcdFile, grp_stream_out_data_2_fu_145_ap_idle, "grp_stream_out_data_2_fu_145_ap_idle");
    sc_trace(mVcdFile, grp_stream_out_data_2_fu_145_ap_ready, "grp_stream_out_data_2_fu_145_ap_ready");
    sc_trace(mVcdFile, grp_stream_out_data_2_fu_145_out_V_V_din, "grp_stream_out_data_2_fu_145_out_V_V_din");
    sc_trace(mVcdFile, grp_stream_out_data_2_fu_145_out_V_V_write, "grp_stream_out_data_2_fu_145_out_V_V_write");
    sc_trace(mVcdFile, grp_stream_out_data_2_fu_145_row_buffer_V_address0, "grp_stream_out_data_2_fu_145_row_buffer_V_address0");
    sc_trace(mVcdFile, grp_stream_out_data_2_fu_145_row_buffer_V_ce0, "grp_stream_out_data_2_fu_145_row_buffer_V_ce0");
    sc_trace(mVcdFile, grp_stream_out_data_2_fu_145_skip_flag, "grp_stream_out_data_2_fu_145_skip_flag");
    sc_trace(mVcdFile, grp_stream_in_row_1_fu_157_ap_start, "grp_stream_in_row_1_fu_157_ap_start");
    sc_trace(mVcdFile, grp_stream_in_row_1_fu_157_ap_done, "grp_stream_in_row_1_fu_157_ap_done");
    sc_trace(mVcdFile, grp_stream_in_row_1_fu_157_ap_idle, "grp_stream_in_row_1_fu_157_ap_idle");
    sc_trace(mVcdFile, grp_stream_in_row_1_fu_157_ap_ready, "grp_stream_in_row_1_fu_157_ap_ready");
    sc_trace(mVcdFile, grp_stream_in_row_1_fu_157_in_V_V_read, "grp_stream_in_row_1_fu_157_in_V_V_read");
    sc_trace(mVcdFile, grp_stream_in_row_1_fu_157_row_buffer_V_address1, "grp_stream_in_row_1_fu_157_row_buffer_V_address1");
    sc_trace(mVcdFile, grp_stream_in_row_1_fu_157_row_buffer_V_ce1, "grp_stream_in_row_1_fu_157_row_buffer_V_ce1");
    sc_trace(mVcdFile, grp_stream_in_row_1_fu_157_row_buffer_V_we1, "grp_stream_in_row_1_fu_157_row_buffer_V_we1");
    sc_trace(mVcdFile, grp_stream_in_row_1_fu_157_row_buffer_V_d1, "grp_stream_in_row_1_fu_157_row_buffer_V_d1");
    sc_trace(mVcdFile, grp_stream_in_row_1_fu_157_skip_flag, "grp_stream_in_row_1_fu_157_skip_flag");
    sc_trace(mVcdFile, t_V_11_reg_98, "t_V_11_reg_98");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_block_state4_on_subcall_done, "ap_block_state4_on_subcall_done");
    sc_trace(mVcdFile, t_V_reg_110, "t_V_reg_110");
    sc_trace(mVcdFile, t_V_12_reg_122, "t_V_12_reg_122");
    sc_trace(mVcdFile, rep_0_i_i_i_reg_134, "rep_0_i_i_i_reg_134");
    sc_trace(mVcdFile, grp_stream_out_data_2_fu_145_ap_start_reg, "grp_stream_out_data_2_fu_145_ap_start_reg");
    sc_trace(mVcdFile, grp_stream_in_row_1_fu_157_ap_start_reg, "grp_stream_in_row_1_fu_157_ap_start_reg");
    sc_trace(mVcdFile, shl_ln130_fu_167_p2, "shl_ln130_fu_167_p2");
    sc_trace(mVcdFile, shl_ln130_3_fu_173_p2, "shl_ln130_3_fu_173_p2");
    sc_trace(mVcdFile, tmp_fu_207_p4, "tmp_fu_207_p4");
    sc_trace(mVcdFile, icmp_ln879_fu_241_p2, "icmp_ln879_fu_241_p2");
    sc_trace(mVcdFile, rowIdx_V_fu_247_p2, "rowIdx_V_fu_247_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

conv3padding713::~conv3padding713() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete row_buffer_0_V_U;
    delete grp_stream_out_data_2_fu_145;
    delete grp_stream_in_row_1_fu_157;
}

void conv3padding713::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln130_fu_191_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_stream_in_row_1_fu_157_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_stream_in_row_1_fu_157_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_stream_in_row_1_fu_157_ap_ready.read())) {
            grp_stream_in_row_1_fu_157_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_stream_out_data_2_fu_145_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_stream_out_data_2_fu_145_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_stream_out_data_2_fu_145_ap_ready.read())) {
            grp_stream_out_data_2_fu_145_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
        rep_0_i_i_i_reg_134 = rep_reg_289.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, reps_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_c_i_full_n.read())))) {
        rep_0_i_i_i_reg_134 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
        t_V_11_reg_98 = storeBufferIdx_V_reg_274.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, reps_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_c_i_full_n.read())))) {
        t_V_11_reg_98 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
        t_V_12_reg_122 = rowIdx_V_4_reg_304.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, reps_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_c_i_full_n.read())))) {
        t_V_12_reg_122 = ap_const_lv10_3FE;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
        t_V_reg_110 = loadBufferIdx_V_reg_299.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, reps_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_c_i_full_n.read())))) {
        t_V_reg_110 = ap_const_lv2_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, reps_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_c_i_full_n.read())))) {
        add_ln130_reg_261 = add_ln130_fu_179_p2.read();
        or_ln130_reg_266 = or_ln130_fu_185_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln130_fu_191_p2.read(), ap_const_lv1_0))) {
        icmp_ln132_reg_279 = icmp_ln132_fu_202_p2.read();
        icmp_ln134_reg_284 = icmp_ln134_fu_217_p2.read();
        rep_reg_289 = rep_fu_223_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        loadBufferIdx_V_reg_299 = loadBufferIdx_V_fu_235_p2.read();
        rowIdx_V_4_reg_304 = rowIdx_V_4_fu_253_p3.read();
        xor_ln132_reg_294 = xor_ln132_fu_229_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        storeBufferIdx_V_reg_274 = storeBufferIdx_V_fu_196_p2.read();
    }
}

void conv3padding713::thread_add_ln130_fu_179_p2() {
    add_ln130_fu_179_p2 = (!shl_ln130_fu_167_p2.read().is_01() || !shl_ln130_3_fu_173_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(shl_ln130_fu_167_p2.read()) + sc_biguint<32>(shl_ln130_3_fu_173_p2.read()));
}

void conv3padding713::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void conv3padding713::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void conv3padding713::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void conv3padding713::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void conv3padding713::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, reps_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_c_i_full_n.read()));
}

void conv3padding713::thread_ap_block_state4_on_subcall_done() {
    ap_block_state4_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_stream_in_row_1_fu_157_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_stream_out_data_2_fu_145_ap_done.read()));
}

void conv3padding713::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln130_fu_191_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void conv3padding713::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void conv3padding713::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void conv3padding713::thread_grp_stream_in_row_1_fu_157_ap_start() {
    grp_stream_in_row_1_fu_157_ap_start = grp_stream_in_row_1_fu_157_ap_start_reg.read();
}

void conv3padding713::thread_grp_stream_in_row_1_fu_157_skip_flag() {
    grp_stream_in_row_1_fu_157_skip_flag =  (sc_logic) (xor_ln132_reg_294.read()[0]);
}

void conv3padding713::thread_grp_stream_out_data_2_fu_145_ap_start() {
    grp_stream_out_data_2_fu_145_ap_start = grp_stream_out_data_2_fu_145_ap_start_reg.read();
}

void conv3padding713::thread_grp_stream_out_data_2_fu_145_skip_flag() {
    grp_stream_out_data_2_fu_145_skip_flag =  (sc_logic) (icmp_ln134_reg_284.read()[0]);
}

void conv3padding713::thread_icmp_ln130_fu_191_p2() {
    icmp_ln130_fu_191_p2 = (!rep_0_i_i_i_reg_134.read().is_01() || !or_ln130_reg_266.read().is_01())? sc_lv<1>(): sc_lv<1>(rep_0_i_i_i_reg_134.read() == or_ln130_reg_266.read());
}

void conv3padding713::thread_icmp_ln132_fu_202_p2() {
    icmp_ln132_fu_202_p2 = (!rep_0_i_i_i_reg_134.read().is_01() || !add_ln130_reg_261.read().is_01())? sc_lv<1>(): (sc_biguint<32>(rep_0_i_i_i_reg_134.read()) < sc_biguint<32>(add_ln130_reg_261.read()));
}

void conv3padding713::thread_icmp_ln134_fu_217_p2() {
    icmp_ln134_fu_217_p2 = (!tmp_fu_207_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_207_p4.read() == ap_const_lv31_0);
}

void conv3padding713::thread_icmp_ln879_fu_241_p2() {
    icmp_ln879_fu_241_p2 = (!t_V_12_reg_122.read().is_01() || !ap_const_lv10_13.is_01())? sc_lv<1>(): sc_lv<1>(t_V_12_reg_122.read() == ap_const_lv10_13);
}

void conv3padding713::thread_in_V_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_V_V_read = grp_stream_in_row_1_fu_157_in_V_V_read.read();
    } else {
        in_V_V_read = ap_const_logic_0;
    }
}

void conv3padding713::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln130_fu_191_p2.read(), ap_const_lv1_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void conv3padding713::thread_loadBufferIdx_V_fu_235_p2() {
    loadBufferIdx_V_fu_235_p2 = (!t_V_reg_110.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(t_V_reg_110.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void conv3padding713::thread_or_ln130_fu_185_p2() {
    or_ln130_fu_185_p2 = (add_ln130_fu_179_p2.read() | ap_const_lv32_2);
}

void conv3padding713::thread_padding_out_V_V_din() {
    padding_out_V_V_din = grp_stream_out_data_2_fu_145_out_V_V_din.read();
}

void conv3padding713::thread_padding_out_V_V_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        padding_out_V_V_write = grp_stream_out_data_2_fu_145_out_V_V_write.read();
    } else {
        padding_out_V_V_write = ap_const_logic_0;
    }
}

void conv3padding713::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void conv3padding713::thread_rep_fu_223_p2() {
    rep_fu_223_p2 = (!rep_0_i_i_i_reg_134.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(rep_0_i_i_i_reg_134.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void conv3padding713::thread_reps_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        reps_blk_n = reps_empty_n.read();
    } else {
        reps_blk_n = ap_const_logic_1;
    }
}

void conv3padding713::thread_reps_c_i_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        reps_c_i_blk_n = reps_c_i_full_n.read();
    } else {
        reps_c_i_blk_n = ap_const_logic_1;
    }
}

void conv3padding713::thread_reps_c_i_din() {
    reps_c_i_din = reps_dout.read();
}

void conv3padding713::thread_reps_c_i_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, reps_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_c_i_full_n.read())))) {
        reps_c_i_write = ap_const_logic_1;
    } else {
        reps_c_i_write = ap_const_logic_0;
    }
}

void conv3padding713::thread_reps_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        reps_out_blk_n = reps_out_full_n.read();
    } else {
        reps_out_blk_n = ap_const_logic_1;
    }
}

void conv3padding713::thread_reps_out_din() {
    reps_out_din = reps_dout.read();
}

void conv3padding713::thread_reps_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, reps_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_c_i_full_n.read())))) {
        reps_out_write = ap_const_logic_1;
    } else {
        reps_out_write = ap_const_logic_0;
    }
}

void conv3padding713::thread_reps_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, reps_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_c_i_full_n.read())))) {
        reps_read = ap_const_logic_1;
    } else {
        reps_read = ap_const_logic_0;
    }
}

void conv3padding713::thread_rowIdx_V_4_fu_253_p3() {
    rowIdx_V_4_fu_253_p3 = (!icmp_ln879_fu_241_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_ln879_fu_241_p2.read()[0].to_bool())? ap_const_lv10_0: rowIdx_V_fu_247_p2.read());
}

void conv3padding713::thread_rowIdx_V_fu_247_p2() {
    rowIdx_V_fu_247_p2 = (!t_V_12_reg_122.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(t_V_12_reg_122.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void conv3padding713::thread_row_buffer_0_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        row_buffer_0_V_ce0 = grp_stream_out_data_2_fu_145_row_buffer_V_ce0.read();
    } else {
        row_buffer_0_V_ce0 = ap_const_logic_0;
    }
}

void conv3padding713::thread_row_buffer_0_V_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        row_buffer_0_V_ce1 = grp_stream_in_row_1_fu_157_row_buffer_V_ce1.read();
    } else {
        row_buffer_0_V_ce1 = ap_const_logic_0;
    }
}

void conv3padding713::thread_row_buffer_0_V_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        row_buffer_0_V_we1 = grp_stream_in_row_1_fu_157_row_buffer_V_we1.read();
    } else {
        row_buffer_0_V_we1 = ap_const_logic_0;
    }
}

void conv3padding713::thread_shl_ln130_3_fu_173_p2() {
    shl_ln130_3_fu_173_p2 = (!ap_const_lv32_2.is_01())? sc_lv<32>(): reps_dout.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void conv3padding713::thread_shl_ln130_fu_167_p2() {
    shl_ln130_fu_167_p2 = (!ap_const_lv32_4.is_01())? sc_lv<32>(): reps_dout.read() << (unsigned short)ap_const_lv32_4.to_uint();
}

void conv3padding713::thread_start_out() {
    start_out = real_start.read();
}

void conv3padding713::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void conv3padding713::thread_storeBufferIdx_V_fu_196_p2() {
    storeBufferIdx_V_fu_196_p2 = (!t_V_11_reg_98.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(t_V_11_reg_98.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void conv3padding713::thread_tmp_fu_207_p4() {
    tmp_fu_207_p4 = rep_0_i_i_i_reg_134.read().range(31, 1);
}

void conv3padding713::thread_xor_ln132_fu_229_p2() {
    xor_ln132_fu_229_p2 = (icmp_ln132_reg_279.read() ^ ap_const_lv1_1);
}

void conv3padding713::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, reps_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, reps_c_i_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln130_fu_191_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

