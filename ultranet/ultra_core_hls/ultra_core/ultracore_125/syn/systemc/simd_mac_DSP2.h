// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _simd_mac_DSP2_HH_
#define _simd_mac_DSP2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ultra_net_ama_adddQK.h"

namespace ap_rtl {

struct simd_mac_DSP2 : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<4> > invec_0_V_read;
    sc_in< sc_lv<4> > invec_1_V_read;
    sc_in< sc_lv<4> > invec_2_V_read;
    sc_in< sc_lv<4> > invec_3_V_read;
    sc_in< sc_lv<8> > w0vec_0_V_read;
    sc_in< sc_lv<8> > w0vec_1_V_read;
    sc_in< sc_lv<8> > w0vec_2_V_read;
    sc_in< sc_lv<8> > w0vec_3_V_read;
    sc_in< sc_lv<8> > w1vec_0_V_read;
    sc_in< sc_lv<8> > w1vec_1_V_read;
    sc_in< sc_lv<8> > w1vec_2_V_read;
    sc_in< sc_lv<8> > w1vec_3_V_read;
    sc_out< sc_lv<14> > ap_return_0;
    sc_out< sc_lv<14> > ap_return_1;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    simd_mac_DSP2(sc_module_name name);
    SC_HAS_PROCESS(simd_mac_DSP2);

    ~simd_mac_DSP2();

    sc_trace_file* mVcdFile;

    ultra_net_ama_adddQK<1,1,22,8,4,27,27>* ultra_net_ama_adddQK_U721;
    sc_signal< sc_lv<8> > w1vec_3_V_read_1_reg_336;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > w1vec_2_V_read_1_reg_341;
    sc_signal< sc_lv<8> > w1vec_0_V_read_1_reg_346;
    sc_signal< sc_lv<8> > w1vec_0_V_read_1_reg_346_pp0_iter1_reg;
    sc_signal< sc_lv<8> > w0vec_3_V_read_1_reg_351;
    sc_signal< sc_lv<8> > w0vec_2_V_read_1_reg_356;
    sc_signal< sc_lv<8> > w0vec_0_V_read_1_reg_361;
    sc_signal< sc_lv<8> > w0vec_0_V_read_1_reg_361_pp0_iter1_reg;
    sc_signal< sc_lv<4> > invec_3_V_read_1_reg_366;
    sc_signal< sc_lv<4> > invec_3_V_read_1_reg_366_pp0_iter1_reg;
    sc_signal< sc_lv<4> > invec_2_V_read_1_reg_371;
    sc_signal< sc_lv<4> > invec_2_V_read_1_reg_371_pp0_iter1_reg;
    sc_signal< sc_lv<4> > invec_1_V_read_1_reg_376;
    sc_signal< sc_lv<4> > invec_0_V_read_1_reg_381;
    sc_signal< sc_lv<4> > invec_0_V_read_1_reg_381_pp0_iter1_reg;
    sc_signal< sc_lv<23> > add_ln68_1_fu_142_p2;
    sc_signal< sc_lv<23> > add_ln68_1_reg_386;
    sc_signal< sc_lv<27> > mul_ln1352_1_fu_154_p2;
    sc_signal< sc_lv<27> > mul_ln1352_1_reg_391;
    sc_signal< sc_lv<23> > add_ln68_2_fu_174_p2;
    sc_signal< sc_lv<23> > add_ln68_2_reg_396;
    sc_signal< sc_lv<23> > add_ln68_3_fu_194_p2;
    sc_signal< sc_lv<23> > add_ln68_3_reg_401;
    sc_signal< sc_lv<27> > grp_fu_326_p4;
    sc_signal< sc_lv<27> > add_ln700_reg_406;
    sc_signal< sc_lv<14> > trunc_ln700_fu_217_p1;
    sc_signal< sc_lv<14> > trunc_ln700_reg_411;
    sc_signal< sc_lv<27> > mul_ln1352_2_fu_226_p2;
    sc_signal< sc_lv<27> > mul_ln1352_2_reg_416;
    sc_signal< sc_lv<14> > trunc_ln68_fu_232_p1;
    sc_signal< sc_lv<14> > trunc_ln68_reg_421;
    sc_signal< sc_lv<27> > mul_ln1352_3_fu_242_p2;
    sc_signal< sc_lv<27> > mul_ln1352_3_reg_426;
    sc_signal< sc_lv<14> > trunc_ln68_1_fu_248_p1;
    sc_signal< sc_lv<14> > trunc_ln68_1_reg_431;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<22> > shl_ln68_1_fu_126_p3;
    sc_signal< sc_lv<23> > sext_ln68_2_fu_134_p1;
    sc_signal< sc_lv<23> > sext_ln68_3_fu_138_p1;
    sc_signal< sc_lv<23> > mul_ln1352_1_fu_154_p0;
    sc_signal< sc_lv<4> > mul_ln1352_1_fu_154_p1;
    sc_signal< sc_lv<22> > shl_ln68_2_fu_160_p3;
    sc_signal< sc_lv<23> > sext_ln68_4_fu_167_p1;
    sc_signal< sc_lv<23> > sext_ln68_5_fu_171_p1;
    sc_signal< sc_lv<22> > shl_ln68_3_fu_180_p3;
    sc_signal< sc_lv<23> > sext_ln68_7_fu_187_p1;
    sc_signal< sc_lv<23> > sext_ln68_8_fu_191_p1;
    sc_signal< sc_lv<22> > shl_ln_fu_200_p3;
    sc_signal< sc_lv<23> > mul_ln1352_2_fu_226_p0;
    sc_signal< sc_lv<4> > mul_ln1352_2_fu_226_p1;
    sc_signal< sc_lv<23> > mul_ln1352_3_fu_242_p0;
    sc_signal< sc_lv<4> > mul_ln1352_3_fu_242_p1;
    sc_signal< sc_lv<28> > sext_ln700_fu_252_p1;
    sc_signal< sc_lv<28> > sext_ln68_9_fu_258_p1;
    sc_signal< sc_lv<28> > add_ln700_1_fu_261_p2;
    sc_signal< sc_lv<28> > sext_ln68_6_fu_255_p1;
    sc_signal< sc_lv<14> > add_ln647_fu_273_p2;
    sc_signal< sc_lv<28> > add_ln700_2_fu_267_p2;
    sc_signal< sc_lv<14> > add_ln647_1_fu_277_p2;
    sc_signal< sc_lv<1> > tmp_fu_296_p3;
    sc_signal< sc_lv<14> > p_Result_s_fu_286_p4;
    sc_signal< sc_lv<14> > zext_ln78_fu_304_p1;
    sc_signal< sc_lv<14> > trunc_ln647_fu_282_p1;
    sc_signal< sc_lv<14> > add_ln78_fu_308_p2;
    sc_signal< sc_lv<4> > grp_fu_326_p2;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<4> > invec_0_V_read_int_reg;
    sc_signal< sc_lv<4> > invec_1_V_read_int_reg;
    sc_signal< sc_lv<4> > invec_2_V_read_int_reg;
    sc_signal< sc_lv<4> > invec_3_V_read_int_reg;
    sc_signal< sc_lv<8> > w0vec_0_V_read_int_reg;
    sc_signal< sc_lv<8> > w0vec_1_V_read_int_reg;
    sc_signal< sc_lv<8> > w0vec_2_V_read_int_reg;
    sc_signal< sc_lv<8> > w0vec_3_V_read_int_reg;
    sc_signal< sc_lv<8> > w1vec_0_V_read_int_reg;
    sc_signal< sc_lv<8> > w1vec_1_V_read_int_reg;
    sc_signal< sc_lv<8> > w1vec_2_V_read_int_reg;
    sc_signal< sc_lv<8> > w1vec_3_V_read_int_reg;
    sc_signal< sc_lv<14> > ap_return_0_int_reg;
    sc_signal< sc_lv<14> > ap_return_1_int_reg;
    sc_signal< sc_lv<27> > grp_fu_326_p20;
    sc_signal< sc_lv<27> > mul_ln1352_1_fu_154_p10;
    sc_signal< sc_lv<27> > mul_ln1352_2_fu_226_p10;
    sc_signal< sc_lv<27> > mul_ln1352_3_fu_242_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<32> ap_const_lv32_D;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln647_1_fu_277_p2();
    void thread_add_ln647_fu_273_p2();
    void thread_add_ln68_1_fu_142_p2();
    void thread_add_ln68_2_fu_174_p2();
    void thread_add_ln68_3_fu_194_p2();
    void thread_add_ln700_1_fu_261_p2();
    void thread_add_ln700_2_fu_267_p2();
    void thread_add_ln78_fu_308_p2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_grp_fu_326_p2();
    void thread_grp_fu_326_p20();
    void thread_mul_ln1352_1_fu_154_p0();
    void thread_mul_ln1352_1_fu_154_p1();
    void thread_mul_ln1352_1_fu_154_p10();
    void thread_mul_ln1352_1_fu_154_p2();
    void thread_mul_ln1352_2_fu_226_p0();
    void thread_mul_ln1352_2_fu_226_p1();
    void thread_mul_ln1352_2_fu_226_p10();
    void thread_mul_ln1352_2_fu_226_p2();
    void thread_mul_ln1352_3_fu_242_p0();
    void thread_mul_ln1352_3_fu_242_p1();
    void thread_mul_ln1352_3_fu_242_p10();
    void thread_mul_ln1352_3_fu_242_p2();
    void thread_p_Result_s_fu_286_p4();
    void thread_sext_ln68_2_fu_134_p1();
    void thread_sext_ln68_3_fu_138_p1();
    void thread_sext_ln68_4_fu_167_p1();
    void thread_sext_ln68_5_fu_171_p1();
    void thread_sext_ln68_6_fu_255_p1();
    void thread_sext_ln68_7_fu_187_p1();
    void thread_sext_ln68_8_fu_191_p1();
    void thread_sext_ln68_9_fu_258_p1();
    void thread_sext_ln700_fu_252_p1();
    void thread_shl_ln68_1_fu_126_p3();
    void thread_shl_ln68_2_fu_160_p3();
    void thread_shl_ln68_3_fu_180_p3();
    void thread_shl_ln_fu_200_p3();
    void thread_tmp_fu_296_p3();
    void thread_trunc_ln647_fu_282_p1();
    void thread_trunc_ln68_1_fu_248_p1();
    void thread_trunc_ln68_fu_232_p1();
    void thread_trunc_ln700_fu_217_p1();
    void thread_zext_ln78_fu_304_p1();
};

}

using namespace ap_rtl;

#endif
