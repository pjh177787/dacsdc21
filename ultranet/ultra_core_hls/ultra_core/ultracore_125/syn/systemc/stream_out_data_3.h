// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _stream_out_data_3_HH_
#define _stream_out_data_3_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ultra_net_mac_mulcyx.h"

namespace ap_rtl {

struct stream_out_data_3 : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_out< sc_lv<10> > row_buffer_V_address0;
    sc_out< sc_logic > row_buffer_V_ce0;
    sc_in< sc_lv<32> > row_buffer_V_q0;
    sc_in< sc_logic > skip_flag;
    sc_in< sc_lv<10> > outRowIdx_V;
    sc_in< sc_lv<2> > startRowBufferIdx_V;


    // Module declarations
    stream_out_data_3(sc_module_name name);
    SC_HAS_PROCESS(stream_out_data_3);

    ~stream_out_data_3();

    sc_trace_file* mVcdFile;

    ultra_net_mac_mulcyx<1,1,9,2,11,11>* ultra_net_mac_mulcyx_U535;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln65_reg_397;
    sc_signal< sc_lv<1> > icmp_ln65_reg_397_pp0_iter2_reg;
    sc_signal< sc_lv<15> > indvar_flatten_reg_138;
    sc_signal< sc_lv<8> > t_V_2_reg_149;
    sc_signal< sc_lv<8> > t_V_reg_160;
    sc_signal< sc_lv<10> > cycle_0_reg_171;
    sc_signal< sc_lv<1> > skip_flag_read_read_fu_112_p2;
    sc_signal< sc_lv<11> > ret_V_fu_186_p2;
    sc_signal< sc_lv<11> > ret_V_reg_392;
    sc_signal< sc_lv<1> > icmp_ln65_fu_192_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln65_reg_397_pp0_iter1_reg;
    sc_signal< sc_lv<15> > add_ln65_fu_198_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<11> > grp_fu_375_p3;
    sc_signal< sc_lv<11> > add_ln321_reg_406;
    sc_signal< sc_lv<1> > or_ln83_fu_276_p2;
    sc_signal< sc_lv<1> > or_ln83_reg_411;
    sc_signal< sc_lv<1> > or_ln83_reg_411_pp0_iter1_reg;
    sc_signal< sc_lv<8> > select_ln96_fu_308_p3;
    sc_signal< sc_lv<8> > infoldIdx_V_2_fu_322_p3;
    sc_signal< sc_lv<10> > cycle_fu_330_p2;
    sc_signal< sc_lv<16> > v1_V_fu_354_p3;
    sc_signal< sc_lv<16> > v1_V_reg_437;
    sc_signal< sc_lv<16> > v2_V_fu_361_p3;
    sc_signal< sc_lv<16> > v2_V_reg_442;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<64> > sext_ln321_fu_336_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<11> > sext_ln1354_fu_182_p1;
    sc_signal< sc_lv<1> > icmp_ln66_fu_204_p2;
    sc_signal< sc_lv<2> > wr_V_fu_218_p4;
    sc_signal< sc_lv<7> > trunc_ln544_fu_237_p1;
    sc_signal< sc_lv<4> > simdIdx_V_fu_228_p1;
    sc_signal< sc_lv<2> > rowBufferIdx_V_fu_232_p2;
    sc_signal< sc_lv<11> > zext_ln1353_fu_253_p1;
    sc_signal< sc_lv<11> > ret_V_2_fu_257_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_262_p3;
    sc_signal< sc_lv<1> > icmp_ln891_fu_270_p2;
    sc_signal< sc_lv<10> > select_ln66_fu_210_p3;
    sc_signal< sc_lv<1> > icmp_ln879_fu_288_p2;
    sc_signal< sc_lv<8> > w_V_fu_294_p2;
    sc_signal< sc_lv<1> > icmp_ln96_fu_282_p2;
    sc_signal< sc_lv<8> > select_ln98_fu_300_p3;
    sc_signal< sc_lv<8> > infoldIdx_V_fu_316_p2;
    sc_signal< sc_lv<16> > p_Result_s_fu_344_p4;
    sc_signal< sc_lv<16> > trunc_ln647_fu_340_p1;
    sc_signal< sc_lv<9> > grp_fu_375_p0;
    sc_signal< sc_lv<2> > grp_fu_375_p1;
    sc_signal< sc_lv<11> > grp_fu_375_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<11> > grp_fu_375_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<15> ap_const_lv15_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<11> ap_const_lv11_7FF;
    static const sc_lv<15> ap_const_lv15_4200;
    static const sc_lv<15> ap_const_lv15_1;
    static const sc_lv<10> ap_const_lv10_210;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<11> ap_const_lv11_9;
    static const sc_lv<10> ap_const_lv10_20F;
    static const sc_lv<8> ap_const_lv8_2F;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<11> ap_const_lv11_B0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln65_fu_198_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_cycle_fu_330_p2();
    void thread_grp_fu_375_p0();
    void thread_grp_fu_375_p1();
    void thread_grp_fu_375_p10();
    void thread_grp_fu_375_p2();
    void thread_icmp_ln65_fu_192_p2();
    void thread_icmp_ln66_fu_204_p2();
    void thread_icmp_ln879_fu_288_p2();
    void thread_icmp_ln891_fu_270_p2();
    void thread_icmp_ln96_fu_282_p2();
    void thread_infoldIdx_V_2_fu_322_p3();
    void thread_infoldIdx_V_fu_316_p2();
    void thread_or_ln83_fu_276_p2();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_Result_s_fu_344_p4();
    void thread_ret_V_2_fu_257_p2();
    void thread_ret_V_fu_186_p2();
    void thread_rowBufferIdx_V_fu_232_p2();
    void thread_row_buffer_V_address0();
    void thread_row_buffer_V_ce0();
    void thread_select_ln66_fu_210_p3();
    void thread_select_ln96_fu_308_p3();
    void thread_select_ln98_fu_300_p3();
    void thread_sext_ln1354_fu_182_p1();
    void thread_sext_ln321_fu_336_p1();
    void thread_simdIdx_V_fu_228_p1();
    void thread_skip_flag_read_read_fu_112_p2();
    void thread_tmp_7_fu_262_p3();
    void thread_trunc_ln544_fu_237_p1();
    void thread_trunc_ln647_fu_340_p1();
    void thread_v1_V_fu_354_p3();
    void thread_v2_V_fu_361_p3();
    void thread_w_V_fu_294_p2();
    void thread_wr_V_fu_218_p4();
    void thread_zext_ln1353_fu_253_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
