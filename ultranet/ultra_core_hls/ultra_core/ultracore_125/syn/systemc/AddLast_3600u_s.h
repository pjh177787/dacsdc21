// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AddLast_3600u_s_HH_
#define _AddLast_3600u_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ultra_net_mul_32sdXL.h"

namespace ap_rtl {

struct AddLast_3600u_s : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<64> > out_r_TDATA;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_out< sc_lv<8> > out_r_TKEEP;
    sc_in< sc_lv<32> > reps_dout;
    sc_in< sc_logic > reps_empty_n;
    sc_out< sc_logic > reps_read;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    AddLast_3600u_s(sc_module_name name);
    SC_HAS_PROCESS(AddLast_3600u_s);

    ~AddLast_3600u_s();

    sc_trace_file* mVcdFile;

    ultra_net_mul_32sdXL<1,2,32,13,32>* ultra_net_mul_32sdXL_U751;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln21_fu_98_p2;
    sc_signal< sc_logic > out_r_TDATA_blk_n;
    sc_signal< sc_logic > reps_blk_n;
    sc_signal< sc_lv<32> > reps_read_reg_109;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > grp_fu_88_p2;
    sc_signal< sc_lv<32> > mul_ln21_reg_114;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > add_ln21_fu_93_p2;
    sc_signal< sc_lv<32> > add_ln21_reg_119;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > i_fu_103_p2;
    sc_signal< bool > ap_block_state5;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< sc_lv<32> > i_0_i_reg_77;
    sc_signal< sc_lv<13> > grp_fu_88_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< bool > ap_condition_104;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_E10;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln21_fu_93_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state1();
    void thread_ap_block_state5();
    void thread_ap_block_state5_io();
    void thread_ap_condition_104();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_fu_88_p1();
    void thread_i_fu_103_p2();
    void thread_icmp_ln21_fu_98_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_out_r_TDATA();
    void thread_out_r_TDATA_blk_n();
    void thread_out_r_TKEEP();
    void thread_out_r_TLAST();
    void thread_out_r_TVALID();
    void thread_reps_blk_n();
    void thread_reps_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
