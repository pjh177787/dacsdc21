// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool2x2_3_HH_
#define _max_pool2x2_3_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "max2_PE_4u_16u_s.h"
#include "max_pool2x2_3_rowbjl.h"

namespace ap_rtl {

struct max_pool2x2_3 : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<128> > vec_V_V_dout;
    sc_in< sc_logic > vec_V_V_empty_n;
    sc_out< sc_logic > vec_V_V_read;
    sc_out< sc_lv<128> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_in< sc_lv<32> > reps_dout;
    sc_in< sc_logic > reps_empty_n;
    sc_out< sc_logic > reps_read;
    sc_out< sc_lv<32> > reps_out_din;
    sc_in< sc_logic > reps_out_full_n;
    sc_out< sc_logic > reps_out_write;


    // Module declarations
    max_pool2x2_3(sc_module_name name);
    SC_HAS_PROCESS(max_pool2x2_3);

    ~max_pool2x2_3();

    sc_trace_file* mVcdFile;

    max_pool2x2_3_rowbjl* row_store_V_U;
    max2_PE_4u_16u_s* p_01_i_max2_PE_4u_16u_s_fu_166;
    max2_PE_4u_16u_s* op2_V_assign_5_0_i_max2_PE_4u_16u_s_fu_173;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > vec_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln35_reg_352;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > and_ln51_reg_375;
    sc_signal< sc_lv<1> > and_ln51_reg_375_pp0_iter2_reg;
    sc_signal< sc_logic > reps_blk_n;
    sc_signal< sc_logic > reps_out_blk_n;
    sc_signal< sc_lv<40> > indvar_flatten_reg_133;
    sc_signal< sc_lv<32> > h_0_i_reg_144;
    sc_signal< sc_lv<8> > addr_0_i_reg_155;
    sc_signal< sc_lv<32> > reps_read_reg_341;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<40> > bound_fu_221_p2;
    sc_signal< sc_lv<40> > bound_reg_347;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln35_fu_227_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln35_reg_352_pp0_iter1_reg;
    sc_signal< sc_lv<40> > add_ln35_1_fu_232_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<8> > select_ln35_fu_250_p3;
    sc_signal< sc_lv<8> > select_ln35_reg_361;
    sc_signal< sc_lv<32> > select_ln35_1_fu_258_p3;
    sc_signal< sc_lv<32> > select_ln35_1_reg_366;
    sc_signal< sc_lv<1> > trunc_ln35_fu_266_p1;
    sc_signal< sc_lv<1> > trunc_ln35_reg_371;
    sc_signal< sc_lv<1> > trunc_ln35_reg_371_pp0_iter1_reg;
    sc_signal< sc_lv<1> > and_ln51_fu_274_p2;
    sc_signal< sc_lv<1> > and_ln51_reg_375_pp0_iter1_reg;
    sc_signal< sc_lv<8> > add_ln37_fu_280_p2;
    sc_signal< sc_lv<64> > p_Result_i_reg_384;
    sc_signal< sc_lv<64> > trunc_ln96_fu_296_p1;
    sc_signal< sc_lv<64> > trunc_ln96_reg_389;
    sc_signal< sc_lv<8> > row_store_V_addr_reg_394;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<8> > row_store_V_address0;
    sc_signal< sc_logic > row_store_V_ce0;
    sc_signal< sc_lv<64> > row_store_V_q0;
    sc_signal< sc_logic > row_store_V_ce1;
    sc_signal< sc_logic > row_store_V_we1;
    sc_signal< sc_logic > p_01_i_max2_PE_4u_16u_s_fu_166_ap_ready;
    sc_signal< sc_lv<64> > p_01_i_max2_PE_4u_16u_s_fu_166_ap_return;
    sc_signal< sc_logic > op2_V_assign_5_0_i_max2_PE_4u_16u_s_fu_173_ap_ready;
    sc_signal< sc_lv<64> > op2_V_assign_5_0_i_max2_PE_4u_16u_s_fu_173_ap_return;
    sc_signal< sc_lv<32> > ap_phi_mux_h_0_i_phi_fu_148_p4;
    sc_signal< sc_lv<64> > zext_ln49_fu_300_p1;
    sc_signal< sc_lv<64> > p_037_2_0_i_fu_78;
    sc_signal< sc_lv<64> > v2_V_0_i_fu_82;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > shl_ln35_1_fu_186_p2;
    sc_signal< sc_lv<32> > shl_ln35_fu_181_p2;
    sc_signal< sc_lv<32> > add_ln35_fu_191_p2;
    sc_signal< sc_lv<39> > tmp_s_fu_197_p3;
    sc_signal< sc_lv<37> > tmp_57_fu_209_p3;
    sc_signal< sc_lv<40> > p_shl4_fu_217_p1;
    sc_signal< sc_lv<40> > p_shl_fu_205_p1;
    sc_signal< sc_lv<1> > icmp_ln37_fu_244_p2;
    sc_signal< sc_lv<32> > h_fu_238_p2;
    sc_signal< sc_lv<1> > trunc_ln37_fu_270_p1;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<40> ap_const_lv40_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<40> ap_const_lv40_1;
    static const sc_lv<8> ap_const_lv8_A0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln35_1_fu_232_p2();
    void thread_add_ln35_fu_191_p2();
    void thread_add_ln37_fu_280_p2();
    void thread_and_ln51_fu_274_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_block_state6_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_h_0_i_phi_fu_148_p4();
    void thread_ap_ready();
    void thread_bound_fu_221_p2();
    void thread_h_fu_238_p2();
    void thread_icmp_ln35_fu_227_p2();
    void thread_icmp_ln37_fu_244_p2();
    void thread_internal_ap_ready();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_shl4_fu_217_p1();
    void thread_p_shl_fu_205_p1();
    void thread_real_start();
    void thread_reps_blk_n();
    void thread_reps_out_blk_n();
    void thread_reps_out_din();
    void thread_reps_out_write();
    void thread_reps_read();
    void thread_row_store_V_address0();
    void thread_row_store_V_ce0();
    void thread_row_store_V_ce1();
    void thread_row_store_V_we1();
    void thread_select_ln35_1_fu_258_p3();
    void thread_select_ln35_fu_250_p3();
    void thread_shl_ln35_1_fu_186_p2();
    void thread_shl_ln35_fu_181_p2();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_57_fu_209_p3();
    void thread_tmp_s_fu_197_p3();
    void thread_trunc_ln35_fu_266_p1();
    void thread_trunc_ln37_fu_270_p1();
    void thread_trunc_ln96_fu_296_p1();
    void thread_vec_V_V_blk_n();
    void thread_vec_V_V_read();
    void thread_zext_ln49_fu_300_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
