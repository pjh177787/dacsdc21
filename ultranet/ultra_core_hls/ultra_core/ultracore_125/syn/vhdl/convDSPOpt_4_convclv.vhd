-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convclv_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convclv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11010111101011101010000100000111", 
    1 => "00011111000000110001101000100010", 
    2 => "01000010110111001111000101001111", 
    3 => "11001110000011111111111011010100", 
    4 => "00100111101111101001000111000000", 
    5 => "00010001111100110000110111100000", 
    6 => "11101001111010011011001111111010", 
    7 => "10010001000011100001001000010111", 
    8 => "11110101111000001100110011101001", 
    9 => "11100101010000010001111111010001", 
    10 => "11111110101010011101000110011011", 
    11 => "10111110000010110101001100111110", 
    12 => "00100000111100010000001111011110", 
    13 => "11100110110000011110111000000010", 
    14 => "00001001111111100001111100110000", 
    15 => "11110001011011110000010011010001", 
    16 => "01101111001000000001000100001111", 
    17 => "11010111001100001100000010010000", 
    18 => "00111111000101000000001000011100", 
    19 => "00100000010011111110001000011111", 
    20 => "00001011111001000010111100011100", 
    21 => "01010110001111111111110011010000", 
    22 => "01101110111110100000000011001100", 
    23 => "00011110111111110000110101001111", 
    24 => "10011101111111110000101010101011", 
    25 => "11101110000011001101000011111110", 
    26 => "10110010000000010100111010101101", 
    27 => "11111100110111101101101100101110", 
    28 => "11100011110111111111111010011011", 
    29 => "11100001001100010000000110111100", 
    30 => "11110100000100011111111110100000", 
    31 => "00001110111111001101000111111110", 
    32 => "00110101000110100001111110100011", 
    33 => "00011110010011110001111011100010", 
    34 => "11100011010011011101111111001110", 
    35 => "01001111010111001101001011111101", 
    36 => "10110001000000101100101101000001", 
    37 => "00011110000100010100101000011011", 
    38 => "00101100000100110010110100101100", 
    39 => "00000001000001001101111100111011", 
    40 => "10100001001101100001111000111100", 
    41 => "11111111001011110010101000001010", 
    42 => "00100010111000010010110011111100", 
    43 => "11100001111100001100001000011010", 
    44 => "11100010001000110101111011101111", 
    45 => "00001101110011100000111011111100", 
    46 => "11010000010000000010110011110011", 
    47 => "00011101001011101111110011010011", 
    48 => "10011100001100010001111110100001", 
    49 => "11101101000001001111001100010101", 
    50 => "10110010000100110011111000001111", 
    51 => "11111100100111000000111000100010", 
    52 => "00010000000000011101000011010110", 
    53 => "10110000101000101101101100100000", 
    54 => "11110010001110110000110000111110", 
    55 => "00011100000100010000000111100010", 
    56 => "01000010110000011111111000010010", 
    57 => "00011111110100100001111000101100", 
    58 => "00011011000011010010000100011101", 
    59 => "00001101001100101110000011110001", 
    60 => "00000000001111010000111111110010", 
    61 => "00010110001011110010110101001100", 
    62 => "01100001001011101010001011011110", 
    63 => "00010001111100110010000111110010", 
    64 => "00000011110111100000111011111001", 
    65 => "11110101001110111110100100101011", 
    66 => "11010000111110101010111110011011", 
    67 => "00001100000110110001101111001011", 
    68 => "00000000101111011111111110111101", 
    69 => "01000010010011001111111110111101", 
    70 => "00110010111010111110110110101101", 
    71 => "10011101000010101111111011111011", 
    72 => "00101111001000011111000000111110", 
    73 => "11110010000101011101111100000000", 
    74 => "01010011010100000010001000101110", 
    75 => "00100001001101000001001000100101", 
    76 => "00001011110100100100000000000010", 
    77 => "00000100111100011101000000101111", 
    78 => "00010111001001000011111101001110", 
    79 => "00010001000100110010110100101101", 
    80 => "11111100001100110110000111100010", 
    81 => "11000001010000010010001011100011", 
    82 => "00010010001000110001111000001101", 
    83 => "00010001000100010001001011110000", 
    84 => "10010010111100000000111111001011", 
    85 => "00110000000011110100011100000010", 
    86 => "00011110001011010000001011011110", 
    87 => "11111111111111101011001000110001", 
    88 => "10111110111011110000000000001101", 
    89 => "11111100110100010001001100001110", 
    90 => "11101011000111010010000010111100", 
    91 => "11111110111100001001001011011111", 
    92 => "10111110111111100011111000110010", 
    93 => "11111101000011110100011111101100", 
    94 => "11001001000100010000000000100000", 
    95 => "00110010111001101001001011100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convclv is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convclv is
    component convDSPOpt_4_convclv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convclv_rom_U :  component convDSPOpt_4_convclv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


