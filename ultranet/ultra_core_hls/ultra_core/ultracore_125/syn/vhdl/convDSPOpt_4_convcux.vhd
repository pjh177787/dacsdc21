-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convcux_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convcux_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11000011110111101101110100100001", 
    1 => "11011111110100010111101100010000", 
    2 => "10110000111011001101111000000000", 
    3 => "00001101001111100100001100010000", 
    4 => "11100010100100011010000111100001", 
    5 => "11110000110000100100000001001111", 
    6 => "10111100110100000000010001101111", 
    7 => "00001111000000011111001000101110", 
    8 => "00110000101111001110101111100010", 
    9 => "01000010000011011100110111110000", 
    10 => "11100001000111000011001100101111", 
    11 => "00110000111011000000000111100000", 
    12 => "11110001000010110011111100110001", 
    13 => "11101111000111011101000011101101", 
    14 => "11101110111000100101000000100001", 
    15 => "00111011001111110010111100010011", 
    16 => "10010000000010100001110001001011", 
    17 => "11011110001110110000000100111010", 
    18 => "10100010001100010110111000101101", 
    19 => "01010000000111010110111010110111", 
    20 => "10100010111011101101110100001101", 
    21 => "11011101101100001111001000101100", 
    22 => "10101111010000110011000011011100", 
    23 => "00101111110000010000111000010010", 
    24 => "11101111000001010001001000100011", 
    25 => "01011111000010010100110111100000", 
    26 => "01010001001111110010000111101011", 
    27 => "00010001111111100000001001000000", 
    28 => "00100000001001010010000111011111", 
    29 => "00110010001011000100000000010000", 
    30 => "01110011000000000011000011011110", 
    31 => "11110101111000011010010100100000", 
    32 => "01111111001001100001001111100100", 
    33 => "00000010001011000111001000100000", 
    34 => "01110000001000101101011000100000", 
    35 => "11010110111001000011011000010010", 
    36 => "00010010111111100101110100110000", 
    37 => "00010010010100001110110100010010", 
    38 => "00010010000001101111101100100011", 
    39 => "00010001000100000011110111110000", 
    40 => "00000011110010101101000000100000", 
    41 => "10100100001011110001111111111110", 
    42 => "00010001000000111110000100100100", 
    43 => "00011011000000100100000100001110", 
    44 => "01000001001010011011110000101111", 
    45 => "10110100111100011101110011101101", 
    46 => "11100110110101001101011101010011", 
    47 => "00001110111000010011000100001111", 
    48 => "11101101000010010001000110100011", 
    49 => "01001111111011111011110100010110", 
    50 => "00110001010010011011110011110100", 
    51 => "00100000011111110001000000011111", 
    52 => "01000000111010111101001111111110", 
    53 => "01101101000000100011111000010100", 
    54 => "00101110000010011101010011000001", 
    55 => "10011101111111100000111111111100", 
    56 => "01101110100101111101000000111001", 
    57 => "01000010001110110000101111100001", 
    58 => "10100000111110100011111111110001", 
    59 => "10011011000011110001111111111001", 
    60 => "11100001000111110000000100000011", 
    61 => "11110001111100100111000100001010", 
    62 => "11111100011011001011000011000011", 
    63 => "00000010101111100110000100001100", 
    64 => "00111101111111101100000000010010", 
    65 => "00011101111011110111010011001001", 
    66 => "11100011001111111101111111100010", 
    67 => "00111101110011000101000111010000", 
    68 => "00110110111011011100000000110001", 
    69 => "00110001110111110111011011001010", 
    70 => "01010111000000011101000100100001", 
    71 => "00100000000001011110000111110010", 
    72 => "00011110001100000000111011110010", 
    73 => "11110000111110101111011011100001", 
    74 => "00001110000100010010101000111110", 
    75 => "00011110000111100100110000110000", 
    76 => "11101010010100100101111011001110", 
    77 => "00001010001000011101011111100011", 
    78 => "11100010110001010011110011011001", 
    79 => "00011011001011100001100100101110", 
    80 => "10010000111011110111100111111110", 
    81 => "01111001110101100010010011110100", 
    82 => "10010011110011110101100111000011", 
    83 => "11111110111011010000100100111011", 
    84 => "00011011111011001101111010010000", 
    85 => "11010011000000001111110100101110", 
    86 => "11100101111100001100101111010110", 
    87 => "11110000111111111100010011111100", 
    88 => "11111100110011111011111010101110", 
    89 => "11000101111000101100010111101010", 
    90 => "11100011111011111110111110110100", 
    91 => "00000001000100011110011000011110", 
    92 => "11000010111111011100101011110001", 
    93 => "11110001001000001101111000001101", 
    94 => "00000000101100011111111010100101", 
    95 => "00010010110100010010010100011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convcux is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convcux is
    component convDSPOpt_4_convcux_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convcux_rom_U :  component convDSPOpt_4_convcux_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


