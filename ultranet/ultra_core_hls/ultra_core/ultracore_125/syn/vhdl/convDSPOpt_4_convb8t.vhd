-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convb8t_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convb8t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00100110010100101001010000110000", 
    1 => "11010010001000010111001101001110", 
    2 => "11001101111100001110011100011111", 
    3 => "10011100001001110101000011011101", 
    4 => "01010100110000011010011011110010", 
    5 => "00000101000000110111111011111010", 
    6 => "00101001110000101010011010100000", 
    7 => "10010011000101101110000111001111", 
    8 => "00010100111010101101010011110000", 
    9 => "11110110001001001111001011011101", 
    10 => "11011011110011111010000110100001", 
    11 => "11000100111100101011011011100100", 
    12 => "00100001111100000001000101010110", 
    13 => "00110100000100000001000100100100", 
    14 => "01010001000011110101110110110010", 
    15 => "11010101000000010000111100100011", 
    16 => "11110010111000010010111000001110", 
    17 => "11100010000000100010001000010100", 
    18 => "01110010000111100000000011011110", 
    19 => "11101100001000111111001100010010", 
    20 => "00111111111001011111111100011101", 
    21 => "11110010111101010001001100001110", 
    22 => "01100101110110110001110111001011", 
    23 => "10101011000000110000010000010001", 
    24 => "01011110011001110000000000110010", 
    25 => "11010011111010111101011001011100", 
    26 => "00001001001111011100001010111101", 
    27 => "11100011110101111111110101001010", 
    28 => "11010001110101001111111111100011", 
    29 => "00011111000111101001010001111110", 
    30 => "00111001111111101100111111100011", 
    31 => "10010011111001101101000011101110", 
    32 => "11010100101100000010111111011111", 
    33 => "11111111001000101100111100101101", 
    34 => "00011001001011110010000100000010", 
    35 => "10100010110100001010001111101111", 
    36 => "00101110111010100011001011100000", 
    37 => "10110111111000011101010011101010", 
    38 => "00010001001100001111001101110101", 
    39 => "01000100000111100011010111111001", 
    40 => "11110000011100000001111111001111", 
    41 => "00011111111000000111111001111011", 
    42 => "01010000100100011111010111111101", 
    43 => "00100000111101010011100111101001", 
    44 => "11100111011100000100000011101011", 
    45 => "00111110000111100010110101111010", 
    46 => "00001101111101001110011111110001", 
    47 => "10110010111100000000000011011110", 
    48 => "00001011000111111111001010111011", 
    49 => "11100100000000001001010111000100", 
    50 => "00010001001000100000000101100001", 
    51 => "11101110111110110101011100011111", 
    52 => "01011101011111001110111011101101", 
    53 => "11010011000111110110010001110000", 
    54 => "11010101000101011001111111100010", 
    55 => "11100101101001000011110000001001", 
    56 => "10010000010011100100111010101100", 
    57 => "11010000111100000101001001011011", 
    58 => "00010000011100101001001111000101", 
    59 => "11100110101111101001010000011101", 
    60 => "11111110111111111010000111110000", 
    61 => "00101011110010011100110000010110", 
    62 => "11100011001100011101111011010000", 
    63 => "01101111111100001110111000101110", 
    64 => "01001001110111111001111100001111", 
    65 => "00001101001110010001000101011100", 
    66 => "00100110110000011010011111010100", 
    67 => "00100110101001011111001111111110", 
    68 => "11101001111010101001110111111110", 
    69 => "00111100111110111111110111010100", 
    70 => "11110000111000011111000000100011", 
    71 => "01111101111010110000100110010000", 
    72 => "10100001111000111111111010110011", 
    73 => "01010101111011110010001011100101", 
    74 => "11110010001011110101110100111111", 
    75 => "01011100001011000001011011110011", 
    76 => "11011110001010111100001011010100", 
    77 => "00010100111001000001001011110010", 
    78 => "00000000000011010001001000011010", 
    79 => "01001011111111101101110011010010", 
    80 => "00011110110111100110011001011110", 
    81 => "10111111110000101001111000001111", 
    82 => "00101011101000111100001100011101", 
    83 => "01000000011001101111001011010010", 
    84 => "10011101110111111100000111110000", 
    85 => "11111111001011100010000100011111", 
    86 => "11100000111100000001000100011111", 
    87 => "11110001000011001010111111110000", 
    88 => "10011010001000111111111111111111", 
    89 => "11011101111011000001101100100000", 
    90 => "00010010111000000001111100010000", 
    91 => "11110000111011101010110000101110", 
    92 => "10011111000011101011110000010001", 
    93 => "00001110000000111101110101010000", 
    94 => "01000011110011110011000000011111", 
    95 => "11010010110100001011011001011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convb8t is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convb8t is
    component convDSPOpt_4_convb8t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convb8t_rom_U :  component convDSPOpt_4_convb8t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


