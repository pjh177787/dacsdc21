-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convcjv_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convcjv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11000000000011111101110011000000", 
    1 => "10110010111110110010000111001001", 
    2 => "10110010111001011111010011110000", 
    3 => "00100000111111110001110110111100", 
    4 => "00001101001100000010110011100101", 
    5 => "00010011000000000011000101010001", 
    6 => "00100011011001010010111011010000", 
    7 => "01000000001000010000000100011100", 
    8 => "11011001010000000011110111011100", 
    9 => "00001111000000010100110111010101", 
    10 => "00001100110111110011111001000000", 
    11 => "11111111001111000001110011100010", 
    12 => "00100111000000000000111100110001", 
    13 => "11110110000011000001001011010001", 
    14 => "00010010111111101011110000001111", 
    15 => "00100010111000100001001011010001", 
    16 => "00000110111111011110111111100000", 
    17 => "11000110001011100001000100011110", 
    18 => "01100100111011011110010011110011", 
    19 => "00011111110100100010011110110011", 
    20 => "00111110111011111111001011010010", 
    21 => "11110000000110111110001000100001", 
    22 => "00100010001011101100000011000000", 
    23 => "01011011001101000011110100011101", 
    24 => "00000001001100011111000110010001", 
    25 => "00010100111011100011000011111101", 
    26 => "00010110110000000000110100010011", 
    27 => "00100100000111010001111111101111", 
    28 => "00101011110110011111111010110111", 
    29 => "00010100111100001110000101001111", 
    30 => "00010000000000011111000000000000", 
    31 => "00100011111001000001010100000101", 
    32 => "11110001000111001110000001011110", 
    33 => "00011110010101011011111101111010", 
    34 => "11010101111011010011010000110011", 
    35 => "00000011111000000001101000000110", 
    36 => "10110010001000100011001111101110", 
    37 => "00001010001000001100101111110111", 
    38 => "11000110111101010010000000100001", 
    39 => "00010001001000110011110111111101", 
    40 => "00000000100110101001000110110011", 
    41 => "00010100110101000000010000100100", 
    42 => "11010101101001010001010101110010", 
    43 => "00011101110100100110001111010001", 
    44 => "11111110111111001111001011100100", 
    45 => "01001100110000101101011000011111", 
    46 => "00001110111000100000001000110000", 
    47 => "00000000110011100101101111000111", 
    48 => "10010011111111011110100110011011", 
    49 => "01011111111111000000000011111101", 
    50 => "11000010000000110100101011111011", 
    51 => "11111110111011001100110000111100", 
    52 => "00010000001101100100000111000001", 
    53 => "00000101110111010010000111001111", 
    54 => "01110101101100110100110111111110", 
    55 => "11100001111111111100010000001101", 
    56 => "01110000000001110010001100000100", 
    57 => "00010011101111010001111100000001", 
    58 => "00011010001111111110001000011101", 
    59 => "00110000111000011110000000101111", 
    60 => "00101101101000111111101000111100", 
    61 => "00010100111111011110111111010001", 
    62 => "10110001110001010001110111101011", 
    63 => "00011111110100000001100100001100", 
    64 => "00110000000101001110111100100001", 
    65 => "00000111000010110001110011010100", 
    66 => "00110101110101011111111010101101", 
    67 => "00010001111000100000110111010011", 
    68 => "01000000010111100010000001111110", 
    69 => "00100111010011001101101100111110", 
    70 => "00111101111000100000001011001100", 
    71 => "00100010110101000001111100000101", 
    72 => "00000001011111011001001111000010", 
    73 => "01011110000011001011000001000011", 
    74 => "00001010100110111111111000011101", 
    75 => "11010011111011111111111111000000", 
    76 => "11100011101111001100111110100010", 
    77 => "11100001000000110001111000100010", 
    78 => "00001101000011000000110011010011", 
    79 => "11000001101111100010010011001111", 
    80 => "00000000101011111111111111010000", 
    81 => "11010000111100110011110110101111", 
    82 => "00101110101110101110111011111010", 
    83 => "11110000110111011111011111011100", 
    84 => "11010011000000011100110000101001", 
    85 => "11011111111011111111010100100001", 
    86 => "11101110000110100000000011101110", 
    87 => "11100010000111111010110000010010", 
    88 => "11011111001100111011110111011001", 
    89 => "10111111110011101111000100011111", 
    90 => "00001010111011100001000111101101", 
    91 => "11111111000011011001101000100001", 
    92 => "10111110000100011110110100111100", 
    93 => "00000011000000100010010000001111", 
    94 => "11010001000100110010000100011110", 
    95 => "00000100111000111001000100100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convcjv is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convcjv is
    component convDSPOpt_4_convcjv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convcjv_rom_U :  component convDSPOpt_4_convcjv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


