-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool2x2_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    vec_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    vec_V_V_empty_n : IN STD_LOGIC;
    vec_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    reps_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    reps_empty_n : IN STD_LOGIC;
    reps_read : OUT STD_LOGIC;
    reps_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    reps_out_full_n : IN STD_LOGIC;
    reps_out_write : OUT STD_LOGIC );
end;


architecture behav of max_pool2x2_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv41_0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv41_1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_const_lv10_140 : STD_LOGIC_VECTOR (9 downto 0) := "0101000000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal vec_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln35_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal and_ln51_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_reg_716_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reps_blk_n : STD_LOGIC;
    signal reps_out_blk_n : STD_LOGIC;
    signal indvar_flatten17_reg_165 : STD_LOGIC_VECTOR (40 downto 0);
    signal h_0_i_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_187 : STD_LOGIC_VECTOR (9 downto 0);
    signal peIdx_0_i_reg_198 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_0_i_reg_209 : STD_LOGIC_VECTOR (4 downto 0);
    signal reps_read_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bound4_fu_260_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal bound4_reg_682 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln35_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln35_3_fu_271_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln35_2_fu_297_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_2_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_fu_305_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln35_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln35_reg_701_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_339_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_reg_705 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_1_fu_347_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_1_reg_710 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln51_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_reg_716_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal w_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_2_fu_377_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln18_fu_408_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_reg_730 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_1_fu_442_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_1_reg_737 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_2_fu_476_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_2_reg_744 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_3_fu_510_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_3_reg_751 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_store_V_addr_reg_758 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal row_store_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_store_V_ce0 : STD_LOGIC;
    signal row_store_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_store_V_ce1 : STD_LOGIC;
    signal row_store_V_we1 : STD_LOGIC;
    signal row_store_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_h_0_i_phi_fu_180_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_peIdx_0_i_phi_fu_202_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln49_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Repl2_s_fu_110 : STD_LOGIC_VECTOR (15 downto 0);
    signal dataOut0_V_fu_627_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Repl2_12_fu_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln35_2_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln35_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_236_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_58_fu_248_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_shl22_fu_256_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_shl_fu_244_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal icmp_ln36_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln37_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_289_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln35_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal peIdx_fu_327_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln37_fu_355_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_1_fu_371_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_113_i_i_fu_392_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln647_fu_388_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_113_1_i_i_fu_426_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_112_1_i_i_fu_416_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_1_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_113_2_i_i_fu_460_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_112_2_i_i_fu_450_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_2_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_113_3_i_i_fu_494_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_112_3_i_i_fu_484_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_3_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_fu_385_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1_fu_518_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal addr_fu_525_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln647_9_fu_545_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_4_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_113_1_i_fu_561_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_5_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_113_2_i_fu_583_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_6_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_113_3_i_fu_605_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_7_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_7_fu_620_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_6_fu_598_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_5_fu_576_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_4_fu_554_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max_pool2x2_2_rowcWB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    row_store_V_U : component max_pool2x2_2_rowcWB
    generic map (
        DataWidth => 16,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_store_V_address0,
        ce0 => row_store_V_ce0,
        q0 => row_store_V_q0,
        address1 => row_store_V_addr_reg_758,
        ce1 => row_store_V_ce1,
        we1 => row_store_V_we1,
        d1 => row_store_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_0_i_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_reg_687 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                h_0_i_reg_176 <= select_ln35_2_reg_696;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                h_0_i_reg_176 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten17_reg_165 <= add_ln35_3_fu_271_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten17_reg_165 <= ap_const_lv41_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_187 <= select_ln36_2_fu_377_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_187 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    peIdx_0_i_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_reg_687 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                peIdx_0_i_reg_198 <= select_ln36_1_reg_710;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                peIdx_0_i_reg_198 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_0_i_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_0_i_reg_209 <= w_fu_365_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                w_0_i_reg_209 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln51_reg_716 <= and_ln51_fu_359_p2;
                select_ln36_reg_705 <= select_ln36_fu_339_p3;
                trunc_ln35_reg_701 <= trunc_ln35_fu_305_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln51_reg_716_pp0_iter1_reg <= and_ln51_reg_716;
                icmp_ln35_reg_687 <= icmp_ln35_fu_266_p2;
                trunc_ln35_reg_701_pp0_iter1_reg <= trunc_ln35_reg_701;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln51_reg_716_pp0_iter2_reg <= and_ln51_reg_716_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    bound4_reg_682(40 downto 8) <= bound4_fu_260_p2(40 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln51_reg_716_pp0_iter2_reg) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Repl2_12_fu_114 <= p_Repl2_s_fu_110;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln35_reg_701_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Repl2_s_fu_110 <= dataOut0_V_fu_627_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                reps_read_reg_676 <= reps_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                row_store_V_addr_reg_758 <= zext_ln49_fu_531_p1(9 - 1 downto 0);
                select_ln18_1_reg_737 <= select_ln18_1_fu_442_p3;
                select_ln18_2_reg_744 <= select_ln18_2_fu_476_p3;
                select_ln18_3_reg_751 <= select_ln18_3_fu_510_p3;
                select_ln18_reg_730 <= select_ln18_fu_408_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln35_2_reg_696 <= select_ln35_2_fu_297_p3;
                select_ln36_1_reg_710 <= select_ln36_1_fu_347_p3;
            end if;
        end if;
    end process;
    bound4_reg_682(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln35_fu_266_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln35_fu_266_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln35_fu_266_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln35_3_fu_271_p2 <= std_logic_vector(unsigned(indvar_flatten17_reg_165) + unsigned(ap_const_lv41_1));
    add_ln35_fu_230_p2 <= std_logic_vector(unsigned(shl_ln35_2_fu_225_p2) + unsigned(shl_ln35_fu_220_p2));
    add_ln36_1_fu_371_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_187) + unsigned(ap_const_lv10_1));
    addr_fu_525_p2 <= std_logic_vector(unsigned(zext_ln36_fu_385_p1) + unsigned(shl_ln1_fu_518_p3));
    and_ln35_fu_321_p2 <= (xor_ln35_fu_309_p2 and icmp_ln37_fu_315_p2);
    and_ln51_fu_359_p2 <= (trunc_ln37_fu_355_p1 and trunc_ln35_fu_305_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(vec_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_687, ap_enable_reg_pp0_iter3, and_ln51_reg_716_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_lv1_1 = and_ln51_reg_716_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln35_reg_687 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(vec_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_687, ap_enable_reg_pp0_iter3, and_ln51_reg_716_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_lv1_1 = and_ln51_reg_716_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln35_reg_687 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(vec_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_687, ap_enable_reg_pp0_iter3, and_ln51_reg_716_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_lv1_1 = and_ln51_reg_716_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln35_reg_687 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, reps_empty_n, reps_out_full_n)
    begin
                ap_block_state1 <= ((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(vec_V_V_empty_n, icmp_ln35_reg_687)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln35_reg_687 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter3_assign_proc : process(out_V_V_full_n, and_ln51_reg_716_pp0_iter2_reg)
    begin
                ap_block_state6_pp0_stage0_iter3 <= ((ap_const_lv1_1 = and_ln51_reg_716_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln35_fu_266_p2)
    begin
        if ((icmp_ln35_fu_266_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_h_0_i_phi_fu_180_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln35_reg_687, h_0_i_reg_176, select_ln35_2_reg_696)
    begin
        if (((icmp_ln35_reg_687 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_h_0_i_phi_fu_180_p4 <= select_ln35_2_reg_696;
        else 
            ap_phi_mux_h_0_i_phi_fu_180_p4 <= h_0_i_reg_176;
        end if; 
    end process;


    ap_phi_mux_peIdx_0_i_phi_fu_202_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln35_reg_687, peIdx_0_i_reg_198, select_ln36_1_reg_710)
    begin
        if (((icmp_ln35_reg_687 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_peIdx_0_i_phi_fu_202_p4 <= select_ln36_1_reg_710;
        else 
            ap_phi_mux_peIdx_0_i_phi_fu_202_p4 <= peIdx_0_i_reg_198;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound4_fu_260_p2 <= std_logic_vector(unsigned(p_shl22_fu_256_p1) + unsigned(p_shl_fu_244_p1));
    dataOut0_V_fu_627_p5 <= (((select_ln18_7_fu_620_p3 & select_ln18_6_fu_598_p3) & select_ln18_5_fu_576_p3) & select_ln18_4_fu_554_p3);
    h_fu_277_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_h_0_i_phi_fu_180_p4));
    icmp_ln35_fu_266_p2 <= "1" when (indvar_flatten17_reg_165 = bound4_reg_682) else "0";
    icmp_ln36_fu_283_p2 <= "1" when (indvar_flatten_reg_187 = ap_const_lv10_140) else "0";
    icmp_ln37_fu_315_p2 <= "1" when (w_0_i_reg_209 = ap_const_lv5_14) else "0";
    icmp_ln895_1_fu_436_p2 <= "1" when (unsigned(p_Result_113_1_i_i_fu_426_p4) > unsigned(p_Result_112_1_i_i_fu_416_p4)) else "0";
    icmp_ln895_2_fu_470_p2 <= "1" when (unsigned(p_Result_113_2_i_i_fu_460_p4) > unsigned(p_Result_112_2_i_i_fu_450_p4)) else "0";
    icmp_ln895_3_fu_504_p2 <= "1" when (unsigned(p_Result_113_3_i_i_fu_494_p4) > unsigned(p_Result_112_3_i_i_fu_484_p4)) else "0";
    icmp_ln895_4_fu_549_p2 <= "1" when (unsigned(trunc_ln647_9_fu_545_p1) > unsigned(select_ln18_reg_730)) else "0";
    icmp_ln895_5_fu_571_p2 <= "1" when (unsigned(p_Result_113_1_i_fu_561_p4) > unsigned(select_ln18_1_reg_737)) else "0";
    icmp_ln895_6_fu_593_p2 <= "1" when (unsigned(p_Result_113_2_i_fu_583_p4) > unsigned(select_ln18_2_reg_744)) else "0";
    icmp_ln895_7_fu_615_p2 <= "1" when (unsigned(p_Result_113_3_i_fu_605_p4) > unsigned(select_ln18_3_reg_751)) else "0";
    icmp_ln895_fu_402_p2 <= "1" when (unsigned(p_Result_113_i_i_fu_392_p4) > unsigned(trunc_ln647_fu_388_p1)) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    or_ln36_fu_333_p2 <= (icmp_ln36_fu_283_p2 or and_ln35_fu_321_p2);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln51_reg_716_pp0_iter2_reg)
    begin
        if (((ap_const_lv1_1 = and_ln51_reg_716_pp0_iter2_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (p_Repl2_s_fu_110 & p_Repl2_12_fu_114);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln51_reg_716_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln51_reg_716_pp0_iter2_reg) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_112_1_i_i_fu_416_p4 <= vec_V_V_dout(7 downto 4);
    p_Result_112_2_i_i_fu_450_p4 <= vec_V_V_dout(11 downto 8);
    p_Result_112_3_i_i_fu_484_p4 <= vec_V_V_dout(15 downto 12);
    p_Result_113_1_i_fu_561_p4 <= row_store_V_q0(7 downto 4);
    p_Result_113_1_i_i_fu_426_p4 <= vec_V_V_dout(23 downto 20);
    p_Result_113_2_i_fu_583_p4 <= row_store_V_q0(11 downto 8);
    p_Result_113_2_i_i_fu_460_p4 <= vec_V_V_dout(27 downto 24);
    p_Result_113_3_i_fu_605_p4 <= row_store_V_q0(15 downto 12);
    p_Result_113_3_i_i_fu_494_p4 <= vec_V_V_dout(31 downto 28);
    p_Result_113_i_i_fu_392_p4 <= vec_V_V_dout(19 downto 16);
    p_shl22_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_248_p3),41));
    p_shl_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_236_p3),41));
    peIdx_fu_327_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln35_fu_289_p3));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    reps_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_blk_n <= reps_empty_n;
        else 
            reps_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    reps_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_out_blk_n <= reps_out_full_n;
        else 
            reps_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    reps_out_din <= reps_dout;

    reps_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n)
    begin
        if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_out_write <= ap_const_logic_1;
        else 
            reps_out_write <= ap_const_logic_0;
        end if; 
    end process;


    reps_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n)
    begin
        if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_read <= ap_const_logic_1;
        else 
            reps_read <= ap_const_logic_0;
        end if; 
    end process;

    row_store_V_address0 <= zext_ln49_fu_531_p1(9 - 1 downto 0);

    row_store_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_store_V_ce0 <= ap_const_logic_1;
        else 
            row_store_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_store_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_store_V_ce1 <= ap_const_logic_1;
        else 
            row_store_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    row_store_V_d1 <= (((select_ln18_3_reg_751 & select_ln18_2_reg_744) & select_ln18_1_reg_737) & select_ln18_reg_730);

    row_store_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln35_reg_701_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln35_reg_701_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_store_V_we1 <= ap_const_logic_1;
        else 
            row_store_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln18_1_fu_442_p3 <= 
        p_Result_113_1_i_i_fu_426_p4 when (icmp_ln895_1_fu_436_p2(0) = '1') else 
        p_Result_112_1_i_i_fu_416_p4;
    select_ln18_2_fu_476_p3 <= 
        p_Result_113_2_i_i_fu_460_p4 when (icmp_ln895_2_fu_470_p2(0) = '1') else 
        p_Result_112_2_i_i_fu_450_p4;
    select_ln18_3_fu_510_p3 <= 
        p_Result_113_3_i_i_fu_494_p4 when (icmp_ln895_3_fu_504_p2(0) = '1') else 
        p_Result_112_3_i_i_fu_484_p4;
    select_ln18_4_fu_554_p3 <= 
        trunc_ln647_9_fu_545_p1 when (icmp_ln895_4_fu_549_p2(0) = '1') else 
        select_ln18_reg_730;
    select_ln18_5_fu_576_p3 <= 
        p_Result_113_1_i_fu_561_p4 when (icmp_ln895_5_fu_571_p2(0) = '1') else 
        select_ln18_1_reg_737;
    select_ln18_6_fu_598_p3 <= 
        p_Result_113_2_i_fu_583_p4 when (icmp_ln895_6_fu_593_p2(0) = '1') else 
        select_ln18_2_reg_744;
    select_ln18_7_fu_620_p3 <= 
        p_Result_113_3_i_fu_605_p4 when (icmp_ln895_7_fu_615_p2(0) = '1') else 
        select_ln18_3_reg_751;
    select_ln18_fu_408_p3 <= 
        p_Result_113_i_i_fu_392_p4 when (icmp_ln895_fu_402_p2(0) = '1') else 
        trunc_ln647_fu_388_p1;
    select_ln35_2_fu_297_p3 <= 
        h_fu_277_p2 when (icmp_ln36_fu_283_p2(0) = '1') else 
        ap_phi_mux_h_0_i_phi_fu_180_p4;
    select_ln35_fu_289_p3 <= 
        ap_const_lv5_0 when (icmp_ln36_fu_283_p2(0) = '1') else 
        ap_phi_mux_peIdx_0_i_phi_fu_202_p4;
    select_ln36_1_fu_347_p3 <= 
        peIdx_fu_327_p2 when (and_ln35_fu_321_p2(0) = '1') else 
        select_ln35_fu_289_p3;
    select_ln36_2_fu_377_p3 <= 
        ap_const_lv10_1 when (icmp_ln36_fu_283_p2(0) = '1') else 
        add_ln36_1_fu_371_p2;
    select_ln36_fu_339_p3 <= 
        ap_const_lv5_0 when (or_ln36_fu_333_p2(0) = '1') else 
        w_0_i_reg_209;
    shl_ln1_fu_518_p3 <= (select_ln36_reg_705 & ap_const_lv4_0);
    shl_ln35_2_fu_225_p2 <= std_logic_vector(shift_left(unsigned(reps_read_reg_676),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln35_fu_220_p2 <= std_logic_vector(shift_left(unsigned(reps_read_reg_676),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_58_fu_248_p3 <= (add_ln35_fu_230_p2 & ap_const_lv6_0);
    tmp_s_fu_236_p3 <= (add_ln35_fu_230_p2 & ap_const_lv8_0);
    trunc_ln35_fu_305_p1 <= select_ln35_2_fu_297_p3(1 - 1 downto 0);
    trunc_ln37_fu_355_p1 <= select_ln36_fu_339_p3(1 - 1 downto 0);
    trunc_ln647_9_fu_545_p1 <= row_store_V_q0(4 - 1 downto 0);
    trunc_ln647_fu_388_p1 <= vec_V_V_dout(4 - 1 downto 0);

    vec_V_V_blk_n_assign_proc : process(vec_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln35_reg_687)
    begin
        if (((icmp_ln35_reg_687 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vec_V_V_blk_n <= vec_V_V_empty_n;
        else 
            vec_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vec_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln35_reg_687, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln35_reg_687 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            vec_V_V_read <= ap_const_logic_1;
        else 
            vec_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    w_fu_365_p2 <= std_logic_vector(unsigned(select_ln36_fu_339_p3) + unsigned(ap_const_lv5_1));
    xor_ln35_fu_309_p2 <= (icmp_ln36_fu_283_p2 xor ap_const_lv1_1);
    zext_ln36_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_reg_710),9));
    zext_ln49_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr_fu_525_p2),64));
end behav;
