-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convctx_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convctx_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01010100011111101011111100010001", 
    1 => "00111110111011110010111100001110", 
    2 => "11110001000110110000111000000000", 
    3 => "11100111100111110110000000101011", 
    4 => "11100000100100011001111011100111", 
    5 => "11000100111100100110111101111101", 
    6 => "00011111110111011100001100010000", 
    7 => "11010110100100110001011101001100", 
    8 => "11010010110110101001110111001110", 
    9 => "00010011001100110000110001000101", 
    10 => "11001101110011001111000101000000", 
    11 => "00111111111000000100010111100111", 
    12 => "00110101001011110001111100000010", 
    13 => "00101111001111010000001000011110", 
    14 => "11110011000000100000111001100001", 
    15 => "00000011110100100011001000001111", 
    16 => "10011110001110010000110000100010", 
    17 => "00111010010000110000010100111110", 
    18 => "11010001001100010000111000110000", 
    19 => "01001110101110100100111110110000", 
    20 => "10010001101110111001110111011011", 
    21 => "00011101100100100000000100101111", 
    22 => "11010000000000000011110111010000", 
    23 => "11111110101111000011111111001100", 
    24 => "11100010001011111100111010010000", 
    25 => "00001001100111111110101111011101", 
    26 => "10111111000011010011110111001001", 
    27 => "11111011101110111100000000010000", 
    28 => "00010011000111011111110010011101", 
    29 => "00111111110011111111110111111010", 
    30 => "10111010110011000011110110011001", 
    31 => "00101010111111111001000011100101", 
    32 => "11100001111000100011101110101110", 
    33 => "01101111111011111110111011101011", 
    34 => "11011010101100010000111010011010", 
    35 => "00111100111111001001111111110001", 
    36 => "11011101000100010010111011011100", 
    37 => "00110101001011010000111100000000", 
    38 => "01000101001101000001110111011111", 
    39 => "00010111010011111111101000000000", 
    40 => "01010000000000110010111011110000", 
    41 => "11010001000011010000001100101101", 
    42 => "01110111111100101111000011011111", 
    43 => "10100111111000000000010000001101", 
    44 => "01101111110000111001111100000111", 
    45 => "11010111000011000001111100101111", 
    46 => "01110001101100011011011001000001", 
    47 => "11000000101101010000011000000011", 
    48 => "11001010011110101110001111100100", 
    49 => "00111110111100001100010001100100", 
    50 => "01011111101100001100110011110011", 
    51 => "11100001001000100000111000000011", 
    52 => "11111111000011010101110100001011", 
    53 => "11101111000111010001111100101100", 
    54 => "00111111111000110011001111100001", 
    55 => "10100010001101000001101000010000", 
    56 => "00011110110000110000100110111001", 
    57 => "00010000001110010011000000011111", 
    58 => "11010100001011100010010111010010", 
    59 => "10010000000000101110000011001011", 
    60 => "11110010000110110000111011100000", 
    61 => "00000011111100010101111100011111", 
    62 => "11001101001111101111111111101110", 
    63 => "00010101101111110000000101000000", 
    64 => "00111100000011001101111100110001", 
    65 => "00101101101111010000001010111001", 
    66 => "00001101010011011101001100111111", 
    67 => "00010001000111100100000000010001", 
    68 => "01001111000011101101000100010001", 
    69 => "00010000000000011100011010111010", 
    70 => "11101110000100000001011100100011", 
    71 => "11110110000000101111011000111111", 
    72 => "00010001001000011101111111010010", 
    73 => "11110010001000001111001001001111", 
    74 => "11101100000100010010110100101111", 
    75 => "00010000010100000001101100100010", 
    76 => "00111100010001010001010111010010", 
    77 => "10010010111111010000000000011101", 
    78 => "00001100011111010001111100101100", 
    79 => "00100000011000100000000100100000", 
    80 => "00100000010000100000000011101101", 
    81 => "11110101010011001100111111110001", 
    82 => "11101111011011011101110000011001", 
    83 => "00000001010000001110000100101011", 
    84 => "11111111110101000100011011110000", 
    85 => "11000001000100001110101111000001", 
    86 => "00000010000110111111110000100010", 
    87 => "11110001011111101101011000010001", 
    88 => "00100001001000010011010100001101", 
    89 => "11010001000000000010111010011011", 
    90 => "00100010111010101111111011100011", 
    91 => "11001101011100001110010100011011", 
    92 => "11110001111111011111001100110001", 
    93 => "11010001000000001100111110111110", 
    94 => "11010000101000010001110111010001", 
    95 => "00010011111100001111001000001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convctx is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convctx is
    component convDSPOpt_4_convctx_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convctx_rom_U :  component convDSPOpt_4_convctx_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


