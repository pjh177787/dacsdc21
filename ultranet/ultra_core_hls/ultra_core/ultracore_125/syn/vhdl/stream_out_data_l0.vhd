-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stream_out_data_l0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (71 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    row_buffer_0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    row_buffer_0_V_ce0 : OUT STD_LOGIC;
    row_buffer_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    row_buffer_1_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    row_buffer_1_V_ce0 : OUT STD_LOGIC;
    row_buffer_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    row_buffer_2_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    row_buffer_2_V_ce0 : OUT STD_LOGIC;
    row_buffer_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    row_buffer_3_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    row_buffer_3_V_ce0 : OUT STD_LOGIC;
    row_buffer_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    skip_flag : IN STD_LOGIC;
    outRowIdx_V : IN STD_LOGIC_VECTOR (9 downto 0);
    centerRowBufferIdx_V : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of stream_out_data_l0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_9F : STD_LOGIC_VECTOR (9 downto 0) := "0010011111";
    constant ap_const_lv10_3C0 : STD_LOGIC_VECTOR (9 downto 0) := "1111000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln45_reg_388 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_388_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_167 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_0_reg_178 : STD_LOGIC_VECTOR (8 downto 0);
    signal kc_0_reg_189 : STD_LOGIC_VECTOR (1 downto 0);
    signal skip_flag_read_read_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_sel0_V_fu_200_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_sel0_V_reg_368 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_sel2_V_fu_206_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_sel2_V_reg_373 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln45_reg_388_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_fu_242_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln46_fu_260_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln46_reg_397 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln45_fu_268_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln45_reg_402 : STD_LOGIC_VECTOR (8 downto 0);
    signal kc_fu_276_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal v2_V_fu_311_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal v2_V_reg_433 : STD_LOGIC_VECTOR (23 downto 0);
    signal data1_V_fu_318_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal data1_V_reg_438 : STD_LOGIC_VECTOR (23 downto 0);
    signal v1_V_fu_344_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal v1_V_reg_443 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_c_0_phi_fu_182_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln51_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln1354_fu_212_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1354_fu_212_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_216_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln879_fu_230_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln46_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_248_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_fu_282_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln51_fu_285_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal data0_V_fu_298_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal data2_V_fu_331_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component ultra_net_mux_42_ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (23 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    ultra_net_mux_42_ocq_U85 : component ultra_net_mux_42_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => row_buffer_0_V_q0,
        din1 => row_buffer_1_V_q0,
        din2 => row_buffer_2_V_q0,
        din3 => row_buffer_3_V_q0,
        din4 => row_sel0_V_reg_368,
        dout => data0_V_fu_298_p6);

    ultra_net_mux_42_ocq_U86 : component ultra_net_mux_42_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => row_buffer_0_V_q0,
        din1 => row_buffer_1_V_q0,
        din2 => row_buffer_2_V_q0,
        din3 => row_buffer_3_V_q0,
        din4 => centerRowBufferIdx_V,
        dout => data1_V_fu_318_p6);

    ultra_net_mux_42_ocq_U87 : component ultra_net_mux_42_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => row_buffer_0_V_q0,
        din1 => row_buffer_1_V_q0,
        din2 => row_buffer_2_V_q0,
        din3 => row_buffer_3_V_q0,
        din4 => row_sel2_V_reg_373,
        dout => data2_V_fu_331_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_388 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_0_reg_178 <= select_ln45_reg_402;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_178 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_167 <= add_ln45_fu_242_p2;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_167 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    kc_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kc_0_reg_189 <= kc_fu_276_p2;
            elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                kc_0_reg_189 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_388_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data1_V_reg_438 <= data1_V_fu_318_p6;
                v1_V_reg_443 <= v1_V_fu_344_p3;
                v2_V_reg_433 <= v2_V_fu_311_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln45_reg_388 <= icmp_ln45_fu_236_p2;
                icmp_ln45_reg_388_pp0_iter1_reg <= icmp_ln45_reg_388;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln45_reg_388_pp0_iter2_reg <= icmp_ln45_reg_388_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln879_reg_383 <= icmp_ln879_fu_230_p2;
                row_sel0_V_reg_368 <= row_sel0_V_fu_200_p2;
                row_sel2_V_reg_373 <= row_sel2_V_fu_206_p2;
                tmp_5_reg_378 <= ret_V_fu_216_p2(10 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln45_reg_402 <= select_ln45_fu_268_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln46_reg_397 <= select_ln46_fu_260_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter3, skip_flag_read_read_fu_102_p2, icmp_ln45_fu_236_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (skip_flag_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln45_fu_236_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln45_fu_236_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln45_fu_242_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_167) + unsigned(ap_const_lv10_1));
    add_ln51_fu_285_p2 <= std_logic_vector(unsigned(select_ln45_reg_402) + unsigned(zext_ln46_fu_282_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(out_V_V_full_n, ap_enable_reg_pp0_iter3, icmp_ln45_reg_388_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln45_reg_388_pp0_iter2_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(out_V_V_full_n, ap_enable_reg_pp0_iter3, icmp_ln45_reg_388_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln45_reg_388_pp0_iter2_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(out_V_V_full_n, ap_enable_reg_pp0_iter3, icmp_ln45_reg_388_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln45_reg_388_pp0_iter2_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(out_V_V_full_n, icmp_ln45_reg_388_pp0_iter2_reg)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((icmp_ln45_reg_388_pp0_iter2_reg = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln45_fu_236_p2)
    begin
        if ((icmp_ln45_fu_236_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_182_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln45_reg_388, c_0_reg_178, ap_CS_fsm_pp0_stage0, select_ln45_reg_402, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln45_reg_388 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_c_0_phi_fu_182_p4 <= select_ln45_reg_402;
        else 
            ap_phi_mux_c_0_phi_fu_182_p4 <= c_0_reg_178;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_248_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_182_p4) + unsigned(ap_const_lv9_1));
    icmp_ln45_fu_236_p2 <= "1" when (indvar_flatten_reg_167 = ap_const_lv10_3C0) else "0";
    icmp_ln46_fu_254_p2 <= "1" when (kc_0_reg_189 = ap_const_lv2_3) else "0";
    icmp_ln879_fu_230_p0 <= outRowIdx_V;
    icmp_ln879_fu_230_p2 <= "1" when (icmp_ln879_fu_230_p0 = ap_const_lv10_9F) else "0";
    kc_fu_276_p2 <= std_logic_vector(unsigned(select_ln46_fu_260_p3) + unsigned(ap_const_lv2_1));

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln45_reg_388_pp0_iter2_reg)
    begin
        if (((icmp_ln45_reg_388_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= ((v1_V_reg_443 & data1_V_reg_438) & v2_V_reg_433);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln45_reg_388_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln45_reg_388_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_216_p2 <= std_logic_vector(signed(sext_ln1354_fu_212_p1) + signed(ap_const_lv11_7FF));
    row_buffer_0_V_address0 <= zext_ln51_fu_290_p1(9 - 1 downto 0);

    row_buffer_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_buffer_0_V_ce0 <= ap_const_logic_1;
        else 
            row_buffer_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_buffer_1_V_address0 <= zext_ln51_fu_290_p1(9 - 1 downto 0);

    row_buffer_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_buffer_1_V_ce0 <= ap_const_logic_1;
        else 
            row_buffer_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_buffer_2_V_address0 <= zext_ln51_fu_290_p1(9 - 1 downto 0);

    row_buffer_2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_buffer_2_V_ce0 <= ap_const_logic_1;
        else 
            row_buffer_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_buffer_3_V_address0 <= zext_ln51_fu_290_p1(9 - 1 downto 0);

    row_buffer_3_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_buffer_3_V_ce0 <= ap_const_logic_1;
        else 
            row_buffer_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_sel0_V_fu_200_p2 <= std_logic_vector(unsigned(centerRowBufferIdx_V) + unsigned(ap_const_lv2_3));
    row_sel2_V_fu_206_p2 <= std_logic_vector(unsigned(centerRowBufferIdx_V) + unsigned(ap_const_lv2_1));
    select_ln45_fu_268_p3 <= 
        c_fu_248_p2 when (icmp_ln46_fu_254_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_182_p4;
    select_ln46_fu_260_p3 <= 
        ap_const_lv2_0 when (icmp_ln46_fu_254_p2(0) = '1') else 
        kc_0_reg_189;
    sext_ln1354_fu_212_p0 <= outRowIdx_V;
        sext_ln1354_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1354_fu_212_p0),11));

    skip_flag_read_read_fu_102_p2 <= (0=>skip_flag, others=>'-');
    v1_V_fu_344_p3 <= 
        ap_const_lv24_0 when (icmp_ln879_reg_383(0) = '1') else 
        data2_V_fu_331_p6;
    v2_V_fu_311_p3 <= 
        ap_const_lv24_0 when (tmp_5_reg_378(0) = '1') else 
        data0_V_fu_298_p6;
    zext_ln46_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln46_reg_397),9));
    zext_ln51_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_fu_285_p2),64));
end behav;
