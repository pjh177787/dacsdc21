-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1x1convert718 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    reps_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    reps_empty_n : IN STD_LOGIC;
    reps_read : OUT STD_LOGIC;
    reps_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    reps_out_full_n : IN STD_LOGIC;
    reps_out_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    conv1in_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv1in_V_V_full_n : IN STD_LOGIC;
    conv1in_V_V_write : OUT STD_LOGIC;
    reps_c_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    reps_c_i_full_n : IN STD_LOGIC;
    reps_c_i_write : OUT STD_LOGIC );
end;


architecture behav of conv1x1convert718 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal reps_blk_n : STD_LOGIC;
    signal reps_out_blk_n : STD_LOGIC;
    signal reps_c_i_blk_n : STD_LOGIC;
    signal add_ln97_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln97_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal or_ln97_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln97_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal rep_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rep_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal xor_ln100_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln100_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_reg_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal loadBufferIdx_V_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loadBufferIdx_V_reg_237 : STD_LOGIC_VECTOR (0 downto 0);
    signal storeBufferIdx_V_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storeBufferIdx_V_reg_242 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_buffer_0_V_ce0 : STD_LOGIC;
    signal row_buffer_0_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buffer_0_V_ce1 : STD_LOGIC;
    signal row_buffer_0_V_we1 : STD_LOGIC;
    signal row_buffer_1_V_ce0 : STD_LOGIC;
    signal row_buffer_1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buffer_1_V_ce1 : STD_LOGIC;
    signal row_buffer_1_V_we1 : STD_LOGIC;
    signal grp_streamInOneRowTwoPix_fu_121_ap_start : STD_LOGIC;
    signal grp_streamInOneRowTwoPix_fu_121_ap_done : STD_LOGIC;
    signal grp_streamInOneRowTwoPix_fu_121_ap_idle : STD_LOGIC;
    signal grp_streamInOneRowTwoPix_fu_121_ap_ready : STD_LOGIC;
    signal grp_streamInOneRowTwoPix_fu_121_in_V_V_read : STD_LOGIC;
    signal grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_ce1 : STD_LOGIC;
    signal grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_we1 : STD_LOGIC;
    signal grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_ce1 : STD_LOGIC;
    signal grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_we1 : STD_LOGIC;
    signal grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_streamInOneRowTwoPix_fu_121_skip_flag : STD_LOGIC;
    signal grp_streamOutOneRowTwoPi_fu_132_ap_start : STD_LOGIC;
    signal grp_streamOutOneRowTwoPi_fu_132_ap_done : STD_LOGIC;
    signal grp_streamOutOneRowTwoPi_fu_132_ap_idle : STD_LOGIC;
    signal grp_streamOutOneRowTwoPi_fu_132_ap_ready : STD_LOGIC;
    signal grp_streamOutOneRowTwoPi_fu_132_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_streamOutOneRowTwoPi_fu_132_out_V_V_write : STD_LOGIC;
    signal grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_ce0 : STD_LOGIC;
    signal grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_ce0 : STD_LOGIC;
    signal grp_streamOutOneRowTwoPi_fu_132_skip_flag : STD_LOGIC;
    signal t_V_21_reg_86 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal t_V_reg_98 : STD_LOGIC_VECTOR (0 downto 0);
    signal rep_0_i_i_i_reg_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_streamInOneRowTwoPix_fu_121_ap_start_reg : STD_LOGIC := '0';
    signal grp_streamOutOneRowTwoPi_fu_132_ap_start_reg : STD_LOGIC := '0';
    signal shl_ln97_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln97_1_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln100_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component streamInOneRowTwoPix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        row_buffer_0_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        row_buffer_0_V_ce1 : OUT STD_LOGIC;
        row_buffer_0_V_we1 : OUT STD_LOGIC;
        row_buffer_0_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        row_buffer_1_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        row_buffer_1_V_ce1 : OUT STD_LOGIC;
        row_buffer_1_V_we1 : OUT STD_LOGIC;
        row_buffer_1_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        skip_flag : IN STD_LOGIC;
        rowBufferIdx_V : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component streamOutOneRowTwoPi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        row_buffer_0_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        row_buffer_0_V_ce0 : OUT STD_LOGIC;
        row_buffer_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        row_buffer_1_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        row_buffer_1_V_ce0 : OUT STD_LOGIC;
        row_buffer_1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        skip_flag : IN STD_LOGIC;
        rowBufferIdx_V : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv1x1convert718dOK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    row_buffer_0_V_U : component conv1x1convert718dOK
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_address0,
        ce0 => row_buffer_0_V_ce0,
        q0 => row_buffer_0_V_q0,
        address1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_address1,
        ce1 => row_buffer_0_V_ce1,
        we1 => row_buffer_0_V_we1,
        d1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_d1);

    row_buffer_1_V_U : component conv1x1convert718dOK
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_address0,
        ce0 => row_buffer_1_V_ce0,
        q0 => row_buffer_1_V_q0,
        address1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_address1,
        ce1 => row_buffer_1_V_ce1,
        we1 => row_buffer_1_V_we1,
        d1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_d1);

    grp_streamInOneRowTwoPix_fu_121 : component streamInOneRowTwoPix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_streamInOneRowTwoPix_fu_121_ap_start,
        ap_done => grp_streamInOneRowTwoPix_fu_121_ap_done,
        ap_idle => grp_streamInOneRowTwoPix_fu_121_ap_idle,
        ap_ready => grp_streamInOneRowTwoPix_fu_121_ap_ready,
        in_V_V_dout => in_V_V_dout,
        in_V_V_empty_n => in_V_V_empty_n,
        in_V_V_read => grp_streamInOneRowTwoPix_fu_121_in_V_V_read,
        row_buffer_0_V_address1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_address1,
        row_buffer_0_V_ce1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_ce1,
        row_buffer_0_V_we1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_we1,
        row_buffer_0_V_d1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_d1,
        row_buffer_1_V_address1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_address1,
        row_buffer_1_V_ce1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_ce1,
        row_buffer_1_V_we1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_we1,
        row_buffer_1_V_d1 => grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_d1,
        skip_flag => grp_streamInOneRowTwoPix_fu_121_skip_flag,
        rowBufferIdx_V => t_V_21_reg_86);

    grp_streamOutOneRowTwoPi_fu_132 : component streamOutOneRowTwoPi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_streamOutOneRowTwoPi_fu_132_ap_start,
        ap_done => grp_streamOutOneRowTwoPi_fu_132_ap_done,
        ap_idle => grp_streamOutOneRowTwoPi_fu_132_ap_idle,
        ap_ready => grp_streamOutOneRowTwoPi_fu_132_ap_ready,
        out_V_V_din => grp_streamOutOneRowTwoPi_fu_132_out_V_V_din,
        out_V_V_full_n => conv1in_V_V_full_n,
        out_V_V_write => grp_streamOutOneRowTwoPi_fu_132_out_V_V_write,
        row_buffer_0_V_address0 => grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_address0,
        row_buffer_0_V_ce0 => grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_ce0,
        row_buffer_0_V_q0 => row_buffer_0_V_q0,
        row_buffer_1_V_address0 => grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_address0,
        row_buffer_1_V_ce0 => grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_ce0,
        row_buffer_1_V_q0 => row_buffer_1_V_q0,
        skip_flag => grp_streamOutOneRowTwoPi_fu_132_skip_flag,
        rowBufferIdx_V => t_V_reg_98);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln97_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_streamInOneRowTwoPix_fu_121_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_streamInOneRowTwoPix_fu_121_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln97_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_streamInOneRowTwoPix_fu_121_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_streamInOneRowTwoPix_fu_121_ap_ready = ap_const_logic_1)) then 
                    grp_streamInOneRowTwoPix_fu_121_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_streamOutOneRowTwoPi_fu_132_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_streamOutOneRowTwoPi_fu_132_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln97_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_streamOutOneRowTwoPi_fu_132_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_streamOutOneRowTwoPi_fu_132_ap_ready = ap_const_logic_1)) then 
                    grp_streamOutOneRowTwoPi_fu_132_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    rep_0_i_i_i_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                rep_0_i_i_i_reg_110 <= rep_reg_222;
            elsif ((not(((real_start = ap_const_logic_0) or (reps_c_i_full_n = ap_const_logic_0) or (reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rep_0_i_i_i_reg_110 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_21_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                t_V_21_reg_86 <= storeBufferIdx_V_reg_242;
            elsif ((not(((real_start = ap_const_logic_0) or (reps_c_i_full_n = ap_const_logic_0) or (reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_21_reg_86 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    t_V_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                t_V_reg_98 <= loadBufferIdx_V_reg_237;
            elsif ((not(((real_start = ap_const_logic_0) or (reps_c_i_full_n = ap_const_logic_0) or (reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_98 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (reps_c_i_full_n = ap_const_logic_0) or (reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    add_ln97_reg_209(31 downto 1) <= add_ln97_fu_155_p2(31 downto 1);
                    or_ln97_reg_214(31 downto 1) <= or_ln97_fu_161_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln102_reg_232 <= icmp_ln102_fu_190_p2;
                loadBufferIdx_V_reg_237 <= loadBufferIdx_V_fu_197_p2;
                storeBufferIdx_V_reg_242 <= storeBufferIdx_V_fu_203_p2;
                xor_ln100_reg_227 <= xor_ln100_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                rep_reg_222 <= rep_fu_172_p2;
            end if;
        end if;
    end process;
    add_ln97_reg_209(0) <= '0';
    or_ln97_reg_214(0) <= '1';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n, reps_c_i_full_n, ap_CS_fsm_state2, icmp_ln97_fu_167_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (reps_c_i_full_n = ap_const_logic_0) or (reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln97_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln97_fu_155_p2 <= std_logic_vector(unsigned(shl_ln97_fu_143_p2) + unsigned(shl_ln97_1_fu_149_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, reps_empty_n, reps_out_full_n, reps_c_i_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (reps_c_i_full_n = ap_const_logic_0) or (reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(grp_streamInOneRowTwoPix_fu_121_ap_done, grp_streamOutOneRowTwoPi_fu_132_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((grp_streamOutOneRowTwoPi_fu_132_ap_done = ap_const_logic_0) or (grp_streamInOneRowTwoPix_fu_121_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln97_fu_167_p2)
    begin
        if (((icmp_ln97_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    conv1in_V_V_din <= grp_streamOutOneRowTwoPi_fu_132_out_V_V_din;

    conv1in_V_V_write_assign_proc : process(grp_streamOutOneRowTwoPi_fu_132_out_V_V_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv1in_V_V_write <= grp_streamOutOneRowTwoPi_fu_132_out_V_V_write;
        else 
            conv1in_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_streamInOneRowTwoPix_fu_121_ap_start <= grp_streamInOneRowTwoPix_fu_121_ap_start_reg;
    grp_streamInOneRowTwoPix_fu_121_skip_flag <= xor_ln100_reg_227(0);
    grp_streamOutOneRowTwoPi_fu_132_ap_start <= grp_streamOutOneRowTwoPi_fu_132_ap_start_reg;
    grp_streamOutOneRowTwoPi_fu_132_skip_flag <= icmp_ln102_reg_232(0);
    icmp_ln100_fu_178_p2 <= "1" when (unsigned(rep_0_i_i_i_reg_110) < unsigned(add_ln97_reg_209)) else "0";
    icmp_ln102_fu_190_p2 <= "1" when (rep_0_i_i_i_reg_110 = ap_const_lv32_0) else "0";
    icmp_ln97_fu_167_p2 <= "1" when (rep_0_i_i_i_reg_110 = or_ln97_reg_214) else "0";

    in_V_V_read_assign_proc : process(grp_streamInOneRowTwoPix_fu_121_in_V_V_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_V_V_read <= grp_streamInOneRowTwoPix_fu_121_in_V_V_read;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln97_fu_167_p2)
    begin
        if (((icmp_ln97_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    loadBufferIdx_V_fu_197_p2 <= (t_V_reg_98 xor ap_const_lv1_1);
    or_ln97_fu_161_p2 <= (ap_const_lv32_1 or add_ln97_fu_155_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rep_fu_172_p2 <= std_logic_vector(unsigned(rep_0_i_i_i_reg_110) + unsigned(ap_const_lv32_1));

    reps_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_blk_n <= reps_empty_n;
        else 
            reps_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    reps_c_i_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_c_i_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_c_i_blk_n <= reps_c_i_full_n;
        else 
            reps_c_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    reps_c_i_din <= reps_dout;

    reps_c_i_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n, reps_c_i_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (reps_c_i_full_n = ap_const_logic_0) or (reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_c_i_write <= ap_const_logic_1;
        else 
            reps_c_i_write <= ap_const_logic_0;
        end if; 
    end process;


    reps_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_out_blk_n <= reps_out_full_n;
        else 
            reps_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    reps_out_din <= reps_dout;

    reps_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n, reps_c_i_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (reps_c_i_full_n = ap_const_logic_0) or (reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_out_write <= ap_const_logic_1;
        else 
            reps_out_write <= ap_const_logic_0;
        end if; 
    end process;


    reps_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n, reps_c_i_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (reps_c_i_full_n = ap_const_logic_0) or (reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_read <= ap_const_logic_1;
        else 
            reps_read <= ap_const_logic_0;
        end if; 
    end process;


    row_buffer_0_V_ce0_assign_proc : process(grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_buffer_0_V_ce0 <= grp_streamOutOneRowTwoPi_fu_132_row_buffer_0_V_ce0;
        else 
            row_buffer_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buffer_0_V_ce1_assign_proc : process(grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_buffer_0_V_ce1 <= grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_ce1;
        else 
            row_buffer_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    row_buffer_0_V_we1_assign_proc : process(grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_we1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_buffer_0_V_we1 <= grp_streamInOneRowTwoPix_fu_121_row_buffer_0_V_we1;
        else 
            row_buffer_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    row_buffer_1_V_ce0_assign_proc : process(grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_buffer_1_V_ce0 <= grp_streamOutOneRowTwoPi_fu_132_row_buffer_1_V_ce0;
        else 
            row_buffer_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buffer_1_V_ce1_assign_proc : process(grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_buffer_1_V_ce1 <= grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_ce1;
        else 
            row_buffer_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    row_buffer_1_V_we1_assign_proc : process(grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_we1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_buffer_1_V_we1 <= grp_streamInOneRowTwoPix_fu_121_row_buffer_1_V_we1;
        else 
            row_buffer_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln97_1_fu_149_p2 <= std_logic_vector(shift_left(unsigned(reps_dout),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln97_fu_143_p2 <= std_logic_vector(shift_left(unsigned(reps_dout),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    storeBufferIdx_V_fu_203_p2 <= (t_V_21_reg_86 xor ap_const_lv1_1);
    xor_ln100_fu_183_p2 <= (icmp_ln100_fu_178_p2 xor ap_const_lv1_1);
end behav;
