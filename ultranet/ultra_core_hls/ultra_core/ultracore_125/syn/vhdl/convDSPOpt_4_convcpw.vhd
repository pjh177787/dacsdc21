-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convcpw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convcpw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11111101000011011100111001001111", 
    1 => "00011111110100100011000100000001", 
    2 => "10011110000000000000000000011111", 
    3 => "11101011000000100000100100000100", 
    4 => "10011101110111100001101111001110", 
    5 => "00111110111110101110010000110011", 
    6 => "00100011111000010011110011011110", 
    7 => "00010011010111101111100111111111", 
    8 => "00100000001001010001111000001111", 
    9 => "11010001111111000010001000111101", 
    10 => "01110100101100001111000110101110", 
    11 => "00010100010000101111011111111101", 
    12 => "00101111011111110001010111010100", 
    13 => "00001110000100010101000001000010", 
    14 => "00111101000110011101111100100001", 
    15 => "01001111000010011110000100110011", 
    16 => "11000000001111010000111011101111", 
    17 => "00011101110000100100110111001011", 
    18 => "11001011010010111111111000001011", 
    19 => "11111100111010010000001000110001", 
    20 => "01001111000101010001111111111111", 
    21 => "00001110111011111111111011111111", 
    22 => "01001110111111001110110110101011", 
    23 => "00000101000010011110000100010001", 
    24 => "00010101111111010000111011010001", 
    25 => "00000010110100010001000111101100", 
    26 => "00000000001011110010000000010001", 
    27 => "00001100001000000001111100110000", 
    28 => "11101110001000110001111110101111", 
    29 => "00000011010011011110111111011101", 
    30 => "00001001000111110001110110101011", 
    31 => "00100000010111111100111100100001", 
    32 => "11111110111101001101111111000010", 
    33 => "11010010001011101101111000000111", 
    34 => "11010101111111100010111011010010", 
    35 => "00110001000100111100000100100110", 
    36 => "11101100111010111110001110100001", 
    37 => "11101111001000111111010101010100", 
    38 => "11101111111100001110111111101100", 
    39 => "00001010000000100000111100101111", 
    40 => "00001111101100101100000011101111", 
    41 => "00000000110001001011110101010101", 
    42 => "00011101110011111010000011101010", 
    43 => "00001101000100101100001000001001", 
    44 => "01000001101101100011111100001010", 
    45 => "00100011111100011011111101000010", 
    46 => "00000000111111011100000111111011", 
    47 => "10111011111100101011111011111010", 
    48 => "11110000110100101111111111111110", 
    49 => "10110010001000011100000111100100", 
    50 => "00000000111000101110111100111111", 
    51 => "11010000111100100010010111110011", 
    52 => "11010000000100000010110000101100", 
    53 => "11110010111111110001001100000010", 
    54 => "00101110101100010000111001100001", 
    55 => "11001111111100011111001111110001", 
    56 => "00001101110000101010000100001101", 
    57 => "11110010110100101101111101100010", 
    58 => "11101100000000010110001000100011", 
    59 => "11010001110000111110111100001110", 
    60 => "00100000110011010001001000000011", 
    61 => "00000001000100001101000110101110", 
    62 => "00101100111011011110111101000010", 
    63 => "00000000000100111101010000100001", 
    64 => "11101101100100000100000100001100", 
    65 => "11110001001000001101001111001110", 
    66 => "00001111110111111111110100100010", 
    67 => "00010001000000001111110100100001", 
    68 => "11100010100111011110001000000000", 
    69 => "11101111001111111111000000000001", 
    70 => "11110001000111110000111100100001", 
    71 => "00000001000100100000001000010011", 
    72 => "00111011001110010000010111100111", 
    73 => "11010000001000100001111100110010", 
    74 => "00010110111000011100011101010011", 
    75 => "10011101111100000111000111000001", 
    76 => "01000000011111111001001000110100", 
    77 => "11100010001011010111001000101001", 
    78 => "00111001110010110000011100010100", 
    79 => "10011011111100110111111111000100", 
    80 => "00000010001111111100000000100001", 
    81 => "01000000111111000110110111011110", 
    82 => "11001101111011100001010011000011", 
    83 => "10101111111000110010110011000100", 
    84 => "01101001011101000000111111011010", 
    85 => "00100001000010110000011100010011", 
    86 => "01001011101011101110001100101001", 
    87 => "10100100110000100111111111001001", 
    88 => "00100101011111111010001011100001", 
    89 => "00011111000011000001011101111011", 
    90 => "11111011100111111011011010010011", 
    91 => "10010111101001110001001011011110", 
    92 => "10100100111010110110111011001101", 
    93 => "11000010000100111101110100010001", 
    94 => "00001101001101111110000011100010", 
    95 => "10010011000000001011001111010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convcpw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convcpw is
    component convDSPOpt_4_convcpw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convcpw_rom_U :  component convDSPOpt_4_convcpw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


