-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convckv_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convckv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11101100101111000010001100000000", 
    1 => "11110011111000110000001111001100", 
    2 => "00100011111000110000111000010001", 
    3 => "00101100001000000001000111001110", 
    4 => "11001110101110100000110111011110", 
    5 => "11010010111111110100001111011110", 
    6 => "11100110010000110000001111100000", 
    7 => "01011010000100000000000011111111", 
    8 => "11101101000000011110111001011010", 
    9 => "11010100010011000010001000010111", 
    10 => "00000101110011010000001111010011", 
    11 => "11101111000011110100111000001111", 
    12 => "11110010101111011100000011110100", 
    13 => "11110101000010100010110000011011", 
    14 => "00010010110000011110011100110100", 
    15 => "11101110001001010100010010101101", 
    16 => "01010011100110011001001011000011", 
    17 => "10100111011111000001010100101110", 
    18 => "01111011101111111101011101110110", 
    19 => "11111110000100100011011110010111", 
    20 => "00011101000000010010111011101111", 
    21 => "11010101011011001110000001000011", 
    22 => "11010001001011111101000100000000", 
    23 => "00010001000101000011100100011110", 
    24 => "10011111000111110000011010110001", 
    25 => "00110001000100110110001011110011", 
    26 => "11110001001011111101000011110100", 
    27 => "00001111000000000100111000000010", 
    28 => "00111111101110011100001100000101", 
    29 => "00000100001111010011001000010001", 
    30 => "00010010111011000000000100100010", 
    31 => "00010001110101010010010011111100", 
    32 => "01011111111110111011001001100100", 
    33 => "00100010000011111011000101110000", 
    34 => "01000011111011100010010100100001", 
    35 => "11110001100101010010110000101110", 
    36 => "10010000001101010001110011001010", 
    37 => "11011010000000111111110111110100", 
    38 => "11011101001000100011110100001101", 
    39 => "00011100101000001110101100001101", 
    40 => "11010001111000110010011011101100", 
    41 => "11000011000100000100110110110100", 
    42 => "10110100001011101110010000100010", 
    43 => "11101100000011110011000011111111", 
    44 => "00011101000010011001001111010111", 
    45 => "01011100101001000011010011010011", 
    46 => "01101100001011001101001000010000", 
    47 => "11111110000011010110111111100101", 
    48 => "10011111110000100011110110011110", 
    49 => "00010001001000001111000110100101", 
    50 => "11110111111001010011111011110011", 
    51 => "00011111101111011100111000101101", 
    52 => "00011111001111011011111111100111", 
    53 => "10100111010111100000010000000011", 
    54 => "00010110000000001110000101110010", 
    55 => "10110001111000010111011000010000", 
    56 => "01100001011100011110111100100011", 
    57 => "00100000101100000100001100011100", 
    58 => "11111011001011011101010100010001", 
    59 => "10100011001100110110110100100011", 
    60 => "00100110110100100011111100010001", 
    61 => "00110110001100101111010111010100", 
    62 => "00110100000101101111000010101111", 
    63 => "11010010111001000011110011100010", 
    64 => "00100011010000011111000000110000", 
    65 => "11110111001011010010110000111111", 
    66 => "00001111010000011011001110011011", 
    67 => "11010011111100000010111011110001", 
    68 => "00100101010100010011001000001011", 
    69 => "00110111111100010001111101000000", 
    70 => "00100000001000100001111010101011", 
    71 => "11010010001000011110001100011100", 
    72 => "00010100011100111010111011101110", 
    73 => "00001111110111010111111101111010", 
    74 => "00111011101011000010000110111010", 
    75 => "11010010000100001011110100010001", 
    76 => "00000100010111001100000011001101", 
    77 => "11110011101000010110101100101101", 
    78 => "11001010000000001110111111000101", 
    79 => "10010011111111001001001100101111", 
    80 => "11101111110000010000001011111101", 
    81 => "10100000110000010001101011011101", 
    82 => "01001010000000001111000111101010", 
    83 => "00000001001011111010011001011111", 
    84 => "10010000000000001101110111011011", 
    85 => "00100001111011110000010111110101", 
    86 => "10010001000111100001111100011101", 
    87 => "00000000110111001010111000000000", 
    88 => "10101101000111011001111011011001", 
    89 => "00011111111111110001000111100000", 
    90 => "11011101101111100001000010101100", 
    91 => "11101110111100001001110011100000", 
    92 => "10101111111011111110111000011110", 
    93 => "00000000001111110011001111011100", 
    94 => "10111110000000101111001000001111", 
    95 => "11110100110101011001001000010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convckv is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convckv is
    component convDSPOpt_4_convckv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convckv_rom_U :  component convDSPOpt_4_convckv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


