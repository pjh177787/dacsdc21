-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convceu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convceu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11101110101001011110111111111111", 
    1 => "00011111001011111011010010100100", 
    2 => "11110010001100100000011100111100", 
    3 => "11111010101000010100000111011011", 
    4 => "00101100011111001110010011110000", 
    5 => "11110001000110110111011100110000", 
    6 => "00111001101010111011011000000000", 
    7 => "10110000010100100111010010111110", 
    8 => "11011001011111100000000011010100", 
    9 => "10110011001111010011010001111111", 
    10 => "00011101100100100010000111010111", 
    11 => "10010100111101001010001111001111", 
    12 => "11001111111000011101111100001100", 
    13 => "00111101111000001101110111101110", 
    14 => "01001011010000000001110100011101", 
    15 => "00011100000011011001010000110001", 
    16 => "11100000110001000010000011101110", 
    17 => "11111101101000011110111100001111", 
    18 => "00001010010111010010101011101010", 
    19 => "01011010001111001011110000100000", 
    20 => "11100101110001110100111111111101", 
    21 => "00010000111100100010111111011101", 
    22 => "11101111001011100010101111011001", 
    23 => "00101101001110011101000011111111", 
    24 => "01000010000100110111001111100010", 
    25 => "11001101000100011111001000100100", 
    26 => "01010110111111100010001000110000", 
    27 => "11100001101000000010010000000000", 
    28 => "01000000010100111111011100100110", 
    29 => "11101101011100111110001111011111", 
    30 => "01010011000111110100010100001111", 
    31 => "11110011101101010010011000011110", 
    32 => "11000011111100001111000100000011", 
    33 => "11101101010111101101000111101110", 
    34 => "11110010000110110011110011001111", 
    35 => "11010011110111001111010100111100", 
    36 => "11010101011100010001000000000000", 
    37 => "10111110111011110010111011010011", 
    38 => "11110000010100111101111010110010", 
    39 => "11110000001000100011110111011110", 
    40 => "01010010000100111101010011110011", 
    41 => "10100010000011110001100110100110", 
    42 => "00110000000011101010111111010110", 
    43 => "00001101001100000000101111100010", 
    44 => "00011011000100100000001011011101", 
    45 => "00000000010000011010101111001111", 
    46 => "11110000110000101011001011111111", 
    47 => "00111110111100010001110100001111", 
    48 => "11001110110000001101000111111011", 
    49 => "10110001110100000000111000000001", 
    50 => "00010011001100100001110100001111", 
    51 => "00000000001100101101111100010001", 
    52 => "00100001011100100010000111101001", 
    53 => "11010100000011101001011011110001", 
    54 => "01100001101000011100000101010000", 
    55 => "00011110000011101111010111100000", 
    56 => "01011110011111111111001010110110", 
    57 => "00100001110110100001011000011011", 
    58 => "00011010110111011101111111010101", 
    59 => "10010001111001000010111111001101", 
    60 => "00110001000001011110111000001101", 
    61 => "00001111000010011111111100111110", 
    62 => "11111110110100001111111111101101", 
    63 => "00100010000000100001110100011110", 
    64 => "11100101110111010000111001000001", 
    65 => "00011111000011010011000000011111", 
    66 => "11100110110101011111101111100011", 
    67 => "00010100000000100000101100001011", 
    68 => "10010101001110100110101100000011", 
    69 => "00000001000000101110101011111110", 
    70 => "11100111100100111101111000100101", 
    71 => "00100010111110110001000000000101", 
    72 => "11110001001100111110110111111111", 
    73 => "00010100000011101010110011101001", 
    74 => "11111111100111101111111000100000", 
    75 => "11110010101111000010111000101111", 
    76 => "11001111011111000000001011001110", 
    77 => "00001110101111101101111110011001", 
    78 => "11110011100100111110110011010010", 
    79 => "00000011111011000000111011100101", 
    80 => "11111011001111011100111110101101", 
    81 => "11000000101111100010110011111110", 
    82 => "11110000110011101110001011101111", 
    83 => "00100001110010110011101111110000", 
    84 => "10110001111110110111000000011101", 
    85 => "00111110111011110100001110011001", 
    86 => "11110000101011101100111001000010", 
    87 => "00000010111010110010000000010010", 
    88 => "10100010111111101111111100001111", 
    89 => "11010001111110100101101010110011", 
    90 => "11000011111000010000111011010010", 
    91 => "11101110110011011100111100000001", 
    92 => "01000100110100001001000111100000", 
    93 => "00000001000011011010101001110101", 
    94 => "10010011111100010001111000001110", 
    95 => "00011100000101011110110111001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convceu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convceu is
    component convDSPOpt_4_convceu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convceu_rom_U :  component convDSPOpt_4_convceu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


