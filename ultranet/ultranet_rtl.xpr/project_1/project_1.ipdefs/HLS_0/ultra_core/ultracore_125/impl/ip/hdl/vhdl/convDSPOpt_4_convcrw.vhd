-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convcrw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convcrw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00010010001111101111110100110000", 
    1 => "00100010000000011111001011110000", 
    2 => "11100010111100110000001011110000", 
    3 => "11110000111000100010110100010000", 
    4 => "10111101001100101101110010110001", 
    5 => "11111010000000001100001000101011", 
    6 => "11001001001000010011110100011100", 
    7 => "11111001110011000000100100110010", 
    8 => "00100000001100010111001011010001", 
    9 => "00100000110100010010000000010000", 
    10 => "00011100011111100010110111111101", 
    11 => "01001011010011111110100100101010", 
    12 => "01011111101111110010000000011110", 
    13 => "01001110001010101010111100001111", 
    14 => "01000010110110101110111100011011", 
    15 => "00001110000010100010111100010010", 
    16 => "11011110111000110010101011001111", 
    17 => "00011001111100101110001011101111", 
    18 => "10011011111011001110110011111011", 
    19 => "10111100110111101111101000111101", 
    20 => "00010100110000110001011110010011", 
    21 => "11010001110100101111000110110100", 
    22 => "10111011001011011110111001100000", 
    23 => "11111110000110111111000000101111", 
    24 => "00010101000101001111000000100000", 
    25 => "11111100111011111110110111011011", 
    26 => "00001111110111010000111011111110", 
    27 => "00011101101111100000111000100001", 
    28 => "10101100000100111111001110011111", 
    29 => "00011101010000111111110110010101", 
    30 => "11111011010011011111111011010000", 
    31 => "01001110111110101111111100110000", 
    32 => "10010001111010111100001011110001", 
    33 => "11100000000111110001011000000011", 
    34 => "11100111001111101010000011111111", 
    35 => "00101011010011001111001111000000", 
    36 => "00011110010111010011111100001101", 
    37 => "00111110111000000011000010011001", 
    38 => "11100010000011001111110110110000", 
    39 => "11011101110011111100101111101111", 
    40 => "00101110010110010000000100010001", 
    41 => "00010000000100010000010110011001", 
    42 => "11110000001110101100000011010010", 
    43 => "11100001111011101110010111000010", 
    44 => "00000100010010011110000000100001", 
    45 => "10111101000000101111001110011010", 
    46 => "00001111001010111100110011110011", 
    47 => "00010010111011011010011110111111", 
    48 => "11110000001000000001110011001111", 
    49 => "11110110000111011001001111100011", 
    50 => "00110000111000011110000001000001", 
    51 => "11111110001111110000010100010100", 
    52 => "11110000110111110001111111111100", 
    53 => "10110111111110101001010011011110", 
    54 => "00010000101100011101000100110001", 
    55 => "00001110000011101111001111110001", 
    56 => "11010000100100101111000100111010", 
    57 => "11010111110110111001010111010001", 
    58 => "00000101100101010010111111110010", 
    59 => "00001101001100101100001011101101", 
    60 => "00011100011000010000000111000010", 
    61 => "10110001001011110110111101101011", 
    62 => "00111011110110110000000101011111", 
    63 => "11101110110100010001000011111010", 
    64 => "11100100011111100011001011001100", 
    65 => "00110001110000000111101101111101", 
    66 => "00111101100111011010000010111111", 
    67 => "11010001111100011101111011111101", 
    68 => "00000011101111110001001000011100", 
    69 => "11010010110100000011111111111101", 
    70 => "11110000001011011100010011100001", 
    71 => "11110000000111101001011000010000", 
    72 => "00111110000000010010000111001101", 
    73 => "11111110111100011100001100001011", 
    74 => "00101110110000010011111011111111", 
    75 => "11100001110111011100111111110010", 
    76 => "00001111111100010100000111001111", 
    77 => "00010000110011111110000000010000", 
    78 => "00000001001000100011101111000010", 
    79 => "00101110000111011011111111011110", 
    80 => "00111100110011010001111111101111", 
    81 => "11101110000010101101110111110011", 
    82 => "11010001001000011101000110110010", 
    83 => "00101110010011010000110100010000", 
    84 => "11110011000000011111111100001110", 
    85 => "11010001000100110001000011010101", 
    86 => "11100101110111101111111000010000", 
    87 => "00011111111011010000000100000100", 
    88 => "11101101110000011110111000110001", 
    89 => "11111111001000011101000011000000", 
    90 => "11010011000111010000000100001111", 
    91 => "00001101110111010000001100000011", 
    92 => "11110000110000001011001001001111", 
    93 => "10111110010000011110001011001011", 
    94 => "11110010110111011101000011110010", 
    95 => "00011110111011101101010000100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convcrw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convcrw is
    component convDSPOpt_4_convcrw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convcrw_rom_U :  component convDSPOpt_4_convcrw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


