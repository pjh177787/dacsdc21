-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool2x2_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    vec_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    vec_V_V_empty_n : IN STD_LOGIC;
    vec_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    reps_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    reps_empty_n : IN STD_LOGIC;
    reps_read : OUT STD_LOGIC;
    reps_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    reps_out_full_n : IN STD_LOGIC;
    reps_out_write : OUT STD_LOGIC );
end;


architecture behav of max_pool2x2_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv41_0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv41_1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_const_lv10_140 : STD_LOGIC_VECTOR (9 downto 0) := "0101000000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal vec_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln35_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal and_ln51_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_reg_990_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reps_blk_n : STD_LOGIC;
    signal reps_out_blk_n : STD_LOGIC;
    signal indvar_flatten17_reg_203 : STD_LOGIC_VECTOR (40 downto 0);
    signal h_0_i_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_225 : STD_LOGIC_VECTOR (9 downto 0);
    signal peIdx_0_i_reg_236 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_0_i_reg_247 : STD_LOGIC_VECTOR (5 downto 0);
    signal reps_read_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bound4_fu_298_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal bound4_reg_956 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln35_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln35_5_fu_309_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln35_3_fu_335_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_3_reg_970 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_fu_343_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln35_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln35_reg_975_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_377_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_reg_979 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_3_fu_385_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_3_reg_984 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln51_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_reg_990_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal w_fu_403_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_4_fu_415_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln18_fu_446_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_reg_1004 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_8_fu_480_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_8_reg_1011 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_9_fu_514_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_9_reg_1018 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_10_fu_548_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_10_reg_1025 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_11_fu_582_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_11_reg_1032 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_12_fu_616_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_12_reg_1039 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_13_fu_650_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_13_reg_1046 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_14_fu_684_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_14_reg_1053 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_store_V_addr_reg_1060 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal row_store_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_store_V_ce0 : STD_LOGIC;
    signal row_store_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_store_V_ce1 : STD_LOGIC;
    signal row_store_V_we1 : STD_LOGIC;
    signal row_store_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_h_0_i_phi_fu_218_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_peIdx_0_i_phi_fu_240_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln49_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Repl2_s_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataOut0_V_fu_893_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_13_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln35_3_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln35_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_274_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_59_fu_286_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_shl22_fu_294_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_shl_fu_282_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal icmp_ln36_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln37_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_327_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln35_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal peIdx_fu_365_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln37_fu_393_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_2_fu_409_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_109_i_i_fu_430_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln647_fu_426_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_1_i_i_fu_464_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_108_1_i_i_fu_454_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_8_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_2_i_i_fu_498_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_108_2_i_i_fu_488_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_9_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_3_i_i_fu_532_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_108_3_i_i_fu_522_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_10_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_4_i_i_fu_566_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_108_4_i_i_fu_556_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_11_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_5_i_i_fu_600_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_108_5_i_i_fu_590_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_12_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_6_i_i_fu_634_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_108_6_i_i_fu_624_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_13_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_7_i_i_fu_668_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_108_7_i_i_fu_658_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_14_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_fu_423_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln2_fu_692_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal addr_fu_699_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln647_10_fu_723_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_15_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_1_i_fu_739_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_16_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_2_i_fu_761_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_17_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_3_i_fu_783_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_18_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_4_i_fu_805_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_19_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_5_i_fu_827_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_20_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_6_i_fu_849_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_21_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_109_7_i_fu_871_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_22_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_22_fu_886_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_21_fu_864_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_20_fu_842_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_19_fu_820_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_18_fu_798_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_17_fu_776_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_16_fu_754_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_15_fu_732_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max_pool2x2_1_rowcxx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    row_store_V_U : component max_pool2x2_1_rowcxx
    generic map (
        DataWidth => 32,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_store_V_address0,
        ce0 => row_store_V_ce0,
        q0 => row_store_V_q0,
        address1 => row_store_V_addr_reg_1060,
        ce1 => row_store_V_ce1,
        we1 => row_store_V_we1,
        d1 => row_store_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_0_i_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_reg_961 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                h_0_i_reg_214 <= select_ln35_3_reg_970;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                h_0_i_reg_214 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten17_reg_203 <= add_ln35_5_fu_309_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten17_reg_203 <= ap_const_lv41_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_225 <= select_ln36_4_fu_415_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_225 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    peIdx_0_i_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_reg_961 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                peIdx_0_i_reg_236 <= select_ln36_3_reg_984;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                peIdx_0_i_reg_236 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_0_i_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_0_i_reg_247 <= w_fu_403_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                w_0_i_reg_247 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln51_reg_990 <= and_ln51_fu_397_p2;
                select_ln36_reg_979 <= select_ln36_fu_377_p3;
                trunc_ln35_reg_975 <= trunc_ln35_fu_343_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln51_reg_990_pp0_iter1_reg <= and_ln51_reg_990;
                icmp_ln35_reg_961 <= icmp_ln35_fu_304_p2;
                trunc_ln35_reg_975_pp0_iter1_reg <= trunc_ln35_reg_975;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln51_reg_990_pp0_iter2_reg <= and_ln51_reg_990_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    bound4_reg_956(40 downto 9) <= bound4_fu_298_p2(40 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln51_reg_990_pp0_iter2_reg) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Repl2_13_fu_152 <= p_Repl2_s_fu_148;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln35_reg_975_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Repl2_s_fu_148 <= dataOut0_V_fu_893_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                reps_read_reg_950 <= reps_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_reg_961 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                row_store_V_addr_reg_1060 <= zext_ln49_fu_705_p1(9 - 1 downto 0);
                select_ln18_10_reg_1025 <= select_ln18_10_fu_548_p3;
                select_ln18_11_reg_1032 <= select_ln18_11_fu_582_p3;
                select_ln18_12_reg_1039 <= select_ln18_12_fu_616_p3;
                select_ln18_13_reg_1046 <= select_ln18_13_fu_650_p3;
                select_ln18_14_reg_1053 <= select_ln18_14_fu_684_p3;
                select_ln18_8_reg_1011 <= select_ln18_8_fu_480_p3;
                select_ln18_9_reg_1018 <= select_ln18_9_fu_514_p3;
                select_ln18_reg_1004 <= select_ln18_fu_446_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln35_3_reg_970 <= select_ln35_3_fu_335_p3;
                select_ln36_3_reg_984 <= select_ln36_3_fu_385_p3;
            end if;
        end if;
    end process;
    bound4_reg_956(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln35_fu_304_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln35_fu_304_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln35_fu_304_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln35_5_fu_309_p2 <= std_logic_vector(unsigned(indvar_flatten17_reg_203) + unsigned(ap_const_lv41_1));
    add_ln35_fu_268_p2 <= std_logic_vector(unsigned(shl_ln35_3_fu_263_p2) + unsigned(shl_ln35_fu_258_p2));
    add_ln36_2_fu_409_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_225) + unsigned(ap_const_lv10_1));
    addr_fu_699_p2 <= std_logic_vector(unsigned(zext_ln36_fu_423_p1) + unsigned(shl_ln2_fu_692_p3));
    and_ln35_fu_359_p2 <= (xor_ln35_fu_347_p2 and icmp_ln37_fu_353_p2);
    and_ln51_fu_397_p2 <= (trunc_ln37_fu_393_p1 and trunc_ln35_fu_343_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(vec_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_961, ap_enable_reg_pp0_iter3, and_ln51_reg_990_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_lv1_1 = and_ln51_reg_990_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln35_reg_961 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(vec_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_961, ap_enable_reg_pp0_iter3, and_ln51_reg_990_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_lv1_1 = and_ln51_reg_990_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln35_reg_961 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(vec_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_961, ap_enable_reg_pp0_iter3, and_ln51_reg_990_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_lv1_1 = and_ln51_reg_990_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln35_reg_961 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, reps_empty_n, reps_out_full_n)
    begin
                ap_block_state1 <= ((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(vec_V_V_empty_n, icmp_ln35_reg_961)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln35_reg_961 = ap_const_lv1_0) and (vec_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter3_assign_proc : process(out_V_V_full_n, and_ln51_reg_990_pp0_iter2_reg)
    begin
                ap_block_state6_pp0_stage0_iter3 <= ((ap_const_lv1_1 = and_ln51_reg_990_pp0_iter2_reg) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln35_fu_304_p2)
    begin
        if ((icmp_ln35_fu_304_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_h_0_i_phi_fu_218_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln35_reg_961, h_0_i_reg_214, select_ln35_3_reg_970)
    begin
        if (((icmp_ln35_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_h_0_i_phi_fu_218_p4 <= select_ln35_3_reg_970;
        else 
            ap_phi_mux_h_0_i_phi_fu_218_p4 <= h_0_i_reg_214;
        end if; 
    end process;


    ap_phi_mux_peIdx_0_i_phi_fu_240_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln35_reg_961, peIdx_0_i_reg_236, select_ln36_3_reg_984)
    begin
        if (((icmp_ln35_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_peIdx_0_i_phi_fu_240_p4 <= select_ln36_3_reg_984;
        else 
            ap_phi_mux_peIdx_0_i_phi_fu_240_p4 <= peIdx_0_i_reg_236;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound4_fu_298_p2 <= std_logic_vector(unsigned(p_shl22_fu_294_p1) + unsigned(p_shl_fu_282_p1));
    dataOut0_V_fu_893_p9 <= (((((((select_ln18_22_fu_886_p3 & select_ln18_21_fu_864_p3) & select_ln18_20_fu_842_p3) & select_ln18_19_fu_820_p3) & select_ln18_18_fu_798_p3) & select_ln18_17_fu_776_p3) & select_ln18_16_fu_754_p3) & select_ln18_15_fu_732_p3);
    h_fu_315_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_h_0_i_phi_fu_218_p4));
    icmp_ln35_fu_304_p2 <= "1" when (indvar_flatten17_reg_203 = bound4_reg_956) else "0";
    icmp_ln36_fu_321_p2 <= "1" when (indvar_flatten_reg_225 = ap_const_lv10_140) else "0";
    icmp_ln37_fu_353_p2 <= "1" when (w_0_i_reg_247 = ap_const_lv6_28) else "0";
    icmp_ln895_10_fu_542_p2 <= "1" when (unsigned(p_Result_109_3_i_i_fu_532_p4) > unsigned(p_Result_108_3_i_i_fu_522_p4)) else "0";
    icmp_ln895_11_fu_576_p2 <= "1" when (unsigned(p_Result_109_4_i_i_fu_566_p4) > unsigned(p_Result_108_4_i_i_fu_556_p4)) else "0";
    icmp_ln895_12_fu_610_p2 <= "1" when (unsigned(p_Result_109_5_i_i_fu_600_p4) > unsigned(p_Result_108_5_i_i_fu_590_p4)) else "0";
    icmp_ln895_13_fu_644_p2 <= "1" when (unsigned(p_Result_109_6_i_i_fu_634_p4) > unsigned(p_Result_108_6_i_i_fu_624_p4)) else "0";
    icmp_ln895_14_fu_678_p2 <= "1" when (unsigned(p_Result_109_7_i_i_fu_668_p4) > unsigned(p_Result_108_7_i_i_fu_658_p4)) else "0";
    icmp_ln895_15_fu_727_p2 <= "1" when (unsigned(trunc_ln647_10_fu_723_p1) > unsigned(select_ln18_reg_1004)) else "0";
    icmp_ln895_16_fu_749_p2 <= "1" when (unsigned(p_Result_109_1_i_fu_739_p4) > unsigned(select_ln18_8_reg_1011)) else "0";
    icmp_ln895_17_fu_771_p2 <= "1" when (unsigned(p_Result_109_2_i_fu_761_p4) > unsigned(select_ln18_9_reg_1018)) else "0";
    icmp_ln895_18_fu_793_p2 <= "1" when (unsigned(p_Result_109_3_i_fu_783_p4) > unsigned(select_ln18_10_reg_1025)) else "0";
    icmp_ln895_19_fu_815_p2 <= "1" when (unsigned(p_Result_109_4_i_fu_805_p4) > unsigned(select_ln18_11_reg_1032)) else "0";
    icmp_ln895_20_fu_837_p2 <= "1" when (unsigned(p_Result_109_5_i_fu_827_p4) > unsigned(select_ln18_12_reg_1039)) else "0";
    icmp_ln895_21_fu_859_p2 <= "1" when (unsigned(p_Result_109_6_i_fu_849_p4) > unsigned(select_ln18_13_reg_1046)) else "0";
    icmp_ln895_22_fu_881_p2 <= "1" when (unsigned(p_Result_109_7_i_fu_871_p4) > unsigned(select_ln18_14_reg_1053)) else "0";
    icmp_ln895_8_fu_474_p2 <= "1" when (unsigned(p_Result_109_1_i_i_fu_464_p4) > unsigned(p_Result_108_1_i_i_fu_454_p4)) else "0";
    icmp_ln895_9_fu_508_p2 <= "1" when (unsigned(p_Result_109_2_i_i_fu_498_p4) > unsigned(p_Result_108_2_i_i_fu_488_p4)) else "0";
    icmp_ln895_fu_440_p2 <= "1" when (unsigned(p_Result_109_i_i_fu_430_p4) > unsigned(trunc_ln647_fu_426_p1)) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    or_ln36_fu_371_p2 <= (icmp_ln36_fu_321_p2 or and_ln35_fu_359_p2);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln51_reg_990_pp0_iter2_reg)
    begin
        if (((ap_const_lv1_1 = and_ln51_reg_990_pp0_iter2_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (p_Repl2_s_fu_148 & p_Repl2_13_fu_152);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln51_reg_990_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln51_reg_990_pp0_iter2_reg) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_108_1_i_i_fu_454_p4 <= vec_V_V_dout(7 downto 4);
    p_Result_108_2_i_i_fu_488_p4 <= vec_V_V_dout(11 downto 8);
    p_Result_108_3_i_i_fu_522_p4 <= vec_V_V_dout(15 downto 12);
    p_Result_108_4_i_i_fu_556_p4 <= vec_V_V_dout(19 downto 16);
    p_Result_108_5_i_i_fu_590_p4 <= vec_V_V_dout(23 downto 20);
    p_Result_108_6_i_i_fu_624_p4 <= vec_V_V_dout(27 downto 24);
    p_Result_108_7_i_i_fu_658_p4 <= vec_V_V_dout(31 downto 28);
    p_Result_109_1_i_fu_739_p4 <= row_store_V_q0(7 downto 4);
    p_Result_109_1_i_i_fu_464_p4 <= vec_V_V_dout(39 downto 36);
    p_Result_109_2_i_fu_761_p4 <= row_store_V_q0(11 downto 8);
    p_Result_109_2_i_i_fu_498_p4 <= vec_V_V_dout(43 downto 40);
    p_Result_109_3_i_fu_783_p4 <= row_store_V_q0(15 downto 12);
    p_Result_109_3_i_i_fu_532_p4 <= vec_V_V_dout(47 downto 44);
    p_Result_109_4_i_fu_805_p4 <= row_store_V_q0(19 downto 16);
    p_Result_109_4_i_i_fu_566_p4 <= vec_V_V_dout(51 downto 48);
    p_Result_109_5_i_fu_827_p4 <= row_store_V_q0(23 downto 20);
    p_Result_109_5_i_i_fu_600_p4 <= vec_V_V_dout(55 downto 52);
    p_Result_109_6_i_fu_849_p4 <= row_store_V_q0(27 downto 24);
    p_Result_109_6_i_i_fu_634_p4 <= vec_V_V_dout(59 downto 56);
    p_Result_109_7_i_fu_871_p4 <= row_store_V_q0(31 downto 28);
    p_Result_109_7_i_i_fu_668_p4 <= vec_V_V_dout(63 downto 60);
    p_Result_109_i_i_fu_430_p4 <= vec_V_V_dout(35 downto 32);
    p_shl22_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_286_p3),41));
    p_shl_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_274_p3),41));
    peIdx_fu_365_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln35_fu_327_p3));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    reps_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_blk_n <= reps_empty_n;
        else 
            reps_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    reps_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_out_blk_n <= reps_out_full_n;
        else 
            reps_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    reps_out_din <= reps_dout;

    reps_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n)
    begin
        if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_out_write <= ap_const_logic_1;
        else 
            reps_out_write <= ap_const_logic_0;
        end if; 
    end process;


    reps_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n, reps_out_full_n)
    begin
        if ((not(((reps_out_full_n = ap_const_logic_0) or (reps_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_read <= ap_const_logic_1;
        else 
            reps_read <= ap_const_logic_0;
        end if; 
    end process;

    row_store_V_address0 <= zext_ln49_fu_705_p1(9 - 1 downto 0);

    row_store_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_store_V_ce0 <= ap_const_logic_1;
        else 
            row_store_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_store_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_store_V_ce1 <= ap_const_logic_1;
        else 
            row_store_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    row_store_V_d1 <= (((((((select_ln18_14_reg_1053 & select_ln18_13_reg_1046) & select_ln18_12_reg_1039) & select_ln18_11_reg_1032) & select_ln18_10_reg_1025) & select_ln18_9_reg_1018) & select_ln18_8_reg_1011) & select_ln18_reg_1004);

    row_store_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln35_reg_975_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln35_reg_975_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_store_V_we1 <= ap_const_logic_1;
        else 
            row_store_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln18_10_fu_548_p3 <= 
        p_Result_109_3_i_i_fu_532_p4 when (icmp_ln895_10_fu_542_p2(0) = '1') else 
        p_Result_108_3_i_i_fu_522_p4;
    select_ln18_11_fu_582_p3 <= 
        p_Result_109_4_i_i_fu_566_p4 when (icmp_ln895_11_fu_576_p2(0) = '1') else 
        p_Result_108_4_i_i_fu_556_p4;
    select_ln18_12_fu_616_p3 <= 
        p_Result_109_5_i_i_fu_600_p4 when (icmp_ln895_12_fu_610_p2(0) = '1') else 
        p_Result_108_5_i_i_fu_590_p4;
    select_ln18_13_fu_650_p3 <= 
        p_Result_109_6_i_i_fu_634_p4 when (icmp_ln895_13_fu_644_p2(0) = '1') else 
        p_Result_108_6_i_i_fu_624_p4;
    select_ln18_14_fu_684_p3 <= 
        p_Result_109_7_i_i_fu_668_p4 when (icmp_ln895_14_fu_678_p2(0) = '1') else 
        p_Result_108_7_i_i_fu_658_p4;
    select_ln18_15_fu_732_p3 <= 
        trunc_ln647_10_fu_723_p1 when (icmp_ln895_15_fu_727_p2(0) = '1') else 
        select_ln18_reg_1004;
    select_ln18_16_fu_754_p3 <= 
        p_Result_109_1_i_fu_739_p4 when (icmp_ln895_16_fu_749_p2(0) = '1') else 
        select_ln18_8_reg_1011;
    select_ln18_17_fu_776_p3 <= 
        p_Result_109_2_i_fu_761_p4 when (icmp_ln895_17_fu_771_p2(0) = '1') else 
        select_ln18_9_reg_1018;
    select_ln18_18_fu_798_p3 <= 
        p_Result_109_3_i_fu_783_p4 when (icmp_ln895_18_fu_793_p2(0) = '1') else 
        select_ln18_10_reg_1025;
    select_ln18_19_fu_820_p3 <= 
        p_Result_109_4_i_fu_805_p4 when (icmp_ln895_19_fu_815_p2(0) = '1') else 
        select_ln18_11_reg_1032;
    select_ln18_20_fu_842_p3 <= 
        p_Result_109_5_i_fu_827_p4 when (icmp_ln895_20_fu_837_p2(0) = '1') else 
        select_ln18_12_reg_1039;
    select_ln18_21_fu_864_p3 <= 
        p_Result_109_6_i_fu_849_p4 when (icmp_ln895_21_fu_859_p2(0) = '1') else 
        select_ln18_13_reg_1046;
    select_ln18_22_fu_886_p3 <= 
        p_Result_109_7_i_fu_871_p4 when (icmp_ln895_22_fu_881_p2(0) = '1') else 
        select_ln18_14_reg_1053;
    select_ln18_8_fu_480_p3 <= 
        p_Result_109_1_i_i_fu_464_p4 when (icmp_ln895_8_fu_474_p2(0) = '1') else 
        p_Result_108_1_i_i_fu_454_p4;
    select_ln18_9_fu_514_p3 <= 
        p_Result_109_2_i_i_fu_498_p4 when (icmp_ln895_9_fu_508_p2(0) = '1') else 
        p_Result_108_2_i_i_fu_488_p4;
    select_ln18_fu_446_p3 <= 
        p_Result_109_i_i_fu_430_p4 when (icmp_ln895_fu_440_p2(0) = '1') else 
        trunc_ln647_fu_426_p1;
    select_ln35_3_fu_335_p3 <= 
        h_fu_315_p2 when (icmp_ln36_fu_321_p2(0) = '1') else 
        ap_phi_mux_h_0_i_phi_fu_218_p4;
    select_ln35_fu_327_p3 <= 
        ap_const_lv4_0 when (icmp_ln36_fu_321_p2(0) = '1') else 
        ap_phi_mux_peIdx_0_i_phi_fu_240_p4;
    select_ln36_3_fu_385_p3 <= 
        peIdx_fu_365_p2 when (and_ln35_fu_359_p2(0) = '1') else 
        select_ln35_fu_327_p3;
    select_ln36_4_fu_415_p3 <= 
        ap_const_lv10_1 when (icmp_ln36_fu_321_p2(0) = '1') else 
        add_ln36_2_fu_409_p2;
    select_ln36_fu_377_p3 <= 
        ap_const_lv6_0 when (or_ln36_fu_371_p2(0) = '1') else 
        w_0_i_reg_247;
    shl_ln2_fu_692_p3 <= (select_ln36_reg_979 & ap_const_lv3_0);
    shl_ln35_3_fu_263_p2 <= std_logic_vector(shift_left(unsigned(reps_read_reg_950),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln35_fu_258_p2 <= std_logic_vector(shift_left(unsigned(reps_read_reg_950),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_59_fu_286_p3 <= (add_ln35_fu_268_p2 & ap_const_lv6_0);
    tmp_s_fu_274_p3 <= (add_ln35_fu_268_p2 & ap_const_lv8_0);
    trunc_ln35_fu_343_p1 <= select_ln35_3_fu_335_p3(1 - 1 downto 0);
    trunc_ln37_fu_393_p1 <= select_ln36_fu_377_p3(1 - 1 downto 0);
    trunc_ln647_10_fu_723_p1 <= row_store_V_q0(4 - 1 downto 0);
    trunc_ln647_fu_426_p1 <= vec_V_V_dout(4 - 1 downto 0);

    vec_V_V_blk_n_assign_proc : process(vec_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln35_reg_961)
    begin
        if (((icmp_ln35_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vec_V_V_blk_n <= vec_V_V_empty_n;
        else 
            vec_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vec_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln35_reg_961, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln35_reg_961 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            vec_V_V_read <= ap_const_logic_1;
        else 
            vec_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    w_fu_403_p2 <= std_logic_vector(unsigned(select_ln36_fu_377_p3) + unsigned(ap_const_lv6_1));
    xor_ln35_fu_347_p2 <= (icmp_ln36_fu_321_p2 xor ap_const_lv1_1);
    zext_ln36_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_3_reg_984),9));
    zext_ln49_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr_fu_699_p2),64));
end behav;
