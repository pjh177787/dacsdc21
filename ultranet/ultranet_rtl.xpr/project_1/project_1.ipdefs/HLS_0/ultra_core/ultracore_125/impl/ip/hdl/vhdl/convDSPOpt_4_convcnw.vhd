-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convcnw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convcnw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00101010111011110001101011110001", 
    1 => "10101100111010111011000010010001", 
    2 => "11010001001111101101001101000011", 
    3 => "11101101000011110000110000000110", 
    4 => "00100001011100110000001000110010", 
    5 => "10101101000000010001001111011111", 
    6 => "11101111100111001011010000100101", 
    7 => "10100010001000011101101000011011", 
    8 => "00101111001000010000001111110010", 
    9 => "10110001110010111110100111111100", 
    10 => "11111001100100111111110000000010", 
    11 => "11110100000000000000100111110001", 
    12 => "00110000010111011100001000101101", 
    13 => "10110001011011000011010100000001", 
    14 => "11010010110101001011001001010010", 
    15 => "00000000001100100000111011101101", 
    16 => "11101010000001010001111001011011", 
    17 => "00011111001111100101001111110111", 
    18 => "00010001000000111111111011101111", 
    19 => "00000010111000000000110101011111", 
    20 => "11101110000100011111001011100010", 
    21 => "00101011100100101101000111111111", 
    22 => "00010000000111010101111010111100", 
    23 => "11110010111000001011001001100001", 
    24 => "11110000111000111110000111011001", 
    25 => "11100001111111011110111111111110", 
    26 => "00111100110000000011111000011010", 
    27 => "00010000001011111011000000100000", 
    28 => "00001110000001110011000111110001", 
    29 => "11100101110111001010111110100000", 
    30 => "00011101111000000001110011111010", 
    31 => "00010011111011111001001001001100", 
    32 => "00011011100101111111111111011110", 
    33 => "11110001111100001010111111011101", 
    34 => "00001001110100010000110100101111", 
    35 => "00100100000011011100000100100000", 
    36 => "01101111101110101011010111110111", 
    37 => "10010010010100000110110111101011", 
    38 => "00101110001011011011011110110000", 
    39 => "11000101000101011011011110110110", 
    40 => "11101100110010101111101111111011", 
    41 => "10100100011111100010001000000101", 
    42 => "10100000110000011011000011010011", 
    43 => "00100010101111100001111111110000", 
    44 => "11001100000101000011111101010010", 
    45 => "01011011110111011111000110110010", 
    46 => "11010100111100010011110000000011", 
    47 => "00011110111111110001111001001111", 
    48 => "01001011001000011100010100001111", 
    49 => "00110010111111111111111111100001", 
    50 => "00011110001000100000001000110010", 
    51 => "11101110000101000001111001111101", 
    52 => "00011110111001001101001011100001", 
    53 => "11000010111010101110100100110000", 
    54 => "10101001000111011111010001100001", 
    55 => "10100001000100101111000000000001", 
    56 => "11110101110000111001000010100010", 
    57 => "00001111111000001101111100100001", 
    58 => "11101011111111100011000101000010", 
    59 => "11110110111000000001001001001111", 
    60 => "10111110110000001111000110101111", 
    61 => "00101110111111110001000011010100", 
    62 => "11101110000111011110111000001100", 
    63 => "00000010111011001110001111010001", 
    64 => "10110001101111110011001011100001", 
    65 => "00011101000011101010000011100111", 
    66 => "11100000111111110000111000001101", 
    67 => "00010000111111100000001111110000", 
    68 => "11010011101111000101000000000000", 
    69 => "11111101111111101011111011010111", 
    70 => "00011110010111101111000000101110", 
    71 => "00100001111111100011000000001110", 
    72 => "00110001111000101110000110110000", 
    73 => "00001010111101011110001011100101", 
    74 => "00001111010011001111000111000000", 
    75 => "11001011010111001101000101101110", 
    76 => "00001110001100001110010111010011", 
    77 => "10101110110100001111010010110111", 
    78 => "10111011000010111011110100001110", 
    79 => "11001111010100000001000101001001", 
    80 => "10010101001000001110010000010000", 
    81 => "11110011001011010101011100001111", 
    82 => "00011111111100011100111110101110", 
    83 => "10111101001100111110001011111001", 
    84 => "11111110011111001011000000110001", 
    85 => "00001110000011100111001101100011", 
    86 => "00010000110000001011110100011111", 
    87 => "00000000110000000101101011101010", 
    88 => "00000111011111011110111100111110", 
    89 => "00010000100100100111101011011001", 
    90 => "00001111000000111101001111110111", 
    91 => "00000011000000010000000011011110", 
    92 => "11110111100110111011111000100010", 
    93 => "11100110100100001011100111011100", 
    94 => "10100001001001001100010001110100", 
    95 => "00010011111100101011010011111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convcnw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convcnw is
    component convDSPOpt_4_convcnw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convcnw_rom_U :  component convDSPOpt_4_convcnw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


