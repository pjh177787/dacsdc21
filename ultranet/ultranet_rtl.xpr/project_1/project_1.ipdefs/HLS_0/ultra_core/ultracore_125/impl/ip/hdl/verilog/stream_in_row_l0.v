// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stream_in_row_l0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        row_buffer_0_V_address1,
        row_buffer_0_V_ce1,
        row_buffer_0_V_we1,
        row_buffer_0_V_d1,
        row_buffer_1_V_address1,
        row_buffer_1_V_ce1,
        row_buffer_1_V_we1,
        row_buffer_1_V_d1,
        row_buffer_2_V_address1,
        row_buffer_2_V_ce1,
        row_buffer_2_V_we1,
        row_buffer_2_V_d1,
        row_buffer_3_V_address1,
        row_buffer_3_V_ce1,
        row_buffer_3_V_we1,
        row_buffer_3_V_d1,
        skip_flag,
        rowBufferIdx_V
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [8:0] row_buffer_0_V_address1;
output   row_buffer_0_V_ce1;
output   row_buffer_0_V_we1;
output  [23:0] row_buffer_0_V_d1;
output  [8:0] row_buffer_1_V_address1;
output   row_buffer_1_V_ce1;
output   row_buffer_1_V_we1;
output  [23:0] row_buffer_1_V_d1;
output  [8:0] row_buffer_2_V_address1;
output   row_buffer_2_V_ce1;
output   row_buffer_2_V_we1;
output  [23:0] row_buffer_2_V_d1;
output  [8:0] row_buffer_3_V_address1;
output   row_buffer_3_V_ce1;
output   row_buffer_3_V_we1;
output  [23:0] row_buffer_3_V_d1;
input   skip_flag;
input  [1:0] rowBufferIdx_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_read;
reg row_buffer_0_V_ce1;
reg row_buffer_0_V_we1;
reg row_buffer_1_V_ce1;
reg row_buffer_1_V_we1;
reg row_buffer_2_V_ce1;
reg row_buffer_2_V_we1;
reg row_buffer_3_V_ce1;
reg row_buffer_3_V_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln22_reg_231;
reg   [0:0] empty_82_reg_240;
reg   [8:0] w_0_reg_158;
reg   [8:0] w_0_reg_158_pp0_iter1_reg;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op22_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] rowBufferIdx_V_read_read_fu_72_p2;
wire   [0:0] skip_flag_read_read_fu_78_p2;
wire   [0:0] icmp_ln22_fu_185_p2;
wire   [8:0] w_fu_191_p2;
reg   [8:0] w_reg_235;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] empty_82_fu_209_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg   [8:0] ap_phi_mux_w_0_phi_fu_162_p4;
wire   [23:0] ap_phi_reg_pp0_iter0_p_016_0_reg_170;
reg   [23:0] ap_phi_reg_pp0_iter1_p_016_0_reg_170;
reg   [23:0] ap_phi_reg_pp0_iter2_p_016_0_reg_170;
wire   [63:0] zext_ln30_fu_215_p1;
wire   [0:0] empty_81_fu_203_p2;
wire   [0:0] empty_80_fu_197_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_109;
reg    ap_condition_132;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_109)) begin
        if (((icmp_ln22_fu_185_p2 == 1'd0) & (empty_82_fu_209_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_p_016_0_reg_170 <= 24'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_016_0_reg_170 <= ap_phi_reg_pp0_iter0_p_016_0_reg_170;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_132)) begin
        if (((empty_82_reg_240 == 1'd0) & (icmp_ln22_reg_231 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_016_0_reg_170 <= in_V_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_016_0_reg_170 <= ap_phi_reg_pp0_iter1_p_016_0_reg_170;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (skip_flag_read_read_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_0_reg_158 <= 9'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln22_reg_231 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_0_reg_158 <= w_reg_235;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln22_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_82_reg_240 <= empty_82_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln22_reg_231 <= icmp_ln22_fu_185_p2;
        w_0_reg_158_pp0_iter1_reg <= w_0_reg_158;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w_reg_235 <= w_fu_191_p2;
    end
end

always @ (*) begin
    if ((icmp_ln22_fu_185_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_w_0_phi_fu_162_p4 = w_reg_235;
    end else begin
        ap_phi_mux_w_0_phi_fu_162_p4 = w_0_reg_158;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((empty_82_reg_240 == 1'd0) & (icmp_ln22_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op22_read_state3 == 1'b1))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        row_buffer_0_V_ce1 = 1'b1;
    end else begin
        row_buffer_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((rowBufferIdx_V_read_read_fu_72_p2 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        row_buffer_0_V_we1 = 1'b1;
    end else begin
        row_buffer_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        row_buffer_1_V_ce1 = 1'b1;
    end else begin
        row_buffer_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((rowBufferIdx_V_read_read_fu_72_p2 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        row_buffer_1_V_we1 = 1'b1;
    end else begin
        row_buffer_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        row_buffer_2_V_ce1 = 1'b1;
    end else begin
        row_buffer_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((rowBufferIdx_V_read_read_fu_72_p2 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        row_buffer_2_V_we1 = 1'b1;
    end else begin
        row_buffer_2_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        row_buffer_3_V_ce1 = 1'b1;
    end else begin
        row_buffer_3_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((rowBufferIdx_V_read_read_fu_72_p2 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        row_buffer_3_V_we1 = 1'b1;
    end else begin
        row_buffer_3_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (skip_flag_read_read_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((skip_flag_read_read_fu_78_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln22_fu_185_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln22_fu_185_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op22_read_state3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op22_read_state3 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((in_V_V_empty_n == 1'b0) & (ap_predicate_op22_read_state3 == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_109 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_132 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_016_0_reg_170 = 'bx;

always @ (*) begin
    ap_predicate_op22_read_state3 = ((empty_82_reg_240 == 1'd0) & (icmp_ln22_reg_231 == 1'd0));
end

assign empty_80_fu_197_p2 = ((ap_phi_mux_w_0_phi_fu_162_p4 == 9'd321) ? 1'b1 : 1'b0);

assign empty_81_fu_203_p2 = ((ap_phi_mux_w_0_phi_fu_162_p4 == 9'd0) ? 1'b1 : 1'b0);

assign empty_82_fu_209_p2 = (empty_81_fu_203_p2 | empty_80_fu_197_p2);

assign icmp_ln22_fu_185_p2 = ((ap_phi_mux_w_0_phi_fu_162_p4 == 9'd322) ? 1'b1 : 1'b0);

assign rowBufferIdx_V_read_read_fu_72_p2 = rowBufferIdx_V;

assign row_buffer_0_V_address1 = zext_ln30_fu_215_p1;

assign row_buffer_0_V_d1 = ap_phi_reg_pp0_iter2_p_016_0_reg_170;

assign row_buffer_1_V_address1 = zext_ln30_fu_215_p1;

assign row_buffer_1_V_d1 = ap_phi_reg_pp0_iter2_p_016_0_reg_170;

assign row_buffer_2_V_address1 = zext_ln30_fu_215_p1;

assign row_buffer_2_V_d1 = ap_phi_reg_pp0_iter2_p_016_0_reg_170;

assign row_buffer_3_V_address1 = zext_ln30_fu_215_p1;

assign row_buffer_3_V_d1 = ap_phi_reg_pp0_iter2_p_016_0_reg_170;

assign skip_flag_read_read_fu_78_p2 = skip_flag;

assign w_fu_191_p2 = (ap_phi_mux_w_0_phi_fu_162_p4 + 9'd1);

assign zext_ln30_fu_215_p1 = w_0_reg_158_pp0_iter1_reg;

endmodule //stream_in_row_l0
