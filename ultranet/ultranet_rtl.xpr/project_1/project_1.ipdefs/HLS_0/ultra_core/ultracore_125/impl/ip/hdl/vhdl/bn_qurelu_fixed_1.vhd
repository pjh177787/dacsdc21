-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bn_qurelu_fixed_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (16 downto 0);
    inc_V : IN STD_LOGIC_VECTOR (11 downto 0);
    bias_V : IN STD_LOGIC_VECTOR (20 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of bn_qurelu_fixed_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv21_4000 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal bias_V_read_reg_140 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ret_V_fu_134_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_reg_145 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1353_fu_60_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1353_reg_151 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln1353_fu_60_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln215_81_fu_69_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1352_fu_66_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_131_fu_72_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1353_fu_84_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_130_fu_87_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_130_fu_87_p2 : signal is "no";
    signal tmp_fu_92_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln895_71_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_108_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln192_fu_118_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_134_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal res_V_fu_126_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_int_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_134_p00 : STD_LOGIC_VECTOR (28 downto 0);

    component ultra_net_mul_mulbQq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    ultra_net_mul_mulbQq_U381 : component ultra_net_mul_mulbQq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 17,
        dout_WIDTH => 29)
    port map (
        din0 => ret_V_fu_134_p0,
        din1 => in_V,
        dout => ret_V_fu_134_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then
                add_ln1353_reg_151 <= add_ln1353_fu_60_p2;
                bias_V_read_reg_140 <= bias_V;
                ret_V_reg_145 <= ret_V_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= res_V_fu_126_p3;
            end if;
        end if;
    end process;
    add_ln1353_fu_60_p1 <= bias_V;
    add_ln1353_fu_60_p2 <= std_logic_vector(unsigned(ap_const_lv21_4000) + unsigned(add_ln1353_fu_60_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(res_V_fu_126_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= res_V_fu_126_p3;
        end if; 
    end process;

    icmp_ln895_71_fu_102_p2 <= "0" when (tmp_fu_92_p4 = ap_const_lv10_0) else "1";
    icmp_ln895_fu_78_p2 <= "1" when (signed(ret_V_131_fu_72_p2) > signed(ap_const_lv30_0)) else "0";
    res_V_fu_126_p3 <= 
        select_ln192_fu_118_p3 when (icmp_ln895_fu_78_p2(0) = '1') else 
        ap_const_lv4_0;
    ret_V_130_fu_87_p2 <= std_logic_vector(signed(ret_V_reg_145) + signed(sext_ln1353_fu_84_p1));
    ret_V_131_fu_72_p2 <= std_logic_vector(signed(sext_ln215_81_fu_69_p1) + signed(sext_ln1352_fu_66_p1));
    ret_V_fu_134_p0 <= ret_V_fu_134_p00(12 - 1 downto 0);
    ret_V_fu_134_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inc_V),29));
    select_ln192_fu_118_p3 <= 
        ap_const_lv4_F when (icmp_ln895_71_fu_102_p2(0) = '1') else 
        trunc_ln_fu_108_p4;
        sext_ln1352_fu_66_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_145),30));

        sext_ln1353_fu_84_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1353_reg_151),29));

        sext_ln215_81_fu_69_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_read_reg_140),30));

    tmp_fu_92_p4 <= ret_V_130_fu_87_p2(28 downto 19);
    trunc_ln_fu_108_p4 <= ret_V_130_fu_87_p2(18 downto 15);
end behav;
