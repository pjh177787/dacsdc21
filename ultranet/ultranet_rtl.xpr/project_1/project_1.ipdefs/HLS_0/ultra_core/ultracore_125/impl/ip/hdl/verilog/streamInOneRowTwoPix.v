// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module streamInOneRowTwoPix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        row_buffer_0_V_address1,
        row_buffer_0_V_ce1,
        row_buffer_0_V_we1,
        row_buffer_0_V_d1,
        row_buffer_1_V_address1,
        row_buffer_1_V_ce1,
        row_buffer_1_V_we1,
        row_buffer_1_V_d1,
        skip_flag,
        rowBufferIdx_V
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [9:0] row_buffer_0_V_address1;
output   row_buffer_0_V_ce1;
output   row_buffer_0_V_we1;
output  [7:0] row_buffer_0_V_d1;
output  [9:0] row_buffer_1_V_address1;
output   row_buffer_1_V_ce1;
output   row_buffer_1_V_we1;
output  [7:0] row_buffer_1_V_d1;
input   skip_flag;
input  [0:0] rowBufferIdx_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_read;
reg[9:0] row_buffer_0_V_address1;
reg row_buffer_0_V_ce1;
reg row_buffer_0_V_we1;
reg[7:0] row_buffer_0_V_d1;
reg[9:0] row_buffer_1_V_address1;
reg row_buffer_1_V_ce1;
reg row_buffer_1_V_we1;
reg[7:0] row_buffer_1_V_d1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln29_reg_453;
reg   [8:0] indvar_flatten13_reg_164;
reg   [4:0] s_0_reg_175;
reg   [5:0] indvar_flatten_reg_186;
reg   [1:0] p_0_reg_197;
reg   [3:0] w_0_reg_208;
wire   [0:0] skip_flag_read_read_fu_102_p2;
wire   [8:0] select_ln321_fu_219_p3;
reg   [8:0] select_ln321_reg_443;
wire   [10:0] add_ln321_fu_247_p2;
reg   [10:0] add_ln321_reg_448;
wire   [0:0] icmp_ln29_fu_253_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] add_ln29_fu_259_p2;
reg   [8:0] add_ln29_reg_457;
wire   [0:0] icmp_ln30_fu_271_p2;
reg   [0:0] icmp_ln30_reg_462;
wire   [4:0] select_ln29_1_fu_285_p3;
reg   [4:0] select_ln29_1_reg_467;
wire   [3:0] select_ln321_1_fu_333_p3;
reg   [3:0] select_ln321_1_reg_473;
wire   [0:0] select_ln321_2_fu_345_p3;
reg   [0:0] select_ln321_2_reg_479;
wire   [1:0] select_ln30_fu_353_p3;
reg   [1:0] select_ln30_reg_483;
wire   [5:0] add_ln30_1_fu_361_p2;
reg   [5:0] add_ln30_1_reg_488;
reg   [7:0] Part1_V_reg_493;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
wire   [10:0] add_ln321_3_fu_418_p2;
reg   [10:0] add_ln321_3_reg_499;
wire   [3:0] w_fu_423_p2;
reg   [3:0] w_reg_504;
wire   [5:0] select_ln30_1_fu_428_p3;
reg   [5:0] select_ln30_1_reg_509;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg   [8:0] ap_phi_mux_indvar_flatten13_phi_fu_168_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_s_0_phi_fu_179_p4;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_190_p4;
reg   [1:0] ap_phi_mux_p_0_phi_fu_201_p4;
reg   [3:0] ap_phi_mux_w_0_phi_fu_212_p4;
wire   [63:0] zext_ln321_16_fu_412_p1;
wire   [63:0] zext_ln321_17_fu_434_p1;
wire   [7:0] Part2_V_fu_380_p1;
wire   [10:0] p_shl1_cast_fu_237_p4;
wire   [10:0] p_shl_cast_fu_227_p4;
wire   [4:0] s_fu_265_p2;
wire   [0:0] trunc_ln321_fu_299_p1;
wire   [0:0] xor_ln29_fu_293_p2;
wire   [0:0] icmp_ln31_fu_309_p2;
wire   [1:0] select_ln29_fu_277_p3;
wire   [0:0] and_ln29_1_fu_315_p2;
wire   [0:0] or_ln321_fu_327_p2;
wire   [1:0] p_fu_321_p2;
wire   [0:0] trunc_ln321_1_fu_341_p1;
wire   [0:0] and_ln29_fu_303_p2;
wire   [7:0] zext_ln29_fu_367_p1;
wire   [7:0] shl_ln_fu_386_p3;
wire   [7:0] add_ln36_fu_393_p2;
wire   [8:0] zext_ln321_15_fu_403_p1;
wire   [8:0] add_ln321_2_fu_407_p2;
wire   [10:0] zext_ln321_fu_399_p1;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln29_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten13_reg_164 <= add_ln29_reg_457;
    end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_164 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln29_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_186 <= select_ln30_1_reg_509;
    end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_186 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln29_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_0_reg_197 <= select_ln30_reg_483;
    end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_reg_197 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln29_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        s_0_reg_175 <= select_ln29_1_reg_467;
    end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        s_0_reg_175 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln29_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        w_0_reg_208 <= w_reg_504;
    end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_0_reg_208 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Part1_V_reg_493 <= {{in_V_V_dout[15:8]}};
        add_ln321_3_reg_499 <= add_ln321_3_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln29_reg_457 <= add_ln29_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln29_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln30_1_reg_488 <= add_ln30_1_fu_361_p2;
        icmp_ln30_reg_462 <= icmp_ln30_fu_271_p2;
        select_ln321_1_reg_473 <= select_ln321_1_fu_333_p3;
        select_ln321_2_reg_479 <= select_ln321_2_fu_345_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (skip_flag_read_read_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln321_reg_448[10 : 5] <= add_ln321_fu_247_p2[10 : 5];
        select_ln321_reg_443[5] <= select_ln321_fu_219_p3[5];
select_ln321_reg_443[7] <= select_ln321_fu_219_p3[7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln29_reg_453 <= icmp_ln29_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln29_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln29_1_reg_467 <= select_ln29_1_fu_285_p3;
        select_ln30_reg_483 <= select_ln30_fu_353_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_reg_453 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln30_1_reg_509 <= select_ln30_1_fu_428_p3;
        w_reg_504 <= w_fu_423_p2;
    end
end

always @ (*) begin
    if ((icmp_ln29_fu_253_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_168_p4 = add_ln29_reg_457;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_168_p4 = indvar_flatten13_reg_164;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_190_p4 = select_ln30_1_reg_509;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_190_p4 = indvar_flatten_reg_186;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_p_0_phi_fu_201_p4 = select_ln30_reg_483;
    end else begin
        ap_phi_mux_p_0_phi_fu_201_p4 = p_0_reg_197;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_s_0_phi_fu_179_p4 = select_ln29_1_reg_467;
    end else begin
        ap_phi_mux_s_0_phi_fu_179_p4 = s_0_reg_175;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_w_0_phi_fu_212_p4 = w_reg_504;
    end else begin
        ap_phi_mux_w_0_phi_fu_212_p4 = w_0_reg_208;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_453 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        row_buffer_0_V_address1 = zext_ln321_17_fu_434_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        row_buffer_0_V_address1 = zext_ln321_16_fu_412_p1;
    end else begin
        row_buffer_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        row_buffer_0_V_ce1 = 1'b1;
    end else begin
        row_buffer_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        row_buffer_0_V_d1 = Part1_V_reg_493;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        row_buffer_0_V_d1 = Part2_V_fu_380_p1;
    end else begin
        row_buffer_0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (select_ln321_2_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((select_ln321_2_reg_479 == 1'd0) & (icmp_ln29_reg_453 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        row_buffer_0_V_we1 = 1'b1;
    end else begin
        row_buffer_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        row_buffer_1_V_address1 = zext_ln321_17_fu_434_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        row_buffer_1_V_address1 = zext_ln321_16_fu_412_p1;
    end else begin
        row_buffer_1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        row_buffer_1_V_ce1 = 1'b1;
    end else begin
        row_buffer_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        row_buffer_1_V_d1 = Part1_V_reg_493;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        row_buffer_1_V_d1 = Part2_V_fu_380_p1;
    end else begin
        row_buffer_1_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln321_2_reg_479 == 1'd1)) | ((icmp_ln29_reg_453 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (select_ln321_2_reg_479 == 1'd1)))) begin
        row_buffer_1_V_we1 = 1'b1;
    end else begin
        row_buffer_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (skip_flag_read_read_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (skip_flag_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln29_fu_253_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln29_fu_253_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Part2_V_fu_380_p1 = in_V_V_dout[7:0];

assign add_ln29_fu_259_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_168_p4 + 9'd1);

assign add_ln30_1_fu_361_p2 = (ap_phi_mux_indvar_flatten_phi_fu_190_p4 + 6'd1);

assign add_ln321_2_fu_407_p2 = (select_ln321_reg_443 + zext_ln321_15_fu_403_p1);

assign add_ln321_3_fu_418_p2 = (add_ln321_reg_448 + zext_ln321_fu_399_p1);

assign add_ln321_fu_247_p2 = (p_shl1_cast_fu_237_p4 + p_shl_cast_fu_227_p4);

assign add_ln36_fu_393_p2 = (zext_ln29_fu_367_p1 + shl_ln_fu_386_p3);

assign and_ln29_1_fu_315_p2 = (xor_ln29_fu_293_p2 & icmp_ln31_fu_309_p2);

assign and_ln29_fu_303_p2 = (xor_ln29_fu_293_p2 & trunc_ln321_fu_299_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln29_reg_453 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln29_reg_453 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln29_reg_453 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln29_fu_253_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_168_p4 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_271_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_190_p4 == 6'd20) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_309_p2 = ((ap_phi_mux_w_0_phi_fu_212_p4 == 4'd10) ? 1'b1 : 1'b0);

assign or_ln321_fu_327_p2 = (icmp_ln30_fu_271_p2 | and_ln29_1_fu_315_p2);

assign p_fu_321_p2 = (2'd1 + select_ln29_fu_277_p3);

assign p_shl1_cast_fu_237_p4 = {{{{5'd1}, {rowBufferIdx_V}}}, {5'd0}};

assign p_shl_cast_fu_227_p4 = {{{{3'd1}, {rowBufferIdx_V}}}, {7'd0}};

assign s_fu_265_p2 = (5'd1 + ap_phi_mux_s_0_phi_fu_179_p4);

assign select_ln29_1_fu_285_p3 = ((icmp_ln30_fu_271_p2[0:0] === 1'b1) ? s_fu_265_p2 : ap_phi_mux_s_0_phi_fu_179_p4);

assign select_ln29_fu_277_p3 = ((icmp_ln30_fu_271_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_p_0_phi_fu_201_p4);

assign select_ln30_1_fu_428_p3 = ((icmp_ln30_reg_462[0:0] === 1'b1) ? 6'd1 : add_ln30_1_reg_488);

assign select_ln30_fu_353_p3 = ((and_ln29_1_fu_315_p2[0:0] === 1'b1) ? p_fu_321_p2 : select_ln29_fu_277_p3);

assign select_ln321_1_fu_333_p3 = ((or_ln321_fu_327_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_w_0_phi_fu_212_p4);

assign select_ln321_2_fu_345_p3 = ((and_ln29_1_fu_315_p2[0:0] === 1'b1) ? trunc_ln321_1_fu_341_p1 : and_ln29_fu_303_p2);

assign select_ln321_fu_219_p3 = ((rowBufferIdx_V[0:0] === 1'b1) ? 9'd160 : 9'd0);

assign shl_ln_fu_386_p3 = {{select_ln321_1_reg_473}, {4'd0}};

assign skip_flag_read_read_fu_102_p2 = skip_flag;

assign trunc_ln321_1_fu_341_p1 = p_fu_321_p2[0:0];

assign trunc_ln321_fu_299_p1 = ap_phi_mux_p_0_phi_fu_201_p4[0:0];

assign w_fu_423_p2 = (select_ln321_1_reg_473 + 4'd1);

assign xor_ln29_fu_293_p2 = (icmp_ln30_fu_271_p2 ^ 1'd1);

assign zext_ln29_fu_367_p1 = select_ln29_1_reg_467;

assign zext_ln321_15_fu_403_p1 = add_ln36_fu_393_p2;

assign zext_ln321_16_fu_412_p1 = add_ln321_2_fu_407_p2;

assign zext_ln321_17_fu_434_p1 = add_ln321_3_reg_499;

assign zext_ln321_fu_399_p1 = add_ln36_fu_393_p2;

always @ (posedge ap_clk) begin
    select_ln321_reg_443[4:0] <= 5'b00000;
    select_ln321_reg_443[6:6] <= 1'b0;
    select_ln321_reg_443[8] <= 1'b0;
    add_ln321_reg_448[4:0] <= 5'b00000;
end

endmodule //streamInOneRowTwoPix
