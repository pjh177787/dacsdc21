-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddLast_3600u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    reps_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    reps_empty_n : IN STD_LOGIC;
    reps_read : OUT STD_LOGIC );
end;


architecture behav of AddLast_3600u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_E10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln21_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal reps_blk_n : STD_LOGIC;
    signal reps_read_reg_109 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_88_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln21_fu_93_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_103_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal i_0_i_reg_77 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_88_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_condition_104 : BOOLEAN;

    component ultra_net_mul_32sdXL IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ultra_net_mul_32sdXL_U751 : component ultra_net_mul_32sdXL
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 13,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reps_read_reg_109,
        din1 => grp_fu_88_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_88_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_i_reg_77 <= i_fu_103_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_i_reg_77 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln21_reg_119 <= add_ln21_fu_93_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln21_reg_114 <= grp_fu_88_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((reps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                reps_read_reg_109 <= reps_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_V_V_empty_n, reps_empty_n, ap_CS_fsm_state5, icmp_ln21_fu_98_p2, ap_block_state5_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((reps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln21_fu_93_p2 <= std_logic_vector(unsigned(mul_ln21_reg_114) + unsigned(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, reps_empty_n)
    begin
                ap_block_state1 <= ((reps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state5_assign_proc : process(in_V_V_empty_n, icmp_ln21_fu_98_p2)
    begin
                ap_block_state5 <= (((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_io_assign_proc : process(out_r_TREADY, icmp_ln21_fu_98_p2)
    begin
                ap_block_state5_io <= (((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (out_r_TREADY = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (out_r_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_104_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state5, icmp_ln21_fu_98_p2)
    begin
                ap_condition_104 <= (not((((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5));
    end process;


    ap_done_assign_proc : process(ap_done_reg, in_V_V_empty_n, ap_CS_fsm_state5, icmp_ln21_fu_98_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state5, icmp_ln21_fu_98_p2, ap_block_state5_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_88_p1 <= ap_const_lv32_E10(13 - 1 downto 0);
    i_fu_103_p2 <= std_logic_vector(unsigned(i_0_i_reg_77) + unsigned(ap_const_lv32_1));
    icmp_ln21_fu_98_p2 <= "1" when (i_0_i_reg_77 = add_ln21_reg_119) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state5, icmp_ln21_fu_98_p2)
    begin
        if ((((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state5, icmp_ln21_fu_98_p2, ap_block_state5_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    out_r_TDATA <= in_V_V_dout;

    out_r_TDATA_blk_n_assign_proc : process(out_r_TREADY, ap_CS_fsm_state5, icmp_ln21_fu_98_p2)
    begin
        if ((((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TKEEP <= ap_const_lv8_FF;

    out_r_TLAST_assign_proc : process(icmp_ln21_fu_98_p2, ap_condition_104)
    begin
        if ((ap_const_boolean_1 = ap_condition_104)) then
            if ((icmp_ln21_fu_98_p2 = ap_const_lv1_1)) then 
                out_r_TLAST <= ap_const_lv1_1;
            elsif ((icmp_ln21_fu_98_p2 = ap_const_lv1_0)) then 
                out_r_TLAST <= ap_const_lv1_0;
            else 
                out_r_TLAST <= "X";
            end if;
        else 
            out_r_TLAST <= "X";
        end if; 
    end process;


    out_r_TVALID_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state5, icmp_ln21_fu_98_p2, ap_block_state5_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_1) and (in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln21_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            out_r_TVALID <= ap_const_logic_1;
        else 
            out_r_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    reps_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_blk_n <= reps_empty_n;
        else 
            reps_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    reps_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, reps_empty_n)
    begin
        if ((not(((reps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            reps_read <= ap_const_logic_1;
        else 
            reps_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
