-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convcqw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convcqw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11101101111100001101110101000000", 
    1 => "00010001111000011111110100011110", 
    2 => "10100000111100100000111011010001", 
    3 => "00011100111000111111100100010001", 
    4 => "10010010110101000010110111101110", 
    5 => "00101100001011101101110000100110", 
    6 => "10100000000000010010111011110111", 
    7 => "00100001101111010000111011111101", 
    8 => "00101111000110101011010000010010", 
    9 => "10010111000110110100001011011111", 
    10 => "01101101111111001101011101110100", 
    11 => "11001111001000000010010111101101", 
    12 => "01010011000000100010011011110011", 
    13 => "00111101000100000100001000010000", 
    14 => "00110001111111010010000111111111", 
    15 => "00111101001110100000010001010010", 
    16 => "00010001110000100001101111101111", 
    17 => "01011011110111110010001100001110", 
    18 => "10011011000000000010110000101111", 
    19 => "11101111111011111110110001111101", 
    20 => "11110110111100010011000111110010", 
    21 => "11100001000111111101001100010111", 
    22 => "01110111110101011110111100010101", 
    23 => "11100111001011100011011000111011", 
    24 => "11110001111001010000110011100011", 
    25 => "00101101111011000010110000101110", 
    26 => "11001101000100100000111011110000", 
    27 => "00011010111111111111111000101101", 
    28 => "11001110111001011111111010011101", 
    29 => "00110011010111101111111011100111", 
    30 => "01010101111101011111000011111111", 
    31 => "11010100111011010011000110101100", 
    32 => "01110000011110101001000010010000", 
    33 => "10010100001110110111011100100000", 
    34 => "00010001100100101001010111110001", 
    35 => "11000001101101000111010010010011", 
    36 => "00000001001000010011001011101111", 
    37 => "00001100000100110011000100000011", 
    38 => "00010001010000100011001011101111", 
    39 => "11101110111100101111110111101111", 
    40 => "00010100001011010001001111111111", 
    41 => "00110001001100001101010111100001", 
    42 => "00011111000011111110001100010001", 
    43 => "00100001001100100000000011111010", 
    44 => "00100001010111000011010000011111", 
    45 => "00100011001100111101000110100101", 
    46 => "00100000000011111110000111111110", 
    47 => "11110001010000000000001100011010", 
    48 => "11010000111111110000110100001100", 
    49 => "11000110111111011010110011101111", 
    50 => "00010011110111100001000101100010", 
    51 => "11001110111100001011010111111110", 
    52 => "11100000101111100010000000001010", 
    53 => "10100111000111001001000011101010", 
    54 => "01000001000100001101001001110100", 
    55 => "11011110111111111011011111010011", 
    56 => "11111111100110111110111000011010", 
    57 => "10010101000000111001010011111101", 
    58 => "00100000011100010001010100110100", 
    59 => "00011101111111111101001111000101", 
    60 => "00001011011111111100111011101110", 
    61 => "00000001000111010001001101111100", 
    62 => "00011111100111101110111100001011", 
    63 => "11011101000000000001001011111001", 
    64 => "11110100011100010000000111001111", 
    65 => "00011110000011011111111001111101", 
    66 => "11101010100111111110000111100000", 
    67 => "10110110111100011100111110110000", 
    68 => "11110100110011011101111111001110", 
    69 => "00001111111001000010111111011110", 
    70 => "00011111010111111101011000000010", 
    71 => "11000010001011111100011111100001", 
    72 => "00101110000001000101010111000101", 
    73 => "11011101000001001001110000010111", 
    74 => "00111101011111110011110101100001", 
    75 => "11101100011011101100000111000010", 
    76 => "01111111000011110000010100100110", 
    77 => "00000001111000111110111100000111", 
    78 => "00011101010000001101001001011011", 
    79 => "11101100011000100000001111011110", 
    80 => "00111111000000011010010100100000", 
    81 => "00100001111111110001111000101110", 
    82 => "00010000000011001111001011111111", 
    83 => "11001111000001000010000011110010", 
    84 => "11001101110011100011000111110000", 
    85 => "11101110000100010011110111010110", 
    86 => "00101101101110111100111101011101", 
    87 => "11111110111111110001001111100001", 
    88 => "11000100010011111101001100100000", 
    89 => "00000000111100000111000101000000", 
    90 => "11110100100111101010111111100001", 
    91 => "10011100010001011111001111111110", 
    92 => "00000001100100110000000111110001", 
    93 => "10111111001011111100111011110001", 
    94 => "00001111101101001111110111011110", 
    95 => "10010000000100001101001100011101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convcqw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convcqw is
    component convDSPOpt_4_convcqw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convcqw_rom_U :  component convDSPOpt_4_convcqw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


