-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convDSPOpt_4_convcmv_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convDSPOpt_4_convcmv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00101110110010101110110100110010", 
    1 => "11001110000011111110000011111110", 
    2 => "11000011111010011110001101010110", 
    3 => "11001011110111110010000011110001", 
    4 => "00000011001100101101110000100010", 
    5 => "11111110000111101110111111111110", 
    6 => "00000000110011001111000000010100", 
    7 => "11110001110000011101110000011010", 
    8 => "11101110001011110001010011100001", 
    9 => "11101111110110110001100111111111", 
    10 => "00011011110000111110101011010000", 
    11 => "11110110000000010101111011101110", 
    12 => "01010000011100001001110100100011", 
    13 => "11100000011110110011010000101110", 
    14 => "00011110100111000010011000100101", 
    15 => "11010011101111100100001110101111", 
    16 => "11011011000000001110110111101101", 
    17 => "00101011110110010100000011000111", 
    18 => "10100001111011101101100111101110", 
    19 => "11101110101111000001101011011100", 
    20 => "00001111110000101101000110010100", 
    21 => "01000000100110010000110111011101", 
    22 => "00000000111010011110111010011101", 
    23 => "11011101001011001100110011110010", 
    24 => "00000000111011101101111100011101", 
    25 => "00000000111000011011111011010001", 
    26 => "00101111000011010001111100010000", 
    27 => "11100000111111010000000100010100", 
    28 => "11110001111111001110111000101110", 
    29 => "11010001000000011110110111110010", 
    30 => "11101111000111001101111100010000", 
    31 => "00011100111110101111000100010100", 
    32 => "00101111111011011010000011110000", 
    33 => "00000001111011110000110000011101", 
    34 => "11000011000011010100001100010010", 
    35 => "00101111111010111110000000110011", 
    36 => "00101001000011111110111010100011", 
    37 => "10011111000000010100111100110000", 
    38 => "01110010101110110001001100101101", 
    39 => "00001111101111101101011111010111", 
    40 => "10101100110100010100111110011101", 
    41 => "11011101010011111110110100010111", 
    42 => "10110000110011000001111001010011", 
    43 => "00101111111011001110110111100011", 
    44 => "11110000010000100011111000100000", 
    45 => "01011101101011010000111110111110", 
    46 => "11100100110111000100111000010001", 
    47 => "11111011000111101101111000101111", 
    48 => "00111111110100001101001111111110", 
    49 => "11010000000011001111110000011111", 
    50 => "11101101111111110010000101110101", 
    51 => "11110010000001001111110100101101", 
    52 => "11110010101100101101000000000001", 
    53 => "00011101110111100001101111110100", 
    54 => "11101011110110110000111111110001", 
    55 => "11100000101011100011001110111101", 
    56 => "11100011101001100000000100000001", 
    57 => "00011110000011010001110100010010", 
    58 => "11011100110100000001111111101110", 
    59 => "11101100111100001111000100101101", 
    60 => "11101110110000101111111111010000", 
    61 => "11111101000011010010000011110010", 
    62 => "10011111000111001111000111101101", 
    63 => "11111110000010110000110111110101", 
    64 => "11011111111100000001001100011111", 
    65 => "10111111000010111110111111110100", 
    66 => "11010000111000000000111100001111", 
    67 => "11011011000011111110000111100011", 
    68 => "11001111111011010100010001001011", 
    69 => "10100000111110111110110100000010", 
    70 => "11011100000111110001000001001111", 
    71 => "11111100010011111111111100000101", 
    72 => "11100001100111100001111100100001", 
    73 => "00111111111000000001010011100110", 
    74 => "11010101000011111111000111010011", 
    75 => "11111111000011100000111001001011", 
    76 => "11110001101111000000111111110000", 
    77 => "11100011111010100011000100000001", 
    78 => "11110110001000011011001010100001", 
    79 => "00010110110101001101001000111001", 
    80 => "11000000111011101101110011111111", 
    81 => "00000010110110101100010101001100", 
    82 => "00010010000000100001001011000011", 
    83 => "00010011110101001101000111111001", 
    84 => "11101111011111101111111001000010", 
    85 => "11110001001011011111001000010001", 
    86 => "11110001110111111101111111001111", 
    87 => "00010010111111011011111011111010", 
    88 => "00110111010111110000111001010000", 
    89 => "11110010111111111101111011101111", 
    90 => "11111110001111101110110111100001", 
    91 => "00000111000100001011000111111011", 
    92 => "11000011100111000000111000011111", 
    93 => "10110010000001000001000000010001", 
    94 => "00011111001001001110000100010010", 
    95 => "00001111111000000011010100001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity convDSPOpt_4_convcmv is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convDSPOpt_4_convcmv is
    component convDSPOpt_4_convcmv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convDSPOpt_4_convcmv_rom_U :  component convDSPOpt_4_convcmv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


