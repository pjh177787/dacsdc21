// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool2x2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        vec_V_V_dout,
        vec_V_V_empty_n,
        vec_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write,
        reps_dout,
        reps_empty_n,
        reps_read,
        reps_out_din,
        reps_out_full_n,
        reps_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] vec_V_V_dout;
input   vec_V_V_empty_n;
output   vec_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;
input  [31:0] reps_dout;
input   reps_empty_n;
output   reps_read;
output  [31:0] reps_out_din;
input   reps_out_full_n;
output   reps_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg vec_V_V_read;
reg out_V_V_write;
reg reps_read;
reg reps_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    vec_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln35_reg_691;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] and_ln51_reg_720;
reg   [0:0] and_ln51_reg_720_pp0_iter2_reg;
reg    reps_blk_n;
reg    reps_out_blk_n;
reg   [41:0] indvar_flatten17_reg_169;
reg   [31:0] h_0_i_reg_180;
reg   [10:0] indvar_flatten_reg_191;
reg   [3:0] peIdx_0_i_reg_202;
reg   [6:0] w_0_i_reg_213;
reg   [31:0] reps_read_reg_680;
reg    ap_block_state1;
wire   [41:0] bound4_fu_264_p2;
reg   [41:0] bound4_reg_686;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln35_fu_270_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [41:0] add_ln35_7_fu_275_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] select_ln35_4_fu_301_p3;
reg   [31:0] select_ln35_4_reg_700;
wire   [0:0] trunc_ln35_fu_309_p1;
reg   [0:0] trunc_ln35_reg_705;
reg   [0:0] trunc_ln35_reg_705_pp0_iter1_reg;
wire   [6:0] select_ln36_fu_343_p3;
reg   [6:0] select_ln36_reg_709;
wire   [3:0] select_ln36_5_fu_351_p3;
reg   [3:0] select_ln36_5_reg_714;
wire   [0:0] and_ln51_fu_363_p2;
reg   [0:0] and_ln51_reg_720_pp0_iter1_reg;
wire   [6:0] w_fu_369_p2;
wire   [10:0] select_ln36_6_fu_381_p3;
wire   [3:0] select_ln18_fu_412_p3;
reg   [3:0] select_ln18_reg_734;
wire   [3:0] select_ln18_1_fu_446_p3;
reg   [3:0] select_ln18_1_reg_741;
wire   [3:0] select_ln18_2_fu_480_p3;
reg   [3:0] select_ln18_2_reg_748;
wire   [3:0] select_ln18_3_fu_514_p3;
reg   [3:0] select_ln18_3_reg_755;
reg   [9:0] row_store_V_addr_reg_762;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
wire   [9:0] row_store_V_address0;
reg    row_store_V_ce0;
wire   [15:0] row_store_V_q0;
reg    row_store_V_ce1;
reg    row_store_V_we1;
wire   [15:0] row_store_V_d1;
reg   [31:0] ap_phi_mux_h_0_i_phi_fu_184_p4;
reg   [3:0] ap_phi_mux_peIdx_0_i_phi_fu_206_p4;
wire   [63:0] zext_ln49_fu_535_p1;
reg   [15:0] p_Repl2_s_fu_114;
wire   [15:0] dataOut0_V_fu_631_p5;
reg   [15:0] p_Repl2_14_fu_118;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] shl_ln35_4_fu_229_p2;
wire   [31:0] shl_ln35_fu_224_p2;
wire   [31:0] add_ln35_fu_234_p2;
wire   [40:0] tmp_s_fu_240_p3;
wire   [38:0] tmp_60_fu_252_p3;
wire   [41:0] p_shl22_fu_260_p1;
wire   [41:0] p_shl_fu_248_p1;
wire   [0:0] icmp_ln36_fu_287_p2;
wire   [31:0] h_fu_281_p2;
wire   [0:0] icmp_ln37_fu_319_p2;
wire   [0:0] xor_ln35_fu_313_p2;
wire   [3:0] select_ln35_fu_293_p3;
wire   [0:0] and_ln35_fu_325_p2;
wire   [0:0] or_ln36_fu_337_p2;
wire   [3:0] peIdx_fu_331_p2;
wire   [0:0] trunc_ln37_fu_359_p1;
wire   [10:0] add_ln36_3_fu_375_p2;
wire   [3:0] p_Result_113_i_i_fu_396_p4;
wire   [3:0] trunc_ln647_fu_392_p1;
wire   [0:0] icmp_ln895_fu_406_p2;
wire   [3:0] p_Result_113_1_i_i_fu_430_p4;
wire   [3:0] p_Result_112_1_i_i_fu_420_p4;
wire   [0:0] icmp_ln895_1_fu_440_p2;
wire   [3:0] p_Result_113_2_i_i_fu_464_p4;
wire   [3:0] p_Result_112_2_i_i_fu_454_p4;
wire   [0:0] icmp_ln895_2_fu_474_p2;
wire   [3:0] p_Result_113_3_i_i_fu_498_p4;
wire   [3:0] p_Result_112_3_i_i_fu_488_p4;
wire   [0:0] icmp_ln895_3_fu_508_p2;
wire   [9:0] zext_ln36_fu_389_p1;
wire   [9:0] shl_ln3_fu_522_p3;
wire   [9:0] addr_fu_529_p2;
wire   [3:0] trunc_ln647_11_fu_549_p1;
wire   [0:0] icmp_ln895_4_fu_553_p2;
wire   [3:0] p_Result_113_1_i_fu_565_p4;
wire   [0:0] icmp_ln895_5_fu_575_p2;
wire   [3:0] p_Result_113_2_i_fu_587_p4;
wire   [0:0] icmp_ln895_6_fu_597_p2;
wire   [3:0] p_Result_113_3_i_fu_609_p4;
wire   [0:0] icmp_ln895_7_fu_619_p2;
wire   [3:0] select_ln18_7_fu_624_p3;
wire   [3:0] select_ln18_6_fu_602_p3;
wire   [3:0] select_ln18_5_fu_580_p3;
wire   [3:0] select_ln18_4_fu_558_p3;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

max_pool2x2_row_sbMq #(
    .DataWidth( 16 ),
    .AddressRange( 640 ),
    .AddressWidth( 10 ))
row_store_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(row_store_V_address0),
    .ce0(row_store_V_ce0),
    .q0(row_store_V_q0),
    .address1(row_store_V_addr_reg_762),
    .ce1(row_store_V_ce1),
    .we1(row_store_V_we1),
    .d1(row_store_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_691 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_0_i_reg_180 <= select_ln35_4_reg_700;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        h_0_i_reg_180 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten17_reg_169 <= add_ln35_7_fu_275_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten17_reg_169 <= 42'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_191 <= select_ln36_6_fu_381_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_191 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_691 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        peIdx_0_i_reg_202 <= select_ln36_5_reg_714;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        peIdx_0_i_reg_202 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_0_i_reg_213 <= w_fu_369_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_0_i_reg_213 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln51_reg_720 <= and_ln51_fu_363_p2;
        select_ln36_reg_709 <= select_ln36_fu_343_p3;
        trunc_ln35_reg_705 <= trunc_ln35_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln51_reg_720_pp0_iter1_reg <= and_ln51_reg_720;
        icmp_ln35_reg_691 <= icmp_ln35_fu_270_p2;
        trunc_ln35_reg_705_pp0_iter1_reg <= trunc_ln35_reg_705;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln51_reg_720_pp0_iter2_reg <= and_ln51_reg_720_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound4_reg_686[41 : 11] <= bound4_fu_264_p2[41 : 11];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln51_reg_720_pp0_iter2_reg) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Repl2_14_fu_118 <= p_Repl2_s_fu_114;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln35_reg_705_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Repl2_s_fu_114 <= dataOut0_V_fu_631_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((~((reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_read_reg_680 <= reps_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_691 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_store_V_addr_reg_762 <= zext_ln49_fu_535_p1;
        select_ln18_1_reg_741 <= select_ln18_1_fu_446_p3;
        select_ln18_2_reg_748 <= select_ln18_2_fu_480_p3;
        select_ln18_3_reg_755 <= select_ln18_3_fu_514_p3;
        select_ln18_reg_734 <= select_ln18_fu_412_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln35_4_reg_700 <= select_ln35_4_fu_301_p3;
        select_ln36_5_reg_714 <= select_ln36_5_fu_351_p3;
    end
end

always @ (*) begin
    if ((icmp_ln35_fu_270_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_691 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_h_0_i_phi_fu_184_p4 = select_ln35_4_reg_700;
    end else begin
        ap_phi_mux_h_0_i_phi_fu_184_p4 = h_0_i_reg_180;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_691 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_peIdx_0_i_phi_fu_206_p4 = select_ln36_5_reg_714;
    end else begin
        ap_phi_mux_peIdx_0_i_phi_fu_206_p4 = peIdx_0_i_reg_202;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln51_reg_720_pp0_iter2_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln51_reg_720_pp0_iter2_reg) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_blk_n = reps_empty_n;
    end else begin
        reps_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_out_blk_n = reps_out_full_n;
    end else begin
        reps_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_out_write = 1'b1;
    end else begin
        reps_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        reps_read = 1'b1;
    end else begin
        reps_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_store_V_ce0 = 1'b1;
    end else begin
        row_store_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_store_V_ce1 = 1'b1;
    end else begin
        row_store_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln35_reg_705_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_store_V_we1 = 1'b1;
    end else begin
        row_store_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_691 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_V_V_blk_n = vec_V_V_empty_n;
    end else begin
        vec_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_691 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vec_V_V_read = 1'b1;
    end else begin
        vec_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln35_fu_270_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln35_fu_270_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_7_fu_275_p2 = (indvar_flatten17_reg_169 + 42'd1);

assign add_ln35_fu_234_p2 = (shl_ln35_4_fu_229_p2 + shl_ln35_fu_224_p2);

assign add_ln36_3_fu_375_p2 = (indvar_flatten_reg_191 + 11'd1);

assign addr_fu_529_p2 = (zext_ln36_fu_389_p1 + shl_ln3_fu_522_p3);

assign and_ln35_fu_325_p2 = (xor_ln35_fu_313_p2 & icmp_ln37_fu_319_p2);

assign and_ln51_fu_363_p2 = (trunc_ln37_fu_359_p1 & trunc_ln35_fu_309_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'd1 == and_ln51_reg_720_pp0_iter2_reg) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln35_reg_691 == 1'd0) & (vec_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'd1 == and_ln51_reg_720_pp0_iter2_reg) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln35_reg_691 == 1'd0) & (vec_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'd1 == and_ln51_reg_720_pp0_iter2_reg) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln35_reg_691 == 1'd0) & (vec_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((reps_out_full_n == 1'b0) | (reps_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln35_reg_691 == 1'd0) & (vec_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((1'd1 == and_ln51_reg_720_pp0_iter2_reg) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound4_fu_264_p2 = (p_shl22_fu_260_p1 + p_shl_fu_248_p1);

assign dataOut0_V_fu_631_p5 = {{{{select_ln18_7_fu_624_p3}, {select_ln18_6_fu_602_p3}}, {select_ln18_5_fu_580_p3}}, {select_ln18_4_fu_558_p3}};

assign h_fu_281_p2 = (32'd1 + ap_phi_mux_h_0_i_phi_fu_184_p4);

assign icmp_ln35_fu_270_p2 = ((indvar_flatten17_reg_169 == bound4_reg_686) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_287_p2 = ((indvar_flatten_reg_191 == 11'd640) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_319_p2 = ((w_0_i_reg_213 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_440_p2 = ((p_Result_113_1_i_i_fu_430_p4 > p_Result_112_1_i_i_fu_420_p4) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_474_p2 = ((p_Result_113_2_i_i_fu_464_p4 > p_Result_112_2_i_i_fu_454_p4) ? 1'b1 : 1'b0);

assign icmp_ln895_3_fu_508_p2 = ((p_Result_113_3_i_i_fu_498_p4 > p_Result_112_3_i_i_fu_488_p4) ? 1'b1 : 1'b0);

assign icmp_ln895_4_fu_553_p2 = ((trunc_ln647_11_fu_549_p1 > select_ln18_reg_734) ? 1'b1 : 1'b0);

assign icmp_ln895_5_fu_575_p2 = ((p_Result_113_1_i_fu_565_p4 > select_ln18_1_reg_741) ? 1'b1 : 1'b0);

assign icmp_ln895_6_fu_597_p2 = ((p_Result_113_2_i_fu_587_p4 > select_ln18_2_reg_748) ? 1'b1 : 1'b0);

assign icmp_ln895_7_fu_619_p2 = ((p_Result_113_3_i_fu_609_p4 > select_ln18_3_reg_755) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_406_p2 = ((p_Result_113_i_i_fu_396_p4 > trunc_ln647_fu_392_p1) ? 1'b1 : 1'b0);

assign or_ln36_fu_337_p2 = (icmp_ln36_fu_287_p2 | and_ln35_fu_325_p2);

assign out_V_V_din = {{p_Repl2_s_fu_114}, {p_Repl2_14_fu_118}};

assign p_Result_112_1_i_i_fu_420_p4 = {{vec_V_V_dout[7:4]}};

assign p_Result_112_2_i_i_fu_454_p4 = {{vec_V_V_dout[11:8]}};

assign p_Result_112_3_i_i_fu_488_p4 = {{vec_V_V_dout[15:12]}};

assign p_Result_113_1_i_fu_565_p4 = {{row_store_V_q0[7:4]}};

assign p_Result_113_1_i_i_fu_430_p4 = {{vec_V_V_dout[23:20]}};

assign p_Result_113_2_i_fu_587_p4 = {{row_store_V_q0[11:8]}};

assign p_Result_113_2_i_i_fu_464_p4 = {{vec_V_V_dout[27:24]}};

assign p_Result_113_3_i_fu_609_p4 = {{row_store_V_q0[15:12]}};

assign p_Result_113_3_i_i_fu_498_p4 = {{vec_V_V_dout[31:28]}};

assign p_Result_113_i_i_fu_396_p4 = {{vec_V_V_dout[19:16]}};

assign p_shl22_fu_260_p1 = tmp_60_fu_252_p3;

assign p_shl_fu_248_p1 = tmp_s_fu_240_p3;

assign peIdx_fu_331_p2 = (4'd1 + select_ln35_fu_293_p3);

assign reps_out_din = reps_dout;

assign row_store_V_address0 = zext_ln49_fu_535_p1;

assign row_store_V_d1 = {{{{select_ln18_3_reg_755}, {select_ln18_2_reg_748}}, {select_ln18_1_reg_741}}, {select_ln18_reg_734}};

assign select_ln18_1_fu_446_p3 = ((icmp_ln895_1_fu_440_p2[0:0] === 1'b1) ? p_Result_113_1_i_i_fu_430_p4 : p_Result_112_1_i_i_fu_420_p4);

assign select_ln18_2_fu_480_p3 = ((icmp_ln895_2_fu_474_p2[0:0] === 1'b1) ? p_Result_113_2_i_i_fu_464_p4 : p_Result_112_2_i_i_fu_454_p4);

assign select_ln18_3_fu_514_p3 = ((icmp_ln895_3_fu_508_p2[0:0] === 1'b1) ? p_Result_113_3_i_i_fu_498_p4 : p_Result_112_3_i_i_fu_488_p4);

assign select_ln18_4_fu_558_p3 = ((icmp_ln895_4_fu_553_p2[0:0] === 1'b1) ? trunc_ln647_11_fu_549_p1 : select_ln18_reg_734);

assign select_ln18_5_fu_580_p3 = ((icmp_ln895_5_fu_575_p2[0:0] === 1'b1) ? p_Result_113_1_i_fu_565_p4 : select_ln18_1_reg_741);

assign select_ln18_6_fu_602_p3 = ((icmp_ln895_6_fu_597_p2[0:0] === 1'b1) ? p_Result_113_2_i_fu_587_p4 : select_ln18_2_reg_748);

assign select_ln18_7_fu_624_p3 = ((icmp_ln895_7_fu_619_p2[0:0] === 1'b1) ? p_Result_113_3_i_fu_609_p4 : select_ln18_3_reg_755);

assign select_ln18_fu_412_p3 = ((icmp_ln895_fu_406_p2[0:0] === 1'b1) ? p_Result_113_i_i_fu_396_p4 : trunc_ln647_fu_392_p1);

assign select_ln35_4_fu_301_p3 = ((icmp_ln36_fu_287_p2[0:0] === 1'b1) ? h_fu_281_p2 : ap_phi_mux_h_0_i_phi_fu_184_p4);

assign select_ln35_fu_293_p3 = ((icmp_ln36_fu_287_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_peIdx_0_i_phi_fu_206_p4);

assign select_ln36_5_fu_351_p3 = ((and_ln35_fu_325_p2[0:0] === 1'b1) ? peIdx_fu_331_p2 : select_ln35_fu_293_p3);

assign select_ln36_6_fu_381_p3 = ((icmp_ln36_fu_287_p2[0:0] === 1'b1) ? 11'd1 : add_ln36_3_fu_375_p2);

assign select_ln36_fu_343_p3 = ((or_ln36_fu_337_p2[0:0] === 1'b1) ? 7'd0 : w_0_i_reg_213);

assign shl_ln35_4_fu_229_p2 = reps_read_reg_680 << 32'd4;

assign shl_ln35_fu_224_p2 = reps_read_reg_680 << 32'd6;

assign shl_ln3_fu_522_p3 = {{select_ln36_reg_709}, {3'd0}};

assign start_out = real_start;

assign tmp_60_fu_252_p3 = {{add_ln35_fu_234_p2}, {7'd0}};

assign tmp_s_fu_240_p3 = {{add_ln35_fu_234_p2}, {9'd0}};

assign trunc_ln35_fu_309_p1 = select_ln35_4_fu_301_p3[0:0];

assign trunc_ln37_fu_359_p1 = select_ln36_fu_343_p3[0:0];

assign trunc_ln647_11_fu_549_p1 = row_store_V_q0[3:0];

assign trunc_ln647_fu_392_p1 = vec_V_V_dout[3:0];

assign w_fu_369_p2 = (select_ln36_fu_343_p3 + 7'd1);

assign xor_ln35_fu_313_p2 = (icmp_ln36_fu_287_p2 ^ 1'd1);

assign zext_ln36_fu_389_p1 = select_ln36_5_reg_714;

assign zext_ln49_fu_535_p1 = addr_fu_529_p2;

always @ (posedge ap_clk) begin
    bound4_reg_686[10:0] <= 11'b00000000000;
end

endmodule //max_pool2x2
